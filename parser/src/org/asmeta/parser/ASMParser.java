/* Generated By:JavaCC: Do not edit this line. ASMParser.java */
package org.asmeta.parser;
//import org.apache.log4j.PropertyConfigurator;
//Import JMIs
import asmeta.*;
import asmeta.definitions.*;
import asmeta.structure.*;
import asmeta.terms.*;
import asmeta.transitionrules.*;
import asmeta.definitions.domains.*;
import asmeta.terms.basicterms.*;
import asmeta.terms.furtherterms.*;
import asmeta.transitionrules.basictransitionrules.*;
import asmeta.transitionrules.derivedtransitionrules.*;
import asmeta.transitionrules.turbotransitionrules.*;
import java.io.FileOutputStream;
import java.io.File;
import java.util.*;

public class ASMParser implements ASMParserConstants {
  public static final String VERSION = "2.0.0";

  public static final String asmExtension = ".asm";

  private String filename; // file name without extension, needed to check that the name of the machine is the same

  private String asmDirLib; // where to find libraries

  private Header header; //the header section of the Asm

  //the declared domains. It associates domain names to the corresponding object.Its tuples are of kind(String,Domain)
  private HashMap < String, Domain > declared_Dom = new HashMap < String, Domain > ();

  // the declared functions: those in the signature and those imported
  private HashMap < String, List < Function > > declared_Func = new HashMap < String, List < Function > > (); //the declared functions of the ASM. It associates function names to the list of functions with that name (a function can be overloaded).Its tuples are of kind(String,List<Function>)

  //the ruleDeclarations of the ASM. It associates rule names to the corresponding object.Its tuples are of kind(String,RuleDeclaration)
  private HashMap < String, List < RuleDeclaration > > declared_Rules = new HashMap < String, List < RuleDeclaration > > ();

  // it keeps memory of the already imported asm, to avoid importing of already imported ASM
  // keep static since it is shared among parser instances
  private static HashMap < String, Asm > alreadImported;

  // real Any Domain
  private static final String anyDomainAnyName = "Any";

  //the structured domains created during parsing. It associates domain names to the corresponding object. Its tuples are of kind(String,StructuredTD)
  // NO LONGER USED
  //private static HashMap<String,Domain> predefined_Dom = new HashMap<String,Domain>();    //the domains created during parsing. It associates domain names to the corresponding object. Its tuples are of kind(String,TypeDomain)
  private HashMap enumElem = new HashMap(); //It associates enumeration element names to their enumeration domain. Its tuples are of kind(String,EnumTD)

  //These hashMap associate the hashcode of the element name to the element name itself. Its tuples are of kind (Integer,String)
  private HashMap exported_Rules;

  private HashMap exported_Func;

  private HashMap exported_Dom;

  private boolean exportAll; //the value "true" indicates all functions and rule are exported

  // forse si puo' eliminare - non serve piu' AG
  private HashMap programs = new HashMap(); //the hashmap associating names of rule declarations (programs for agents) to the corresponding agent. Its tuples are of kind (Sting,AgentInitialization)

  // these are no longer static because if it reads another (imported ASM)
  // this information must be shared. are shared by passing the argument to the new parser
  // are friendly: must be set before parsing ???
  private AsmetaFactory asmPk;

  private DefinitionsFactory defPack;

  private TermsFactory termsPack;

  private TransitionRulesFactory rulesPack;

  private StructureFactory structurePack;

  private asmeta.definitions.domains.DomainsFactory domainsFactory;

  /** this is set by the setUpReadExport to the parser used to read the first spec*/
  public static ASMParser asmParser;

  // only one logger: DANGER information is mixed
  // errors in imported lib appears errors in pmain file
  // TO BE FIXED
  private static ParserResultLogger Logger = new ParserResultLogger();

  public static ParserResultLogger getResultLogger()
  {
    return Logger;
  }

  /**
	 * It returns the collection of ASM
	 * create the EMF instances
	 * IT IS STATIC BECAUSE may use several parsers (included files and so on).
	 */
  public static AsmCollection setUpReadAsm(File f) throws Exception
  {
    Logger.resetForParsing(f);
    assert (f.exists() && f.isFile());
    assert (f.getName().endsWith(asmExtension));
    Logger.logInfo("parsing file " + f.getAbsolutePath());
    // reset the domains
    DomainsFactory.eINSTANCE.resetDomains();
    Utility.reset();
    // BUILD THE MODEL
    // init all imported so far
    alreadImported = new HashMap < String, Asm > ();
    // get the asmetafactory instance
    AsmetaFactory mainpackage = AsmetaFactory.eINSTANCE;
    // builds the parser
    asmParser = new ASMParser(f, mainpackage);
    // parses  the main Asm
    Asm asm = asmParser.Asm();
    // build the collection of ASM
    AsmCollection allAsms = new AsmCollection(alreadImported.values());
    // add this one as first one
    allAsms.addMain(asm);
    Logger.logInfo("file successfully parsed for asm " + asm.getName());
    return allAsms;
  }

  /* The input file must have the same name of the ASM spec.
     * A file is needed because we need o set the path where to search
     * for libraries.
     * asmPack is the topmost level package of the metamodel.
     */
  private ASMParser(File f, AsmetaFactory asmPack) throws Exception
  {
    this (new java.io.FileInputStream(f));
    //Check the file name
    if (!f.exists() || !f.isFile())
    {
      Logger.fatal("Error:  " + f.toString() + " is not a file.");
      throw new java.io.FileNotFoundException();
    }
    //DUPLICATED CODE (see main() in MainParser)
    //if (!f.getName().endsWith(asmExtension)) {
    //	Logger.fatal("Error:  " + f.toString() + " is not an asm file.");
    //
    //	throw new Exception("Asm files must have "+ asmExtension +" extension");
    //}
    // get the filename without ".asm" extension
    filename = f.getName().substring(0, f.getName().length() - 4);
    // the library is relative to this file
    asmDirLib = f.getParent();
    // initialize other packages
    // Get references to package
    asmPk = asmPack;
    defPack = asmPk.getDefinitions();
    termsPack = asmPk.getTerms();
    rulesPack = asmPk.getTransitionRules();
    structurePack = asmPk.getStructure();
    domainsFactory = defPack.getDomains();
  }

/***************************************************************/
/*                         GRAMMAR START                       */
/***************************************************************/
/***** MAIN OK! *****/
  final public Asm Asm() throws ParseException {
  boolean isAsm = true; // true states an ASM, false states a module
  String name;
  boolean isAsyncr = false;
  Header h;
  Initialization i;
  Body b;
  MacroDeclaration r;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASYNCR:
      jj_consume_token(ASYNCR);
      isAsyncr = true;
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASM:
      jj_consume_token(ASM);
      break;
    case MODULE:
      jj_consume_token(MODULE);
      isAsm = false;
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    name = ID();
    Asm asmMachine = structurePack.createAsm(name, isAsyncr);
    Logger.logDebug("ASM " + name);
    if ((filename != null) && !filename.equals(name)) {if (true) throw new ParseException("Error: The file name \u005c"" + filename + "\u005c" is not equal to the asm name \u005c"" + name + "\u005c".\u005cn");}
    h = Header(asmMachine);
    //set the reference
    asmMachine.setHeaderSection(h);
    b = Body(asmMachine);
    //set the reference
    asmMachine.setBodySection(b);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MAIN:
      jj_consume_token(MAIN);
      r = MacroDeclaration();
      //set the reference
      asmMachine.setMainrule(r);
      // add also the main rule to the body (to avoid dangling resources) 
      b.getRuleDeclaration().add(r);
      if (!isAsm)
      {
        Logger.logWarning("Warning: " + filename + " is a module. It cannot have a Main Rule.\u005cn");
      }
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INIT:
    case Default:
      Collection < Initialization > initialStateColl = asmMachine.getInitialState();
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INIT:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_1;
        }
        i = Initialization();
        //add it to the collection of initial states
        initialStateColl.add(i);
      }
      jj_consume_token(Default);
      i = Initialization();
      //add it to the collection of initial states
      initialStateColl.add(i);
      //set the reference to the default initial state
      asmMachine.setDefaultInitialState(i);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INIT:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_2;
        }
        i = Initialization();
        //set the reference
        asmMachine.getInitialState().add(i);
      }
      if (!isAsm)
      {
        Logger.logWarning("Warning: " + filename + " is a module. It cannot have any initial state.\u005cn");
      }
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    //Check OCL constraints
    if (!OCL_Checker.checkAsm(asmMachine))
    {
      Logger.logErr(OCL_Checker.getMsgErr());
      Logger.logErr("       At the Asm " + name + ".\u005cn");
    }
    jj_consume_token(0);
    {if (true) return asmMachine;}
    throw new Error("Missing return statement in function");
  }

//---------------------------HEADER OK! ---------------------------//
  final public Header Header(Asm m) throws ParseException {
  ImportClause i;
  ExportClause e;
  Signature s;
    header = structurePack.createHeader();
    s = structurePack.createSignature();
    header.setSignature(s);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMPORT:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_3;
      }
      i = ImportClause();
      header.getImportClause().add(i);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXPORT:
      e = ExportClause();
      header.setExportClause(e);
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    s = Signature(s);
    {if (true) return header;}
    throw new Error("Missing return statement in function");
  }

/*-----------------------*/
  final public ImportClause ImportClause() throws ParseException {
  String moduleName;
  String importedID;
  Function f;
  Domain d;
  RuleDeclaration r;
  boolean importAll = true;
    jj_consume_token(IMPORT);
    moduleName = MOD_ID();
    ImportClause impClause = structurePack.createImportClause();
    impClause.setModuleName(moduleName);
    // it should compute again asmLibPath relatively the import ...??
    if (asmDirLib == null) asmDirLib = ".";
    Asm module_asm = null;
    String moduleFileName = null;
    try
    {
      // find the imported module file
      File moduleFile = Utility.importFile(asmDirLib, moduleName, asmExtension);
      moduleFileName = moduleFile.getCanonicalPath();
      Logger.logDebug("importing  " + moduleFileName);
      // take the module from the already imported modules
      module_asm = alreadImported.get(moduleFileName);
      // check if already imported
      if (module_asm == null)
      {
        ASMParser nestedParser = new ASMParser(moduleFile, asmPk);
        Logger.logDebug("---------------------------- Beginning of " + moduleName + " parsing----------------------------");
        module_asm = nestedParser.Asm();
        Logger.logDebug("---------------------------- End of " + moduleName + " parsing----------------------------\u005cn");
        alreadImported.put(moduleFileName, module_asm);
      }
      else
      {
        // non faccio il parsing ma prendo comunque l'export del modulo e lo metto nell'import
        Logger.logDebug("--------- " + moduleFileName + "  already imported ");
      }
    }
    catch (Exception e)
    {
      e.printStackTrace(System.err);
      {if (true) throw new ParseException("Error: File " + filename + " has errors when importing " + moduleFileName + ":" + e.getMessage());}
    }
    ExportClause module_expCl = module_asm.getHeaderSection().getExportClause();
    Collection < Function > impFunctions = impClause.getImportedFunction();
    Collection < Domain > impDomains = impClause.getImportedDomain();
    Collection < RuleDeclaration > impRules = impClause.getImportedRule();
    Collection < Function > module_func = null;
    Collection < Domain > module_dom = null;
    Collection < RuleDeclaration > module_rules = null;
    if (module_expCl != null)
    {
      module_func = module_expCl.getExportedFunction();
      module_dom = module_expCl.getExportedDomain();
      module_rules = module_expCl.getExportedRule();
    }
    else
    {
      Logger.logWarning("Warning: The ASM " + moduleName + " does not export any function or rule. It cannot be imported by this ASM.\u005cn");
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 117:
      jj_consume_token(117);
      Logger.logDebug("imported elements: ");
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID_DOMAIN:
        importedID = ID_DOMAIN();
        if (module_expCl != null)
        {
          d = Utility.search_domName(module_dom, importedID);
          if (d != null)
          {
            impDomains.add(d);
            Logger.logDebug(importedID);
          }
          else
          {
            Logger.logWarning("Warning: The domain " + importedID + " is not exported by the ASM " + moduleName + ". It cannot be imported by this ASM.\u005cn");
          }
        }
        break;
      case ID_FUNCTION:
        importedID = ID_FUNCTION();
        if (module_expCl != null)
        {
          f = Utility.search_funcName(module_func, importedID);
          if (f != null)
          {
            impFunctions.add(f);
            Logger.logDebug(importedID);
            //if it is a Dynamic Function delete all function initializations
            if (f instanceof DynamicFunction) ((DynamicFunction) f).getInitialization().clear();
          }
          else
          {
            Logger.logWarning("Warning: The function " + importedID + " is not exported by the ASM " + moduleName + ". It cannot be imported by this ASM.\u005cn");
          }
        }
        break;
      case ID_RULE:
        importedID = ID_RULE();
        if (module_expCl != null)
        {
          r = Utility.search_ruleName(module_rules, importedID);
          if (r != null)
          {
            impRules.add(r);
            Logger.logDebug(importedID);
          }
          else
          {
            Logger.logWarning("Warning: The rule " + importedID + " is not exported by the ASM " + moduleName + ". It cannot be imported by this ASM.\u005cn");
          }
        }
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 118:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_4;
        }
        jj_consume_token(118);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ID_DOMAIN:
          importedID = ID_DOMAIN();
          if (module_expCl != null)
          {
            d = Utility.search_domName(module_dom, importedID);
            if (d != null)
            {
              impDomains.add(d);
              Logger.logDebug("," + importedID);
            }
            else
            {
              Logger.logWarning("Warning: The domain " + importedID + " is not exported by the ASM " + moduleName + ". It cannot be imported by this ASM.\u005cn");
            }
          }
          break;
        case ID_FUNCTION:
          importedID = ID_FUNCTION();
          if (module_expCl != null)
          {
            f = Utility.search_funcName(module_func, importedID);
            if (f != null)
            {
              impFunctions.add(f);
              Logger.logDebug("," + importedID);
              //if it is a Dynamic Function delete all function initializations
              if (f instanceof DynamicFunction) ((DynamicFunction) f).getInitialization().clear();
            }
            else
            {
              Logger.logWarning("Warning: The function " + importedID + " is not exported by the ASM " + moduleName + ". It cannot be imported by this ASM.\u005cn");
            }
          }
          break;
        case ID_RULE:
          importedID = ID_RULE();
          if (module_expCl != null)
          {
            r = Utility.search_ruleName(module_rules, importedID);
            if (r != null)
            {
              impRules.add(r);
              Logger.logDebug("," + importedID);
            }
            else
            {
              Logger.logWarning("Warning: The rule " + importedID + " is not exported by the ASM " + moduleName + ". It cannot be imported by this ASM.\u005cn");
            }
          }
          break;
        default:
          jj_la1[10] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(119);
      Logger.logDebug("");
      importAll = false;
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    if (importAll && module_expCl != null)
    { //all domains of the export clause are imported
      impDomains.addAll(module_dom);
      //all functions of the export clause are imported
      for (Function fi : module_func)
      {
        //add the function to the import clause
        impFunctions.add(fi);
        //if it is a Dynamic Function delete all function initializations
        if (fi instanceof DynamicFunction) ((DynamicFunction) fi).getInitialization().clear();
      }
      //all rules of the export clause are imported
      Iterator iter_rules = module_rules.iterator();
      while (iter_rules.hasNext())
      {
        r = (RuleDeclaration) iter_rules.next();
        Logger.logDebug("import rule " + r.getName());
        //add the rule to the import clause
        impRules.add(r);
      }
      Logger.logDebug("imported elements: all");
    }
    {if (true) return impClause;}
    throw new Error("Missing return statement in function");
  }

/*-----------------------*/
  final public ExportClause ExportClause() throws ParseException {
  String exportedID;
    jj_consume_token(EXPORT);
    Logger.logDebug("export: ");
    ExportClause expClause = structurePack.createExportClause();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID_DOMAIN:
    case ID_RULE:
    case ID_FUNCTION:
        //Some functions, domains and rules are exported, but not all. Their names are stored in the global variables "exported_Func", "exported_Dom" and "exported_Rules"
        exportAll = false;
        exported_Func = new HashMap();
        exported_Dom = new HashMap();
        exported_Rules = new HashMap();
        String oldValue;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID_DOMAIN:
        exportedID = ID_DOMAIN();
          oldValue = (String) exported_Dom.put(new Integer(exportedID.hashCode()), exportedID);
          if (oldValue == null) Logger.logDebug(exportedID);
        break;
      case ID_FUNCTION:
        exportedID = ID_FUNCTION();
          oldValue = (String) exported_Func.put(new Integer(exportedID.hashCode()), exportedID);
          if (oldValue == null) Logger.logDebug(exportedID);
        break;
      case ID_RULE:
        exportedID = ID_RULE();
          oldValue = (String) exported_Rules.put(new Integer(exportedID.hashCode()), exportedID);
          if (oldValue == null) Logger.logDebug(exportedID);
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 118:
          ;
          break;
        default:
          jj_la1[13] = jj_gen;
          break label_5;
        }
        jj_consume_token(118);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ID_DOMAIN:
          exportedID = ID_DOMAIN();
            oldValue = (String) exported_Dom.put(new Integer(exportedID.hashCode()), exportedID);
            if (oldValue == null) Logger.logDebug("," + exportedID);
          break;
        case ID_FUNCTION:
          exportedID = ID_FUNCTION();
            oldValue = (String) exported_Func.put(new Integer(exportedID.hashCode()), exportedID);
            if (oldValue == null) Logger.logDebug("," + exportedID);
          break;
        case ID_RULE:
          exportedID = ID_RULE();
            oldValue = (String) exported_Rules.put(new Integer(exportedID.hashCode()), exportedID);
            if (oldValue == null) Logger.logDebug("," + exportedID);
          break;
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    case MULT:
      jj_consume_token(MULT);
      //All functions, domains and rules declared in this machine are exported
      exportAll = true;
      Logger.logDebug("all");
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return expClause;}
    throw new Error("Missing return statement in function");
  }

/*-----------------------*/
  final public Signature Signature(Signature signature) throws ParseException {
  Domain d, c;
  Function f;
    jj_consume_token(SIGNATURE);
    jj_consume_token(120);
    Logger.logDebug("signature:");
    //create the object
    //Signature signature = structurePack.createSignature();
    Collection < Domain > domains = signature.getDomain();
    Collection < Function > functions = signature.getFunction();
    ExportClause expClause = header.getExportClause();
    Collection < Function > expFunc = null;
    Collection < Domain > expDom = null;
    if (expClause != null)
    {
      expFunc = expClause.getExportedFunction();
      expDom = expClause.getExportedDomain();
    }
    String d_name, c_name;
    boolean inserted;
    // the declarations of imported functions and domains are added to
    // the visible name
    for (ImportClause impClause : header.getImportClause())
    {
      //insert the imported domains
      for (Domain dom : impClause.getImportedDomain())
      {
        d_name = dom.getName();
        if (!declared_Dom.containsKey(d_name))
        {
          //add the domain to the signature
          //domains.add(dom);
          if (!(dom instanceof StructuredTd || dom instanceof BasicTd || dom instanceof AgentDomain || dom instanceof ReserveDomain || dom instanceof AnyDomain))  //insert the domain in the table of declared domains
          declared_Dom.put(d_name, dom);
          //If the imported domain is an enumeration, its enum literals are
          // added to the hash table "enumElem"
          if (dom instanceof EnumTd)
          {
            Iterator iter_enum = ((EnumTd) dom).getElement().iterator();
            EnumElement enumEl;
            while (iter_enum.hasNext())
            {
              enumEl = (EnumElement) iter_enum.next();
              enumElem.put(enumEl.getSymbol(), (EnumTd) dom);
            }
          }
          //check if the domain can be exported
          //Remark: the HashMap exported_Dom is initialized within the ExportClause method so if exported_Dom!=null => expClause!=null
          if (((exported_Dom != null) && exported_Dom.containsKey(new Integer(d_name.hashCode()))) || (exportAll == true))
          { //add the domain to the exportClause
            expDom.add(dom);
            //create the association
            //X AExpClDom.add(expClause,d);
          }
        }
      }
      //insert the imported functions
      for (Function fi : impClause.getImportedFunction())
      {
        inserted = Utility.insert(fi, declared_Func);
        if (inserted)
        { // DO NOT add the function to the signature
          //insert domain and codomain of the function in the declared Domains
          Utility.insert(fi.getDomain(), declared_Dom);
          Utility.insert(fi.getCodomain(), declared_Dom);
          //check if the function can be exported
          //Remark: the HashMap exported_Func is initialized within the ExportClause method so if exported_Func!=null => expClause!=null
          if (((exported_Func != null) && exported_Func.containsKey(new Integer(fi.getName().hashCode()))) || (exportAll == true))
          { //add the function to the exportClause
            expFunc.add(fi);
          }
        }
      }
    }
    //         Logger.logDebug("");

    label_6:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_6;
      }
      d = Domain();
      d_name = d.getName();
      //check if the domain has already been declared
      if (!declared_Dom.containsKey(d_name))
      { //add the domain to the signature
        domains.add(d);
        if (!(d instanceof StructuredTd || d instanceof BasicTd || d instanceof AgentDomain || d instanceof ReserveDomain || d instanceof AnyDomain))  //insert the domain in the table of declared domains
        declared_Dom.put(d_name, d);
        if (d instanceof StructuredTd) Logger.logDebug(d_name);
      }
      else {if (true) throw new ParseException("Error: The domain " + d_name + " has been declared twice.");}
      //check if the domain can be exported
      //Remark: the HashMap exported_Dom is initialized within the ExportClause method so if exported_Dom!=null => expClause!=null
      if (((exported_Dom != null) && exported_Dom.containsKey(new Integer(d_name.hashCode()))) || (exportAll == true))
      { //add the domain to the exportClause
        expDom.add(d);
        //create the association
        //X AExpClDom.add(expClause,d);
      }
    }
    Logger.logDebug("");
    label_7:
    while (true) {
      if (jj_2_2(2)) {
        ;
      } else {
        break label_7;
      }
      f = Function();
      inserted = Utility.insert(f, declared_Func);
      if (inserted)
      { //add the function to the signature
        functions.add(f);
        //X ASignFunc.add(signature,f);
      }
      else {if (true) throw new ParseException("Error: The function " + f.getName() + ":" + ((f.getDomain() == null) ? "" : (f.getDomain().getName() + "->")) + f.getCodomain().getName() + " has been declared twice.");}
      //check if the function can be exported
      //Remark: the HashMap exported_Func is initialized within the ExportClause method so if exported_Func!=null => expClause!=null
      if (((exported_Func != null) && exported_Func.containsKey(new Integer(f.getName().hashCode()))) || (exportAll == true))
      { //add the function to the exportClause
        expFunc.add(f);
        //create the association
        //X AExpClFunc.add(expClause,f);
      }
      //check OCL constraint U7: function->forAll(f:Function | not f.oclIsTypeOf(LocalFunction))
      if (OCL_Checker.isLocal(f)) {if (true) throw new ParseException("Error: A local dynamic function cannot be declared in the signature.\u005cn" + "       At the declaration of the function " + f.getName() + ".");}
    }
    {if (true) return signature;}
    throw new Error("Missing return statement in function");
  }

//-----------------------INITIALIZATION  -----------------------//
  final public Initialization Initialization() throws ParseException {
  String nameState;
  DomainInitialization d_init;
  FunctionInitialization f_init;
  AgentInitialization a_init;
    jj_consume_token(INIT);
    nameState = ID();
    jj_consume_token(120);
    Logger.logDebug("Init " + nameState + ":");
    Initialization initState = structurePack.createInitialization();
    initState.setName(nameState);
    label_8:
    while (true) {
      if (jj_2_3(2)) {
        ;
      } else {
        break label_8;
      }
      d_init = DomainInitialization(initState);
      initState.getDomainInitialization().add(d_init);
    }
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FUNCTION:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_9;
      }
      f_init = FunctionInitialization(initState);
      initState.getFunctionInitialization().add(f_init);
    }
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AGENT:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_10;
      }
      a_init = AgentInitialization(initState);
      initState.getAgentInitialization().add(a_init);
    }
    //check OCL constraints
    if (!OCL_Checker.checkInitialization(initState))
    {
      Logger.logErr(OCL_Checker.getMsgErr() + "\u005cn       At the initial state " + nameState + ".\u005cn");
    }
    {if (true) return initState;}
    throw new Error("Missing return statement in function");
  }

  final public DomainInitialization DomainInitialization(Initialization initState) throws ParseException {
  String name;
  Term body;
  HashMap localVar = new HashMap();
    jj_consume_token(DOMAIN);
    name = ID_DOMAIN();
    jj_consume_token(EQ);
    Logger.logDebug("\u005cndomain " + name + "\u005cnbody:");
    body = Term(localVar, false, null);
    Domain dom = (Domain) declared_Dom.get(name);
    //check if the domain has been declared
    if (dom == null) {if (true) throw new ParseException("Error: The domain " + name + " has not been declared. It cannot be initialized.\u005cn");}
    //check if the domain is a concrete-domain
    if (!(dom instanceof ConcreteDomain)) {if (true) throw new ParseException("Error: The domain " + name + " is not a concrete-domain. It cannot be initialized.\u005cn");}
    //create the object
    DomainInitialization dom_init = structurePack.createDomainInitialization();
    dom_init.setInitialState(initState);
    //set the reference to the initialized domain
    dom_init.setInitializedDomain(((ConcreteDomain) dom));
    ((ConcreteDomain) dom).getInitialization().add(dom_init);
    //set the reference to the body
    dom_init.setBody(body);
    //check ocl constraints
    if (!OCL_Checker.checkDomainInitialization(dom_init)) {if (true) throw new ParseException(OCL_Checker.getMsgErr() + "\u005cn       At the initialization of the domain " + dom.getName() + ".\u005cn");}
    {if (true) return dom_init;}
    throw new Error("Missing return statement in function");
  }

  final public FunctionInitialization FunctionInitialization(Initialization initState) throws ParseException {
  Term body;
  String func_name;
  VariableTerm v;
  Domain inDom;
  HashMap localVar = new HashMap();
    jj_consume_token(FUNCTION);
    func_name = ID_FUNCTION();
    Logger.logDebug("initialization of function " + func_name);
    //create the object
    FunctionInitialization func_init = structurePack.createFunctionInitialization();
    //set the reference in the function initialization
    func_init.setInitialState(initState);
    Collection func_initVariables = func_init.getVariable();
    //the name of the function domain
    String dom_name = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 117:
      Logger.logDebug("variables: ");
      jj_consume_token(117);
      v = VariableTerm(localVar, true);
      jj_consume_token(IN);
      inDom = getDomainByID();
      //set the reference
      func_initVariables.add(v);
      //update variable features
      Utility.updateVariable(v, inDom);
      //if the variables are more then one the associated domains must be type-domains
      //this constraint seems silly, so it is commented
      /*
         if( getToken(1).image.equals(",") && (inDom instanceof ConcreteDomain))
               throw new ParseException("Error: When the function arity is greater than 1, the domains associated to the function variables must be type-domains."+
                                         "       At the initialization of the function "+ func_name +".\n");
		 */
      //update the name of the function domain
      dom_name = inDom.getName();
      Logger.logDebug("\u005ct\u005ct\u005ct" + v.getName() + " updated: D=" + v.getDomain().getName() + ", kind=" + v.getKind().toString());
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 118:
          ;
          break;
        default:
          jj_la1[18] = jj_gen;
          break label_11;
        }
        jj_consume_token(118);
        //check if the next variable is already used (look for it in the localVar HashMap)
        String nextVar = getToken(1).image;
        if (localVar.get(nextVar) != null) {if (true) throw new ParseException("Error: The variable " + nextVar + " cannot be used as parameter of the initialization of function " + func_name + ". It is already used.");}
        v = VariableTerm(localVar, true);
        jj_consume_token(IN);
        inDom = getDomainByID();
        //set the reference
        func_initVariables.add(v);
        //set the association
        //Xa_FuncInit_Var.add(v,func_init);
        //update variable features
        Utility.updateVariable(v, inDom);
        //if the variables are more then one the associated domains must be type-domains
        //this constraint seems silly, so it is commented
        /*
         if( inDom instanceof ConcreteDomain)
               throw new ParseException("Error: When the function arity is greter than 1, the domains related to the variables of a function initialization or definition  must be type-domains."+
                                         "       At the initialization of the function "+ func_name +".\n");
		 */
        //update the name of the function domain
        dom_name = dom_name.concat(",").concat(inDom.getName());
        Logger.logDebug("\u005ct\u005ct\u005ct" + v.getName() + " updated: D=" + v.getDomain().getName() + ", kind=" + v.getKind().toString());
      }
      jj_consume_token(119);
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
    jj_consume_token(EQ);
    Logger.logDebug("body:");
    body = Term(localVar, false, null);
    //set the reference
    func_init.setBody(body);
    Domain func_dom;
    if (func_initVariables.size() == 0) func_dom = null;
    else if (func_initVariables.size() == 1)
    {
      func_dom = (Domain) declared_Dom.get(dom_name);
      if (func_dom == null) func_dom = Utility.getBasicDomain(domainsFactory, dom_name);
      if (func_dom == null) func_dom = Utility.getPredefinedAbstractDomain(domainsFactory, dom_name);
      if (func_dom == null) func_dom = Utility.getStructuredDomain(domainsFactory, dom_name, header.getSignature());
      if (func_dom == null) {if (true) throw new ParseException("Error: The domain" + dom_name + " has not been declared. There not exists a function with this domain.");}
    }
    else
    {
      dom_name = "Prod(".concat(dom_name).concat(")");
      func_dom = (Domain) Utility.getStructuredDomain(domainsFactory, dom_name, header.getSignature());
      if (func_dom == null) {if (true) throw new ParseException("Error: The domain" + dom_name + " has not been declared. There not exists a function with this domain.");}
    }
    //check if the function has been declared
    /// attenzione non trova le funzioni importate !!!!
    Function f = Utility.getFunction(func_name, func_dom, false, new HashMap(), declared_Func);
    if (f == null) {if (true) throw new ParseException("Error: The function " + func_name + "(" + dom_name + ")" + " has not been declared. It cannot be initialized");}
    if (!(f instanceof DynamicFunction)) {if (true) throw new ParseException("Error: The function " + func_name + "(" + dom_name + ")" + " is not a dynamic function. It cannot be initialized");}
    //set the reference to the function to initialize
    func_init.setInitializedFunction((DynamicFunction) f);
    ((DynamicFunction) f).getInitialization().add(func_init);
    //create the association
    //XX AInitializationInitializedFunction a_FuncInit_Func = structurePack.getAInitializationInitializedFunction();
    //XX a_FuncInit_Func.add(func_init,((DynamicFunction)f));
    // ocl constraint 1 and 2 are granted for construction
    // check ocl constraint 3
    //if(!OCL_Checker.body_ok(f,body))
    //      throw new ParseException(OCL_Checker.getMsgErr()+"\n       At the initialization of the function "+ func_name +"("+dom_name+")"+".");
    //
    if (!OCL_Checker.checkFunctionInitialization(func_init)) {if (true) throw new ParseException(OCL_Checker.getMsgErr() + "\u005cn       At the initialization of the function " + func_name + "(" + dom_name + ")" + ".");}
    {if (true) return func_init;}
    throw new Error("Missing return statement in function");
  }

  final public AgentInitialization AgentInitialization(Initialization initState) throws ParseException {
  Domain dom;
  String id_dom;
  MacroCallRule r;
  HashMap localVar = new HashMap();
    jj_consume_token(AGENT);
    Logger.logDebug("\u005ctAgent initialization begins");
    id_dom = ID_DOMAIN();
    jj_consume_token(120);
    Logger.logDebug("\u005ctagent domain: " + id_dom);
    dom = (Domain) declared_Dom.get(id_dom);
    if (dom == null) dom = Utility.getPredefinedAbstractDomain(domainsFactory, id_dom);
    if (dom == null) {if (true) throw new ParseException("Error: The domain " + id_dom + " has not been declared. Invariant declaration failed ");}
    AgentInitialization agent_init = structurePack.createAgentInitialization();
    agent_init.setInitialState(initState);
    agent_init.setDomain(dom);
    r = MacroCallRule(localVar, null);
    //set the reference
    agent_init.setProgram(r);
    //check OCL constraints
    if (!OCL_Checker.checkAgentInitialization(agent_init)) {if (true) throw new ParseException(OCL_Checker.getMsgErr() + "\u005cn       At the initialization of the agent set " + id_dom + ".");}
    Logger.logDebug("\u005ctagent initialization ends");
    {if (true) return agent_init;}
    throw new Error("Missing return statement in function");
  }

//----------------------------BODY----------------------------//
  final public Body Body(Asm m) throws ParseException {
  DomainDefinition d_def;
  FunctionDefinition f_def;
  RuleDeclaration r_decl;
  Property p;
  FairnessConstraint fc;
  InvarConstraint ic;
    jj_consume_token(DEFINITIONS);
    jj_consume_token(120);
    Logger.logDebug("definitions:");
    Body body = structurePack.createBody();
    Collection < DomainDefinition > dom_definitions = body.getDomainDefinition();
    Collection < FunctionDefinition > func_definitions = body.getFunctionDefinition();
    Collection < RuleDeclaration > rule_declarations = body.getRuleDeclaration();
    //Collection invariants = body.getInvariant();
    //Collection ctlSpecs = body.getCtlSpec();
    //Collection ltlSpecs = body.getLtlSpec();
    Collection < Property > properties = body.getProperty();
    Collection < FairnessConstraint > fairnessConstraints = body.getFairnessConstraint();
    Collection < InvarConstraint > invarConstraints = body.getInvariantConstraint();
    ExportClause expClause = header.getExportClause();
    Collection < RuleDeclaration > expRules = null;
    if (expClause != null)
    expRules = expClause.getExportedRule();
    label_12:
    while (true) {
      if (jj_2_4(2)) {
        ;
      } else {
        break label_12;
      }
      d_def = DomainDefinition();
      dom_definitions.add(d_def);
      //set the association
      //XX a_Body_DomDef.add(body,d_def);

    }
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FUNCTION:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_13;
      }
      f_def = FunctionDefinition(m);
      func_definitions.add(f_def);
      //set the association
      //XX a_Body_FuncDef.add(f_def,body);

    }
    //the rule declarations imported are added to declared rules
    for (ImportClause impClause : header.getImportClause())
    {
      for (RuleDeclaration r_d : impClause.getImportedRule())
      {
        String rule_name = rule_name = r_d.getName();
        //check if the rule has already been declared
        List < RuleDeclaration > r_list = declared_Rules.get(rule_name);
        if (r_list == null)
        {
          List < RuleDeclaration > newList = new ArrayList < RuleDeclaration > (Collections.singletonList(r_d));
          declared_Rules.put(rule_name, newList);
        }
        else
        {
          // add this rule in any case
          r_list.add(r_d);
        }
        //check if the rule can be exported
        //Remark: the HashMap exported_Rules is initialized within the ExportClause method so if exported_Rules!=null => expClause!=null
        if (((exported_Rules != null) && exported_Rules.containsKey(new Integer(rule_name.hashCode()))) || exportAll)
        {
          expRules.add(r_d);
        }
        //check if the rule is the program associated to an agent in an AgentInitialization
        /*for (AgentInitialization a_init: programs.get(rule_name)){
                     //set the reference
                     // TODO
                     // MODIFICARE !!!! setNamedProgram --> a_init.setProgram((MacroDeclaration)r_decl);
                     //create the association
                     //X AAgentNamedProg.add(a_init,r_decl);
               }*/
      }
    }
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RULE:
      case MACRO:
      case TURBO:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_14;
      }
      /*LOOKAHEAD(2)*/
          r_decl = RuleDeclaration();
      String rule_name = r_decl.getName();
      //check if the rule has already been declared
      if (Utility.searchRuleByName(declared_Rules, rule_name, r_decl.getVariable()) == null)
      {
        rule_declarations.add(r_decl);
        //create the association
        //XX a_Body_Rule.add(body,r_decl);
        //insert the rule in the table of declared rules
        // create a new list of rules
        if (!declared_Rules.containsKey(rule_name))
        {
          List < RuleDeclaration > newList = new ArrayList < RuleDeclaration > (Collections.singletonList(r_decl));
          declared_Rules.put(rule_name, newList);
        }
        else
        {
          declared_Rules.get(rule_name).add(r_decl);
        }
      }
      else
      {
        Logger.logDebug("\u005ctrule alredy declared");
        {if (true) throw new ParseException("Error: The rule " + rule_name + " has been declared twice with the same parameters.");}
      }
      //check if the rule can be exported
      //Remark: the HashMap exported_Rules is initialized within the ExportClause method so if exported_Rules!=null => expClause!=null
      if (((exported_Rules != null) && exported_Rules.containsKey(new Integer(rule_name.hashCode()))) || exportAll)
      {
        expRules.add(r_decl);
        //create the association
        //XX AExpClRule.add(expClause,r_decl);
      }
      //check if the rule is the program associated to an agent in an AgentInitialization
      /* r_list = (LinkedList)programs.get(rule_name);
            if(r_list!=null)
            {  iter_r_list = r_list.listIterator(r_list.size());
               while(iter_r_list.hasNext())
               {  a_init = (AgentInitialization)iter_r_list.next();
                  //set the reference
                  // MODIFICARE AG TODO a_init.setNamedProgram((MacroDeclaration)r_decl);
               }
            }*/

    }
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INVAR:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_15;
      }
      ic = InvarConstraint(m);
        invarConstraints.add(ic);
    }
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case JUSTICE:
      case COMPASSION:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_16;
      }
      fc = FairnessConstraint(m);
      fairnessConstraints.add(fc);
    }
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INVARIANT:
      case CTLSPEC:
      case LTLSPEC:
        ;
        break;
      default:
        jj_la1[24] = jj_gen;
        break label_17;
      }
      p = Property(m);
      String name = p.getName();
      if(name != null)
      {
          if(p instanceof CtlSpec) {
                for(Property p2: properties) {
                        if(p2 instanceof CtlSpec && p2.getName() != null && p2.getName().equals(name)) {
                          {if (true) throw new ParseException("Two CTL specifications can not have the same name.");}
                        }
                      }
                   }
                   if(p instanceof LtlSpec) {
                for(Property p2: properties) {
                        if(p2 instanceof LtlSpec && p2.getName() != null && p2.getName().equals(name)) {
                          {if (true) throw new ParseException("Two LTL specifications can not have the same name.");}
                        }
                      }
                   }
                }
                properties.add(p);
    }
    {if (true) return body;}
    throw new Error("Missing return statement in function");
  }

  final public DomainDefinition DomainDefinition() throws ParseException {
  String name;
  Term body;
  HashMap localVar = new HashMap();
    jj_consume_token(DOMAIN);
    name = ID_DOMAIN();
    jj_consume_token(EQ);
    Logger.logDebug("domain " + name);
    Logger.logDebug("body:");
    body = Term(localVar, false, null);
    Domain dom = declared_Dom.get(name);
    //check if the domain has been declared
    if (dom == null) {if (true) throw new ParseException("Error: The domain " + name + " has not been declared. It cannot be defined.\u005cn");}
    //check if the domain is a concrete-domain
    if (!(dom instanceof ConcreteDomain)) {if (true) throw new ParseException("Error: The domain " + name + " is not a concrete-domain. It cannot be defined.\u005cn");}
    //check if the domain has already been defined
    if (((ConcreteDomain) dom).getDefinition() != null) {if (true) throw new ParseException("Error: The domain " + name + " has been defined twice.");}
    //create the object
    DomainDefinition dom_def = structurePack.createDomainDefinition();
    //set the reference to the defined domain
    dom_def.setDefinedDomain(((ConcreteDomain) dom));
    ((ConcreteDomain) dom).setDefinition(dom_def);
    //create the association
    //X ADefinitionDefinedDomain ADefDom = structurePack.getADefinitionDefinedDomain();
    //X ADefDom.add(dom_def,((ConcreteDomain)dom));
    //set the reference to the body
    dom_def.setBody(body);
    //create the association
    //X ADomainDefinitionBody ADefbody = structurePack.getADomainDefinitionBody();
    //X ADefbody.add(dom_def,body);
    //check ocl constraints
    if (!OCL_Checker.checkDomainDefinition(dom_def)) {if (true) throw new ParseException(OCL_Checker.getMsgErr() + "\u005cn       At the definition of the " + (((ConcreteDomain) dom).getIsDynamic() ? "dynamic" : "static") + " domain " + dom.getName() + ".\u005cn");}
    {if (true) return dom_def;}
    throw new Error("Missing return statement in function");
  }

  final public FunctionDefinition FunctionDefinition(Asm m) throws ParseException {
  Term body;
  String func_name;
  VariableTerm v;
  Domain inDom;
  HashMap < String, VariableTerm > localVar = new HashMap < String, VariableTerm > ();
    jj_consume_token(FUNCTION);
    func_name = ID_FUNCTION();
    Logger.logDebug("function " + func_name);
    //create the object
    FunctionDefinition func_def = structurePack.createFunctionDefinition();
    List < VariableTerm > variables = func_def.getVariable();
    //the name of the function domain
    String dom_name = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 117:
      Logger.logDebug("variables: ");
      jj_consume_token(117);
      v = VariableTerm(localVar, true);
      jj_consume_token(IN);
      inDom = getDomainByID();
      //set the reference
      variables.add(v);
      //update variable features
      Utility.updateVariable(v, inDom);
      //update the name of the function domain
      dom_name = inDom.getName();
      Logger.logDebug("\u005ct\u005ct\u005ct" + v.getName() + " updated: TD=" + v.getDomain().getName() + ", kind=" + v.getKind().toString());
      label_18:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 118:
          ;
          break;
        default:
          jj_la1[25] = jj_gen;
          break label_18;
        }
        jj_consume_token(118);
        //check if the next variable is already used (look for it in the localVar HashMap)
        String nextVar = getToken(1).image;
        if (localVar.get(nextVar) != null) {if (true) throw new ParseException("Error: The variable " + nextVar + " cannot be used as parameter of the definition of function " + func_name + ". It is already used.");}
        v = VariableTerm(localVar, true);
        jj_consume_token(IN);
        inDom = getDomainByID();
        //set the reference
        variables.add(v);
        //update variable features
        Utility.updateVariable(v, inDom);
        //update the name of the function domain
        dom_name = dom_name.concat(",").concat(inDom.getName());
        Logger.logDebug("\u005ct\u005ct\u005ct" + v.getName() + " updated: TD=" + v.getDomain().getName() + ", kind=" + v.getKind().toString());
      }
      jj_consume_token(119);
      break;
    default:
      jj_la1[26] = jj_gen;
      ;
    }
    jj_consume_token(EQ);
    Logger.logDebug("body:");
    body = Term(localVar, false, null);
    //set the reference
    func_def.setBody(body);
    Domain func_dom;
    if (variables.size() == 0) func_dom = null;
    else if (variables.size() == 1)
    {
      func_dom = (Domain) declared_Dom.get(dom_name);
      if (func_dom == null) func_dom = Utility.getBasicDomain(domainsFactory, dom_name);
      if (func_dom == null) func_dom = Utility.getPredefinedAbstractDomain(domainsFactory, dom_name);
      if (func_dom == null) func_dom = Utility.getStructuredDomain(domainsFactory, dom_name, header.getSignature());
      if (func_dom == null) {if (true) throw new ParseException("Error: The domain" + dom_name + " has not been declared. There not exists a function with this domain.\u005cn");}
    }
    else
    {
      dom_name = "Prod(".concat(dom_name).concat(")");
      func_dom = Utility.getStructuredDomain(domainsFactory, dom_name, header.getSignature());
      if (func_dom == null) {if (true) throw new ParseException("Error: The domain" + dom_name + " has not been declared. There not exists a function with this domain.\u005cn");}
    }
    //check if the function has been declared
    Function f = Utility.getFunction(func_name, func_dom, false, new HashMap < String, Domain > (), declared_Func);
    if (f == null) {if (true) throw new ParseException("Error: The function " + func_name + "(" + dom_name + ")" + " has not been declared. It cannot be defined!\u005cn");}
    //check if the function has already been defined
    if (f.getDefinition() != null) {if (true) throw new ParseException("Error: The function " + func_name + "(" + dom_name + ")" + " has been defined twice.\u005cn");}
    //set the reference to the function to define
    func_def.setDefinedFunction(f);
    f.setDefinition(func_def);
    //create the association
    //X ADefinitionDefinedFunction a_FuncDef_Func = structurePack.getADefinitionDefinedFunction();
    //X a_FuncDef_Func.add(f,func_def);
    //check ocl constraint 1
    if (!((f instanceof StaticFunction) || (f instanceof DerivedFunction))) {if (true) throw new ParseException("Error: Only static and derived functions can be defined.\u005cn" + "       At the definition of the function " + func_name + "(" + dom_name + ")" + ".\u005cn");}
    if (!OCL_Checker.checkFunctionDefinition(func_def)) {if (true) throw new ParseException(OCL_Checker.getMsgErr() + "\u005cn       At the definition of the function " + func_name + "(" + dom_name + ")" + ".\u005cn");}
    {if (true) return func_def;}
    throw new Error("Missing return statement in function");
  }

  final public RuleDeclaration RuleDeclaration() throws ParseException {
  RuleDeclaration result;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RULE:
    case MACRO:
      result = MacroDeclaration();
      break;
    case TURBO:
      result = TurboDeclaration();
      break;
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public MacroDeclaration MacroDeclaration() throws ParseException {
  Logger.logDebug("macro rule");
  MacroDeclaration ruleDecl = rulesPack.getBasicTransitionRules().createMacroDeclaration();
  String ruleName;
  List < VariableTerm > vars;
  Rule body;
  int arity = 0;
  HashMap < String, VariableTerm > localVar = new HashMap < String, VariableTerm > ();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MACRO:
      jj_consume_token(MACRO);
      break;
    default:
      jj_la1[28] = jj_gen;
      ;
    }
    jj_consume_token(RULE);
    ruleName = ID_RULE();
    Logger.logDebug("\u005ct" + ruleName);
    ruleDecl.setName(ruleName);
    List < VariableTerm > variables = ruleDecl.getVariable();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 117:
      Logger.logDebug("variables: ");
      VariableTerm v;
      Domain inDom;
      jj_consume_token(117);
      v = VariableTerm(localVar, true);
      jj_consume_token(IN);
      inDom = getDomainByID();
      //add it to the list
      variables.add(v);
      //create the association
      //X ARuleDeclarationVariable ARuleDeclVar = defPack.getARuleDeclarationVariable();
      //X ARuleDeclVar.add(v,ruleDecl);
      //update variable features
      Utility.updateVariable(v, inDom);
      //update the arity value
      arity++;
      Logger.logDebug("\u005ct\u005ct\u005ct" + v.getName() + " updated: TD=" + v.getDomain().getName() + ", kind=" + v.getKind().toString());
      label_19:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 118:
          ;
          break;
        default:
          jj_la1[29] = jj_gen;
          break label_19;
        }
        jj_consume_token(118);
        //check if the next variable is already used (look for it in the localVar HashMap)
        String nextVar = getToken(1).image;
        if (localVar.get(nextVar) != null) {if (true) throw new ParseException("Error: The variable " + nextVar + " cannot be used because it is already used.");}
        v = VariableTerm(localVar, true);
        jj_consume_token(IN);
        inDom = getDomainByID();
        //add it to the list
        variables.add(v);
        //create the association
        //X ARuleDeclVar.add(v,ruleDecl);
        //set the variable type-domain
        Utility.updateVariable(v, inDom);
        //(OCL constraint 2) set variable kind
        //if(inDom instanceof RuleDomain)
        //   v.setKind(VariableKind.forName("ruleVar"));
        //update the arity value
        arity++;
        Logger.logDebug("\u005ct\u005ct\u005ct" + v.getName() + " updated: TD=" + v.getDomain().getName() + ", kind=" + v.getKind().toString());
      }
      jj_consume_token(119);
      break;
    default:
      jj_la1[30] = jj_gen;
      ;
    }
    jj_consume_token(EQ);
    // add this rule to the declared rules
    Logger.logDebug("body:");
    body = Rule(localVar, ruleDecl);
    //set the reference
    ruleDecl.setRuleBody(body);
    ruleDecl.setArity(arity);
    //constraint 1 is granted for construction
    {if (true) return ruleDecl;}
    throw new Error("Missing return statement in function");
  }

  final public TurboDeclaration TurboDeclaration() throws ParseException {
  Logger.logDebug("turbo rule \u005cn");
  TurboDeclaration ruleDecl = rulesPack.getTurboTransitionRules().createTurboDeclaration();
  String ruleName;
  List < VariableTerm > vars;
  Rule body;
  int arity = 0;
  Domain inDom;
  HashMap < String, VariableTerm > localVar = new HashMap < String, VariableTerm > ();
    jj_consume_token(TURBO);
    jj_consume_token(RULE);
    ruleName = ID_RULE();
    ruleDecl.setName(ruleName);
    Logger.logDebug("\u005ct" + ruleName);
    List variables = ruleDecl.getVariable();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 117:
      Logger.logDebug("variables: ");
      VariableTerm v;
      jj_consume_token(117);
      v = VariableTerm(localVar, true);
      jj_consume_token(IN);
      inDom = getDomainByID();
      //add it to the list
      variables.add(v);
      //create the association
      //X ARuleDeclarationVariable ARuleDeclVar = defPack.getARuleDeclarationVariable();
      //X ARuleDeclVar.add(v,ruleDecl);
      //update variable features
      Utility.updateVariable(v, inDom);
      //update the arity value
      arity++;
      Logger.logDebug("\u005ct\u005ct\u005ct" + v.getName() + " updated: TD=" + v.getDomain().getName() + ", kind=" + v.getKind().toString());
      label_20:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 118:
          ;
          break;
        default:
          jj_la1[31] = jj_gen;
          break label_20;
        }
        jj_consume_token(118);
        //check if the next variable is already used (look for it in the localVar HashMap)
        String nextVar = getToken(1).image;
        if (localVar.get(nextVar) != null) {if (true) throw new ParseException("Error: The variable " + nextVar + " cannot be used because it is already used.");}
        v = VariableTerm(localVar, true);
        jj_consume_token(IN);
        inDom = getDomainByID();
        //add it to the list
        variables.add(v);
        //create the association
        //X ARuleDeclVar.add(v,ruleDecl);
        //set the variable type-domain
        Utility.updateVariable(v, inDom);
        //(OCL constraint 2) set variable kind
        //if(inDom instanceof RuleDomain)
        //v.setKind(VariableKind.forName("ruleVar"));
        //update the arity value
        arity++;
        Logger.logDebug("\u005ct\u005ct\u005ct" + v.getName() + " updated: TD=" + v.getDomain().getName() + ", kind=" + v.getKind().toString());
      }
      jj_consume_token(119);
      break;
    default:
      jj_la1[32] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IN:
      jj_consume_token(IN);
      inDom = getDomainByID();
      Logger.logDebug("\u005ct\u005ct\u005ctReturn type: " + inDom.getName());
      ruleDecl.setResultType(inDom);
      Logger.logDebug("=");
      break;
    default:
      jj_la1[33] = jj_gen;
      ;
    }
    jj_consume_token(EQ);
    Logger.logDebug("body:");
    body = Rule(localVar, ruleDecl);
    //set the reference
    ruleDecl.setRuleBody(body);
    ruleDecl.setArity(arity);
    //constraint 1 is granted for construction
    {if (true) return ruleDecl;}
    throw new Error("Missing return statement in function");
  }

  final public Property Property(Asm m) throws ParseException {
  Property p;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INVARIANT:
      p = Invariant(m);
      break;
    case CTLSPEC:
    case LTLSPEC:
      p = TemporalProperty(m);
      break;
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

  final public TemporalProperty TemporalProperty(Asm m) throws ParseException {
  TemporalProperty tp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CTLSPEC:
      tp = CtlSpec(m);
      break;
    case LTLSPEC:
      tp = LtlSpec(m);
      break;
    default:
      jj_la1[35] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return tp;}
    throw new Error("Missing return statement in function");
  }

  final public Invariant Invariant(Asm m) throws ParseException {
  String idElement;
  Term exp;
  HashMap localVar = new HashMap();
  boolean funHasArg = false;
  String name = "";
    jj_consume_token(INVARIANT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID_AXIOM:
      name = ID_AXIOM();
      break;
    default:
      jj_la1[36] = jj_gen;
      ;
    }
    jj_consume_token(OVER);
    Logger.logDebug("invariant " + name + "over ");
    Invariant invariant = defPack.createInvariant();
    invariant.setName(name);
    //XX AConstraintConstrainedDomain AAxiomDom = defPack.getAConstraintConstrainedDomain();
    //XX AConstraintConstrainedFunction AAxiomFunc = defPack.getAConstraintConstrainedFunction();
    //XX AConstraintConstrainedRule AAxiomRule = defPack.getAConstraintConstrainedRule();
    Collection domains = invariant.getConstrainedDomain();
    Collection functions = invariant.getConstrainedFunction();
    Collection rules = invariant.getConstrainedRule();
    Domain dom = null;
    Function func = null;
    RuleDeclaration rule;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID_DOMAIN:
      idElement = ID_DOMAIN();
      dom = (Domain) declared_Dom.get(idElement);
      if (dom == null) dom = Utility.getBasicDomain(domainsFactory, idElement);
      if (dom == null) dom = Utility.getPredefinedAbstractDomain(domainsFactory, idElement);
      if (dom == null) dom = Utility.getStructuredDomain(domainsFactory, idElement, header.getSignature());
      if (dom == null) {if (true) throw new ParseException("Error: The domain " + idElement + " has not been declared. Invariant declaration failed ");}
      domains.add(dom);
      dom.getConstraint().add(invariant);
      //create the association
      //XX AAxiomDom.add(dom,invariant);
      dom = null;
      Logger.logDebug(idElement);
      break;
    case ID_FUNCTION:
      idElement = ID_FUNCTION();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 117:
        jj_consume_token(117);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PROD:
        case SEQ:
        case POWERSET:
        case BAG:
        case MAP:
        case RULEDOM:
        case ID_DOMAIN:
          dom = getDomainByID();
          break;
        default:
          jj_la1[37] = jj_gen;
          ;
        }
        jj_consume_token(119);
        funHasArg = true;
        break;
      default:
        jj_la1[38] = jj_gen;
        ;
      }
      if (!funHasArg)
      {
        LinkedList f_list = (LinkedList) declared_Func.get(idElement);
        if (f_list == null) {if (true) throw new ParseException("Error: The function " + idElement + " has not been declared. Invariant declaration failed.");}
        else if (f_list.size() == 1) func = (Function) f_list.getFirst();
        else {if (true) throw new ParseException("Error: The function " + idElement + " is overloaded. Specify its domain in the invariant declaration.");}
      }
      else
      {
        func = Utility.getFunction(idElement, dom, false, new HashMap(), declared_Func);
        if (func == null) {if (true) throw new ParseException("Error: The function " + idElement + "(" + dom.getName() + ") has not been declared. Invariant declaration failed ");}
      }
      functions.add(func);
      func.getConstraint().add(invariant);
      //create the association
      //XX AAxiomFunc.add(func,invariant);
      Logger.logDebug(idElement);
      if (func.getDomain() != null) Logger.logDebug("(" + func.getDomain().getName() + ")");
      funHasArg = false;
      break;
    case ID_RULE:
      idElement = ID_RULE();
      rule = Utility.getRuleByNameDom(declared_Rules, idElement, null);
      rules.add(rule);
      rule.getConstraint().add(invariant);
      Logger.logDebug(idElement);
      break;
    default:
      jj_la1[39] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_21:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 118:
        ;
        break;
      default:
        jj_la1[40] = jj_gen;
        break label_21;
      }
      jj_consume_token(118);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID_DOMAIN:
        idElement = ID_DOMAIN();
        dom = (Domain) declared_Dom.get(idElement);
        if (dom == null) dom = Utility.getBasicDomain(domainsFactory, idElement);
        if (dom == null) dom = Utility.getPredefinedAbstractDomain(domainsFactory, idElement);
        if (dom == null) dom = Utility.getStructuredDomain(domainsFactory, idElement, header.getSignature());
        if (dom == null) {if (true) throw new ParseException("Error: The domain " + idElement + " has not been declared. Invariant declaration failed ");}
        domains.add(dom);
        dom.getConstraint().add(invariant);
        //create the association
        //XX AAxiomDom.add(dom,invariant);
        dom = null;
        Logger.logDebug("," + idElement);
        break;
      case ID_FUNCTION:
        idElement = ID_FUNCTION();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 117:
          jj_consume_token(117);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PROD:
          case SEQ:
          case POWERSET:
          case BAG:
          case MAP:
          case RULEDOM:
          case ID_DOMAIN:
            dom = getDomainByID();
            break;
          default:
            jj_la1[41] = jj_gen;
            ;
          }
          jj_consume_token(119);
          break;
        default:
          jj_la1[42] = jj_gen;
          ;
        }
        if (!funHasArg)
        {
          LinkedList f_list = (LinkedList) declared_Func.get(idElement);
          if (f_list == null) {if (true) throw new ParseException("Error: The function " + idElement + " has not been declared. Invariant declaration failed ");}
          else if (f_list.size() == 1) func = (Function) f_list.getFirst();
          else {if (true) throw new ParseException("Error: The function " + idElement + " is overloaded. Specify its domain in the invariant declaration. ");}
        }
        else
        {
          func = Utility.getFunction(idElement, dom, false, new HashMap(), declared_Func);
          if (func == null) {if (true) throw new ParseException("Error: The function " + idElement + "(" + dom.getName() + ") has not been declared. Invariant declaration failed ");}
        }
        functions.add(func);
        func.getConstraint().add(invariant);
        //create the association
        //XX AAxiomFunc.add(func,invariant);
        Logger.logDebug("," + idElement);
        if (func.getDomain() != null) Logger.logDebug("(" + func.getDomain().getName() + ")");
        funHasArg = false;
        break;
      case ID_RULE:
        idElement = ID_RULE();
        rule = Utility.getRuleByNameDom(declared_Rules, idElement, null);
        rules.add(rule);
        rule.getConstraint().add(invariant);
        //create the association
        //XX AAxiomRule.add(rule,invariant);
        Logger.logDebug("," + idElement);
        break;
      default:
        jj_la1[43] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(120);
    Logger.logDebug("body:");
    exp = Term(localVar, false, null);
    invariant.setBody(exp);
    //create the association
    //XX AAxiomBody AAxiomBody = defPack.getAAxiomBody();
    //XX AAxiomBody.add(invariant,exp);
    //ocl constraint 1 is granted for construction
    //check ocl constraint 2
    //PA 30/12/2010 poiche' abbiamo introdotto gli operatori temporali come
    //funzioni con codominio Boolean, qui bisognerebbe anche controllare
    //che all'interno di exp non sia stata utilizzata una funzione della
    //CTLlibrary o della LTLlibrary
    if (!OCL_Checker.isBoolean(exp))
    {
      Logger.logErr("Error: The expression specifying an invariant must be a term whose associated type-domain is Boolean.");
      //PA 2 feb 2011: aggiunta ParseException  
      {if (true) throw new ParseException("Error: The expression specifying an invariant must be a term whose associated type-domain is Boolean.");}
    }
    {if (true) return invariant;}
    throw new Error("Missing return statement in function");
  }

//PA 19/05/2014 in order to add the CTLSPEC, LTLSPEC, FAIRNESS, JUSTICE, COMPASSION, and INVAR keywords: START
  final public CtlSpec CtlSpec(Asm m) throws ParseException {
  Term exp;
  HashMap localVar = new HashMap();
  String name = null;
    jj_consume_token(CTLSPEC);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID_CTL:
      name = ID_CTL();
      jj_consume_token(120);
      break;
    default:
      jj_la1[44] = jj_gen;
      ;
    }
    Logger.logDebug("CTLSPEC");
    CtlSpec ctlSpec = defPack.createCtlSpec();
    if (name != null)
    {
      ctlSpec.setName(name);
    }
    Logger.logDebug("body:");
    exp = Term(localVar, false, null);
    ctlSpec.setBody(exp);
    //PA 30/12/2010 qui bisognerebbe anche controllare che all'interno
    //di exp non sia stata utilizzata una funzione della LTLlibrary
    if (!OCL_Checker.isBoolean(exp))
    {
      Logger.logErr("Error: The expression specifying a CTL propery must be a term whose associated type-domain is Boolean.");
      {if (true) throw new ParseException("Error: The expression specifying a CTL propery must be a term whose associated type-domain is Boolean.");}
    }
    {if (true) return ctlSpec;}
    throw new Error("Missing return statement in function");
  }

  final public LtlSpec LtlSpec(Asm m) throws ParseException {
  Term exp;
  HashMap localVar = new HashMap();
  String name = null;
  Token t;
    jj_consume_token(LTLSPEC);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID_LTL:
      name = ID_LTL();
      jj_consume_token(120);
      break;
    default:
      jj_la1[45] = jj_gen;
      ;
    }
    Logger.logDebug("LTLSPEC");
    LtlSpec ltlSpec = defPack.createLtlSpec();
    if (name != null)
    {
      ltlSpec.setName(name);
    }
    Logger.logDebug("body:");
    exp = Term(localVar, false, null);
    ltlSpec.setBody(exp);
    //PA 30/12/2010 qui bisognerebbe anche controllare che all'interno
    //di exp non sia stata utilizzata una funzione della CTLlibrary
    if (!OCL_Checker.isBoolean(exp))
    {
      Logger.logErr("Error: The expression specifying an LTL property must be a term whose associated type-domain is Boolean.");
      {if (true) throw new ParseException("Error: The expression specifying an LTL property must be a term whose associated type-domain is Boolean.");}
    }
    {if (true) return ltlSpec;}
    throw new Error("Missing return statement in function");
  }

  final public FairnessConstraint FairnessConstraint(Asm m) throws ParseException {
  FairnessConstraint fc;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case JUSTICE:
      fc = JusticeConstraint(m);
      break;
    case COMPASSION:
      fc = CompassionConstraint(m);
      break;
    default:
      jj_la1[46] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   {if (true) return fc;}
    throw new Error("Missing return statement in function");
  }

  final public JusticeConstraint JusticeConstraint(Asm m) throws ParseException {
  Term exp;
  HashMap localVar = new HashMap();
  String name = null;
  Token t;
    jj_consume_token(JUSTICE);
    Logger.logDebug("JUSTICE");
    JusticeConstraint justiceConstraint = defPack.createJusticeConstraint();
    Logger.logDebug("body:");
    exp = Term(localVar, false, null);
    justiceConstraint.setBody(exp);
    if (!OCL_Checker.isBoolean(exp))
    {
      Logger.logErr("Error: The expression specifying a JUSTICE constraint must be a term whose associated type-domain is Boolean.");
      {if (true) throw new ParseException("Error: The expression specifying a JUSTICE constraint must be a term whose associated type-domain is Boolean.");}
    }
    {if (true) return justiceConstraint;}
    throw new Error("Missing return statement in function");
  }

  final public CompassionConstraint CompassionConstraint(Asm m) throws ParseException {
  Term p, q;
  HashMap localVar = new HashMap();
  String name = null;
  Token t;
    jj_consume_token(COMPASSION);
    Logger.logDebug("COMPASSION");
    CompassionConstraint compassionConstraint = defPack.createCompassionConstraint();
    jj_consume_token(117);
    Logger.logDebug("p:");
    p = Term(localVar, false, null);
    jj_consume_token(118);
    Logger.logDebug("q:");
    q = Term(localVar, false, null);
    compassionConstraint.setP(p);
    if (!OCL_Checker.isBoolean(p))
    {
      Logger.logErr("Error: The expression p specifying a COMPASSION constraint must be a term whose associated type-domain is Boolean.");
      {if (true) throw new ParseException("Error: The expression p specifying a COMPASSION constraint must be a term whose associated type-domain is Boolean.");}
    }
    compassionConstraint.setQ(q);
    if (!OCL_Checker.isBoolean(q))
    {
      Logger.logErr("Error: The expression q specifying a COMPASSION constraint must be a term whose associated type-domain is Boolean.");
      {if (true) throw new ParseException("Error: The expression q specifying a COMPASSION constraint must be a term whose associated type-domain is Boolean.");}
    }
    {if (true) return compassionConstraint;}
    throw new Error("Missing return statement in function");
  }

  final public InvarConstraint InvarConstraint(Asm m) throws ParseException {
  Term exp;
  HashMap localVar = new HashMap();
  String name = null;
  Token t;
    jj_consume_token(INVAR);
    Logger.logDebug("INVAR");
    InvarConstraint invarConstraint = defPack.createInvarConstraint();
    Logger.logDebug("body:");
    exp = Term(localVar, false, null);
    invarConstraint.setBody(exp);
    if (!OCL_Checker.isBoolean(exp))
    {
      Logger.logErr("Error: The expression specifying an INVAR constraint must be a term whose associated type-domain is Boolean.");
      {if (true) throw new ParseException("Error: The expression specifying an INVAR constraint must be a term whose associated type-domain is Boolean.");}
    }
    {if (true) return invarConstraint;}
    throw new Error("Missing return statement in function");
  }

//PA 19/05/2014 in order to add the CTLSPEC, LTLSPEC, FAIRNESS, JUSTICE, COMPASSION, and INVAR keywords: END
/*-----------------------------------------------------------*/
/**********************    DOMAIN    *************************/
/*-----------------------------------------------------------*/
  final public Domain Domain() throws ParseException {
  Domain d;
    if (jj_2_5(2)) {
      d = ConcreteDomain();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DYNAMIC:
      case ANYDOMAIN:
      case BASIC:
      case ABSTRACT:
      case ENUM:
      case PROD:
      case SEQ:
      case POWERSET:
      case BAG:
      case MAP:
      case RULEDOM:
        d = TypeDomain();
        break;
      default:
        jj_la1[47] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

/*----------------------  ConcreteDomain  --------------------*/
  final public ConcreteDomain ConcreteDomain() throws ParseException {
  String name;
  boolean isDynamic = false;
  Domain typeDom;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DYNAMIC:
      jj_consume_token(DYNAMIC);
      isDynamic = true;
      break;
    default:
      jj_la1[48] = jj_gen;
      ;
    }
    jj_consume_token(DOMAIN);
    name = ID_DOMAIN();
    jj_consume_token(SUBSETOF);
    typeDom = getDomainByID();
    if (!(typeDom instanceof TypeDomain))
    {
      {if (true) throw new ParseException("Error: A concrete domain cannot be defined over a concrete domain.");}
    }
    //create the object
    ConcreteDomain concreteDom = defPack.getDomains().createConcreteDomain();
    concreteDom.setName(name);
    concreteDom.setIsDynamic(isDynamic);
    //set references
    concreteDom.setTypeDomain((TypeDomain) typeDom);
    Logger.logDebug(isDynamic ? "dynamic" : "" + "domain " + name + " subsetof " + typeDom.getName());
    {if (true) return concreteDom;}
    throw new Error("Missing return statement in function");
  }

/*----------------------   TypeDomain  Ok! ----------------------*/
  final public TypeDomain TypeDomain() throws ParseException {
  TypeDomain d;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ANYDOMAIN:
      d = AnyDomain();
      break;
    case PROD:
    case SEQ:
    case POWERSET:
    case BAG:
    case MAP:
    case RULEDOM:
      d = StructuredTD();
      break;
    case ENUM:
      d = EnumTD();
      break;
    case DYNAMIC:
    case ABSTRACT:
      d = AbstractTD();
      break;
    case BASIC:
      d = BasicTD();
      break;
    default:
      jj_la1[49] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

/*---------------  AnyDomain  To be done! ------------------*/
  final public AnyDomain AnyDomain() throws ParseException {
  String name;
    jj_consume_token(ANYDOMAIN);
    name = ID_DOMAIN();
    AnyDomain d = Utility.getAnyDomain(domainsFactory, name);
    if (d == null)
    {
      // TODO
      // check name and in case
      // throw new ParseException("Error: The domain "+ name + " cannot be declared as an AnyDomain");
      d = domainsFactory.createAnyDomain(name);
    }
    Logger.logDebug("anydomain " + name);
    {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

/*---------------  BasicTD  OK! ------------------*/
  final public BasicTd BasicTD() throws ParseException {
  String name;
    jj_consume_token(BASIC);
    jj_consume_token(DOMAIN);
    name = ID_DOMAIN();
    BasicTd basicTd = Utility.getBasicDomain(domainsFactory, name);
    if (basicTd == null) {if (true) throw new ParseException("Error: A basic domain " + name + " not allowed has been declared.");}
    Logger.logDebug("basic domain " + name);
    {if (true) return basicTd;}
    throw new Error("Missing return statement in function");
  }

/*-------------  AbstractTD  OK! -----------------*/
  final public AbstractTd AbstractTD() throws ParseException {
  String name;
  boolean isDynamic = false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DYNAMIC:
      jj_consume_token(DYNAMIC);
      isDynamic = true;
      break;
    default:
      jj_la1[50] = jj_gen;
      ;
    }
    jj_consume_token(ABSTRACT);
    jj_consume_token(DOMAIN);
    name = ID_DOMAIN();
    // try predefined
    AbstractTd abstractTd = Utility.getPredefinedAbstractDomain(domainsFactory, name);
    // otherwise create new one
    if (abstractTd == null)
    {
      abstractTd = domainsFactory.createAbstractTd();
      abstractTd.setName(name);
      abstractTd.setIsDynamic(isDynamic);
      Logger.logDebug("creating abstract domain " + name);
    }
    else
    {
      Logger.logDebug("abstract domain " + name);
    }
    {if (true) return abstractTd;}
    throw new Error("Missing return statement in function");
  }

/*---------------  EnumTD  OK! -------------------*/
  final public EnumTd EnumTD() throws ParseException {
  String name;
  EnumElement elem;
    jj_consume_token(ENUM);
    jj_consume_token(DOMAIN);
    name = ID_DOMAIN();
    EnumTd enumTd = defPack.getDomains().createEnumTd();
    enumTd.setName(name);
    Collection elements = enumTd.getElement();
    Logger.logDebug("enum domain " + name);
    jj_consume_token(EQ);
    jj_consume_token(121);
    elem = EnumElement();
    //add the new element to the collection
    elements.add(elem);
    //create the association
    //XX AEnumTdElem.add(elem,enumTd);
    //insert it in the hashMap of enum elements
    String symbol = elem.getSymbol();
    if (enumElem.put(symbol, enumTd) != null)
    {
      {if (true) throw new ParseException("The enum symbol " + symbol + " is duplicate");}
    }
    Logger.logDebug("={" + symbol);
    label_22:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 122:
        ;
        break;
      default:
        jj_la1[51] = jj_gen;
        break label_22;
      }
      jj_consume_token(122);
      elem = EnumElement();
      //add new element to the collection
      elements.add(elem);
      //create the association
      //XX AEnumTdElem.add(elem,enumTd);
      //insert it in the hashMap of enum elements
      symbol = elem.getSymbol();
      if (enumElem.put(symbol, enumTd) != null)
      {
        {if (true) throw new ParseException("The enum symbol " + symbol + " is duplicate");}
      }
      Logger.logDebug("|" + symbol);
    }
    jj_consume_token(123);
    Logger.logDebug("}");
    {if (true) return enumTd;}
    throw new Error("Missing return statement in function");
  }

  final public EnumElement EnumElement() throws ParseException {
  String symbol;
    symbol = ID_ENUM();
    EnumElement elem = defPack.getDomains().createEnumElement();
    elem.setSymbol(symbol);
    {if (true) return elem;}
    throw new Error("Missing return statement in function");
  }

/*-------------  StructuredTD  OK! ---------------*/
  final public StructuredTd StructuredTD() throws ParseException {
  StructuredTd d;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RULEDOM:
      d = RuleDomain();
      break;
    case PROD:
      d = ProductDomain();
      break;
    case SEQ:
      d = SequenceDomain();
      break;
    case POWERSET:
      d = PowersetDomain();
      break;
    case BAG:
      d = BagDomain();
      break;
    case MAP:
      d = MapDomain();
      break;
    default:
      jj_la1[52] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  final public RuleDomain RuleDomain() throws ParseException {
  Domain dom;
    jj_consume_token(RULEDOM);
    List ruleElemList = new LinkedList();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 117:
      jj_consume_token(117);
      dom = getDomainByID();
      ruleElemList.add(dom);
      label_23:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 118:
          ;
          break;
        default:
          jj_la1[53] = jj_gen;
          break label_23;
        }
        jj_consume_token(118);
        dom = getDomainByID();
        ruleElemList.add(dom);
      }
      jj_consume_token(119);
      break;
    default:
      jj_la1[54] = jj_gen;
      ;
    }
    {if (true) return Utility.getRuleDomain(ruleElemList, defPack, header.getSignature());}
    throw new Error("Missing return statement in function");
  }

  final public ProductDomain ProductDomain() throws ParseException {
  Domain dom;
    jj_consume_token(PROD);
    List prodElemList = new LinkedList();
    jj_consume_token(117);
    dom = getDomainByID();
    //a StructuredTD can not be defined over a concrete domain  NO LONGER APPLIES!!!
    //if(!(dom instanceof TypeDomain))
    //   {   throw new ParseException("Error: A StructuredTD domain can not be defined over a concrete domain.");}
    //add a new element to the Domain list
    prodElemList.add(dom); //prodElemList.add((TypeDomain)dom);

    label_24:
    while (true) {
      jj_consume_token(118);
      dom = getDomainByID();
      //a StructuredTD can not be defined over a concrete domain  NO LONGER APPLIES!!!
      //if(!(dom instanceof TypeDomain))
      //   {   throw new ParseException("Error: A StructuredTD domain can not be defined over a concrete domain.");}
      //add a new element to the Domain list
      prodElemList.add(dom); //prodElemList.add((TypeDomain)dom);

      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 118:
        ;
        break;
      default:
        jj_la1[55] = jj_gen;
        break label_24;
      }
    }
    jj_consume_token(119);
    {if (true) return Utility.getProduct(prodElemList, defPack, header.getSignature());}
    throw new Error("Missing return statement in function");
  }

//OK!
  final public SequenceDomain SequenceDomain() throws ParseException {
  Domain dom;
    jj_consume_token(SEQ);
    jj_consume_token(117);
    dom = getDomainByID();
    jj_consume_token(119);
    //NO LONGER APPLIES!!!
    //a SeqTD can not be defined over a concrete domain
    //if(!(dom instanceof TypeDomain))
    //{   throw new ParseException("Error: A SequenceTD can not be defined over a concrete domain.");}
    {if (true) return Utility.getSequence(dom, defPack, header.getSignature());}
    throw new Error("Missing return statement in function");
  }

  final public PowersetDomain PowersetDomain() throws ParseException {
  Domain dom;
    jj_consume_token(POWERSET);
    jj_consume_token(117);
    dom = getDomainByID();
    jj_consume_token(119);
    //NO LONGER APPLIES!!!
    //a PowerTD can not be defined over a concrete domain
    // if(!(dom instanceof TypeDomain))
    //    {   throw new ParseException("Error: A PowerTD can not be defined over a concrete domain.");}
    {if (true) return Utility.getPowerset(dom, defPack, header.getSignature());}
    throw new Error("Missing return statement in function");
  }

  final public BagDomain BagDomain() throws ParseException {
  Domain dom;
    jj_consume_token(BAG);
    jj_consume_token(117);
    dom = getDomainByID();
    jj_consume_token(119);
    //NO LONGER APPLIES!!!
    //a BagTD can not be defined over a concrete domain
    //if(!(dom instanceof TypeDomain))
    //   {   throw new ParseException("Error: A BagTD domain can not be defined over a concrete domain.");}
    {if (true) return Utility.getBag(dom, defPack, header.getSignature());}
    throw new Error("Missing return statement in function");
  }

  final public MapDomain MapDomain() throws ParseException {
  Domain dom1, dom2;
    jj_consume_token(MAP);
    jj_consume_token(117);
    dom1 = getDomainByID();
    jj_consume_token(118);
    dom2 = getDomainByID();
    jj_consume_token(119);
    //NO LONGER APPLIES!!!
    //a MapTD domain can not be defined over a concrete domain
    //if(!(dom1 instanceof TypeDomain)||!(dom2 instanceof TypeDomain))
    //    {   throw new ParseException("Error: A MapTD domain can not be defined over a concrete domain.");}
    {if (true) return Utility.getMap(dom1, dom2, defPack, header.getSignature());}
    throw new Error("Missing return statement in function");
  }

//------------------------------------------------------------//
  final public Domain getDomainByID() throws ParseException {
  String domName;
  Domain domain;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID_DOMAIN:
      domName = ID_DOMAIN();
      domain = declared_Dom.get(domName);
      if (domain == null) domain = Utility.getPredefinedDomain(domainsFactory, domName);
      if (domain == null) {if (true) throw new ParseException("Error: " + domName + " domain is not declared.");}
      break;
    case PROD:
    case SEQ:
    case POWERSET:
    case BAG:
    case MAP:
    case RULEDOM:
      domain = StructuredTD();
      break;
    default:
      jj_la1[56] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return domain;}
    throw new Error("Missing return statement in function");
  }

//------------------------------------------------------------//
/*-----------------------------------------------------------*/
/**********************   FUNCTIONS   OK! ************************/
/*-----------------------------------------------------------*/
  final public Function Function() throws ParseException {
  Function func;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STATIC:
    case DYNAMIC:
    case MONITORED:
    case CONTROLLED:
    case SHARED:
    case OUT:
    case LOCAL:
      func = BasicFunction();
      break;
    case DERIVED:
      func = DerivedFunction();
      break;
    default:
      jj_la1[57] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return func;}
    throw new Error("Missing return statement in function");
  }

  final public BasicFunction BasicFunction() throws ParseException {
  BasicFunction func;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STATIC:
      func = StaticFunction();
      break;
    case DYNAMIC:
    case MONITORED:
    case CONTROLLED:
    case SHARED:
    case OUT:
    case LOCAL:
      func = DynamicFunction();
      break;
    default:
      jj_la1[58] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return func;}
    throw new Error("Missing return statement in function");
  }

  final public DerivedFunction DerivedFunction() throws ParseException {
  String funcName;
  Domain dom = null;
  Domain cod;
    jj_consume_token(DERIVED);
    funcName = ID_FUNCTION();
    jj_consume_token(120);
    DerivedFunction func = defPack.createDerivedFunction();
    func.setName(funcName);
    if (jj_2_6(2147483647)) {
      dom = getDomainByID();
      jj_consume_token(124);
      func.setDomain(dom);
    } else {
      ;
    }
    cod = getDomainByID();
    func.setCodomain(cod);
    //create the association
    //XX AFunctionCodomain AFuncCod =  defPack.getAFunctionCodomain();
    //XX AFuncCod.add(func,cod);
    int arity = OCL_Checker.evalArity(func);
    func.setArity(arity);
    Logger.logDebug("derived function " + funcName + ":" + ((dom != null) ? (dom.getName() + "->") : "") + cod.getName() + "\u005ct arity = " + arity);
    {if (true) return func;}
    throw new Error("Missing return statement in function");
  }

  final public StaticFunction StaticFunction() throws ParseException {
  String funcName;
  Domain dom = null;
  Domain cod;
    StaticFunction func = defPack.createStaticFunction();
    jj_consume_token(STATIC);
    funcName = ID_FUNCTION();
    jj_consume_token(120);
    func.setName(funcName);
    if (jj_2_7(2147483647)) {
      dom = getDomainByID();
      jj_consume_token(124);
      func.setDomain(dom);
    } else {
      ;
    }
    cod = getDomainByID();
    func.setCodomain(cod);
    int arity = OCL_Checker.evalArity(func);
    func.setArity(arity);
    Logger.logDebug("static function " + funcName + ":" + ((dom != null) ? (dom.getName() + "->") : "") + cod.getName() + "\u005ct arity = " + arity);
    {if (true) return func;}
    throw new Error("Missing return statement in function");
  }

//OK!
  final public DynamicFunction DynamicFunction() throws ParseException {
  DynamicFunction result;
    if (jj_2_8(2)) {
      result = OutFunction();
    } else if (jj_2_9(2)) {
      result = MonitoredFunction();
    } else if (jj_2_10(2)) {
      result = SharedFunction();
    } else if (jj_2_11(2)) {
      result = ControlledFunction();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DYNAMIC:
      case LOCAL:
        result = LocalFunction();
        break;
      default:
        jj_la1[59] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public LocalFunction LocalFunction() throws ParseException {
  String funcName;
  Domain dom = null;
  Domain cod;
    LocalFunction func = defPack.createLocalFunction();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DYNAMIC:
      jj_consume_token(DYNAMIC);
      break;
    default:
      jj_la1[60] = jj_gen;
      ;
    }
    jj_consume_token(LOCAL);
    funcName = ID_FUNCTION();
    jj_consume_token(120);
    func.setName(funcName);
    if (jj_2_12(2147483647)) {
      dom = getDomainByID();
      jj_consume_token(124);
      func.setDomain(dom);
      //create the association
      //XX AFunctionDomain AFuncDom =  defPack.getAFunctionDomain();
      //XX AFuncDom.add(func,dom);

    } else {
      ;
    }
    cod = getDomainByID();
    func.setCodomain(cod);
    //create the association
    //XX AFunctionCodomain AFuncCod =  defPack.getAFunctionCodomain();
    //XX AFuncCod.add(func,cod);
    int arity = OCL_Checker.evalArity(func);
    func.setArity(arity);
    Logger.logDebug("local function " + funcName + ":" + ((dom != null) ? (dom.getName() + "->") : "") + cod.getName() + "\u005ct arity = " + arity);
    {if (true) return func;}
    throw new Error("Missing return statement in function");
  }

  final public ControlledFunction ControlledFunction() throws ParseException {
  String funcName;
  Domain dom = null;
  Domain cod;
    ControlledFunction func = defPack.createControlledFunction();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DYNAMIC:
      jj_consume_token(DYNAMIC);
      break;
    default:
      jj_la1[61] = jj_gen;
      ;
    }
    jj_consume_token(CONTROLLED);
    funcName = ID_FUNCTION();
    jj_consume_token(120);
    func.setName(funcName);
    if (jj_2_13(2147483647)) {
      dom = getDomainByID();
      jj_consume_token(124);
      func.setDomain(dom);
      //create the association
      //XX  AFunctionDomain AFuncDom =  defPack.getAFunctionDomain();
      //XX AFuncDom.add(func,dom);

    } else {
      ;
    }
    cod = getDomainByID();
    func.setCodomain(cod);
    //create the association
    //XX  AFunctionCodomain AFuncCod =  defPack.getAFunctionCodomain();
    //XX AFuncCod.add(func,cod);
    int arity = OCL_Checker.evalArity(func);
    func.setArity(arity);
    Logger.logDebug("controlled function " + funcName + ":" + ((dom != null) ? (dom.getName() + "->") : "") + cod.getName() + "\u005ct arity = " + arity);
    {if (true) return func;}
    throw new Error("Missing return statement in function");
  }

  final public SharedFunction SharedFunction() throws ParseException {
  String funcName;
  Domain dom = null;
  Domain cod;
    SharedFunction func = defPack.createSharedFunction();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DYNAMIC:
      jj_consume_token(DYNAMIC);
      break;
    default:
      jj_la1[62] = jj_gen;
      ;
    }
    jj_consume_token(SHARED);
    funcName = ID_FUNCTION();
    jj_consume_token(120);
    func.setName(funcName);
    if (jj_2_14(2147483647)) {
      dom = getDomainByID();
      jj_consume_token(124);
      func.setDomain(dom);
      //create the association
      //XX AFunctionDomain AFuncDom =  defPack.getAFunctionDomain();
      //XX AFuncDom.add(func,dom);

    } else {
      ;
    }
    cod = getDomainByID();
    func.setCodomain(cod);
    //create the association
    //XX AFunctionCodomain AFuncCod =  defPack.getAFunctionCodomain();
    //XX AFuncCod.add(func,cod);
    int arity = OCL_Checker.evalArity(func);
    func.setArity(arity);
    Logger.logDebug("shared function " + funcName + ":" + ((dom != null) ? (dom.getName() + "->") : "") + cod.getName() + "\u005ct arity = " + arity);
    {if (true) return func;}
    throw new Error("Missing return statement in function");
  }

  final public MonitoredFunction MonitoredFunction() throws ParseException {
  String funcName;
  Domain dom = null;
  Domain cod;
    MonitoredFunction func = defPack.createMonitoredFunction();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DYNAMIC:
      jj_consume_token(DYNAMIC);
      break;
    default:
      jj_la1[63] = jj_gen;
      ;
    }
    jj_consume_token(MONITORED);
    funcName = ID_FUNCTION();
    jj_consume_token(120);
    func.setName(funcName);
    if (jj_2_15(2147483647)) {
      dom = getDomainByID();
      jj_consume_token(124);
      func.setDomain(dom);
      //create the association
      //XX AFunctionDomain AFuncDom =  defPack.getAFunctionDomain();
      //XX  AFuncDom.add(func,dom);

    } else {
      ;
    }
    cod = getDomainByID();
    func.setCodomain(cod);
    //create the association
    //XX AFunctionCodomain AFuncCod =  defPack.getAFunctionCodomain();
    //XX AFuncCod.add(func,cod);
    int arity = OCL_Checker.evalArity(func);
    func.setArity(arity);
    Logger.logDebug("monitored function " + funcName + ":" + ((dom != null) ? (dom.getName() + "->") : "") + cod.getName() + "\u005ct arity = " + arity);
    {if (true) return func;}
    throw new Error("Missing return statement in function");
  }

  final public OutFunction OutFunction() throws ParseException {
  String funcName;
  Domain dom = null;
  Domain cod;
    OutFunction func = defPack.createOutFunction();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DYNAMIC:
      jj_consume_token(DYNAMIC);
      break;
    default:
      jj_la1[64] = jj_gen;
      ;
    }
    jj_consume_token(OUT);
    funcName = ID_FUNCTION();
    jj_consume_token(120);
    func.setName(funcName);
    if (jj_2_16(2147483647)) {
      dom = getDomainByID();
      jj_consume_token(124);
      func.setDomain(dom);
      //create the association
      //XX  AFunctionDomain AFuncDom =  defPack.getAFunctionDomain();
      //XX AFuncDom.add(func,dom);

    } else {
      ;
    }
    cod = getDomainByID();
    func.setCodomain(cod);
    //create the association
    //XX AFunctionCodomain AFuncCod =  defPack.getAFunctionCodomain();
    //XX AFuncCod.add(func,cod);
    int arity = OCL_Checker.evalArity(func);
    func.setArity(arity);
    Logger.logDebug("out function " + funcName + ":" + ((dom != null) ? (dom.getName() + "->") : "") + cod.getName() + "\u005ct arity = " + arity);
    {if (true) return func;}
    throw new Error("Missing return statement in function");
  }

/*-----------------------------------------------------------*/
/************************   TERMs    ***************************/
/*-----------------------------------------------------------*/
  final public Term Term(HashMap localVar, boolean areAllowedNewVar, RuleDeclaration c) throws ParseException {
  Term t;
    t = TermForUpdateRule(localVar, areAllowedNewVar, c, null);
    {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Term TermForUpdateRule(HashMap localVar, boolean areAllowedNewVar, RuleDeclaration c, Domain expDom) throws ParseException {
  Term t;
    if (jj_2_17(2147483647)) {
      t = Expression(localVar, areAllowedNewVar);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PROD:
      case SEQ:
      case POWERSET:
      case BAG:
      case MAP:
      case RULEDOM:
      case IF:
      case SWITCH:
      case LET:
      case LT:
      case ID_DOMAIN:
      case 117:
      case 121:
      case 126:
      case 129:
        t = ExtendedTerm(localVar, areAllowedNewVar, c, expDom);
        break;
      default:
        jj_la1[65] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*    Expression   */
//IMPLIES
  final public Term Expression(HashMap localVar, boolean areAllowedNewVar) throws ParseException {
  Term t, arg1, arg2;
  Token tok;
    t = or_xorLogicExpr(localVar, areAllowedNewVar);
    label_25:
    while (true) {
      if (jj_2_18(1)) {
        ;
      } else {
        break label_25;
      }
      if (getToken(1).kind == ID_FUNCTION && getToken(1).image.equals("implies")) {
        tok = jj_consume_token(ID_FUNCTION);
        Logger.logDebug("\u005ctimplies\u005ct\u005ctoperator");
        arg2 = or_xorLogicExpr(localVar, areAllowedNewVar);
      } else if (getToken(1).kind == ID_FUNCTION && getToken(1).image.equals("iff")) {
        tok = jj_consume_token(ID_FUNCTION);
        Logger.logDebug("\u005ctiff\u005ct\u005ctoperator");
        arg2 = or_xorLogicExpr(localVar, areAllowedNewVar);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      arg1 = t;
      String funcName = Utility.getFunctionName(tok.image);
      TupleTerm tupleT = Utility.createPair(arg1, arg2, termsPack, defPack, header.getSignature());
      if ((t = Utility.createFunctionTerm(funcName, tupleT, termsPack, declared_Func, declared_Dom, defPack, header.getSignature())) == null) {if (true) throw new ParseException("");}
    }
    {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

// OR  //XOR
  final public Term or_xorLogicExpr(HashMap localVar, boolean areAllowedNewVar) throws ParseException {
  Term arg1, arg2;
  Token op;
    arg1 = andLogicExpr(localVar, areAllowedNewVar);
    label_26:
    while (true) {
      if (jj_2_19(1)) {
        ;
      } else {
        break label_26;
      }
      if (getToken(1).kind == ID_FUNCTION && getToken(1).image.equals("or")) {
        op = jj_consume_token(ID_FUNCTION);
        Logger.logDebug("\u005ctor\u005ct\u005ctoperator");
      } else if (getToken(1).kind == ID_FUNCTION && getToken(1).image.equals("xor")) {
        op = jj_consume_token(ID_FUNCTION);
        Logger.logDebug("\u005ctxor\u005ct\u005ctoperator");
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      arg2 = andLogicExpr(localVar, areAllowedNewVar);
      String funcName = Utility.getFunctionName(op.image);
      TupleTerm tupleT = Utility.createPair(arg1, arg2, termsPack, defPack, header.getSignature());
      arg1 = Utility.createFunctionTerm(funcName, tupleT, termsPack, declared_Func, declared_Dom, defPack, header.getSignature());
      if (arg1 == null) {if (true) throw new ParseException("");}
    }
    {if (true) return arg1;}
    throw new Error("Missing return statement in function");
  }

// AND
  final public Term andLogicExpr(HashMap localVar, boolean areAllowedNewVar) throws ParseException {
  Term t, arg1, arg2;
  Token tok;
    t = notLogicExpr(localVar, areAllowedNewVar);
    label_27:
    while (true) {
      if (getToken(1).kind == ID_FUNCTION && getToken(1).image.equals("and")) {
        ;
      } else {
        break label_27;
      }
      tok = jj_consume_token(ID_FUNCTION);
      Logger.logDebug("\u005ctand\u005ct\u005ctoperator");
      arg2 = notLogicExpr(localVar, areAllowedNewVar);
      arg1 = t;
      String funcName = Utility.getFunctionName(tok.image);
      TupleTerm tupleT = Utility.createPair(arg1, arg2, termsPack, defPack, header.getSignature());
      if ((t = Utility.createFunctionTerm(funcName, tupleT, termsPack, declared_Func, declared_Dom, defPack, header.getSignature())) == null) {if (true) throw new ParseException("");}
    }
    {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

// NOT
  final public Term notLogicExpr(HashMap localVar, boolean areAllowedNewVar) throws ParseException {
  Term t, arg;
  Token op;
    if (getToken(1).kind == ID_FUNCTION && getToken(1).image.equals("not")) {
      op = jj_consume_token(ID_FUNCTION);
      Logger.logDebug("\u005ctnot\u005ct\u005ctoperator");
      arg = includesExpr(localVar, areAllowedNewVar);
      String funcName = Utility.getFunctionName(op.image);
      TupleTerm tupleT = Utility.createSingle(arg, termsPack, defPack, header.getSignature());
      if ((t = Utility.createFunctionTerm(funcName, tupleT, termsPack, declared_Func, declared_Dom, defPack, header.getSignature())) == null) {if (true) throw new ParseException("");}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PROD:
      case SEQ:
      case POWERSET:
      case BAG:
      case MAP:
      case RULEDOM:
      case TRUE:
      case FALSE:
      case UNDEF:
      case PLUS:
      case MINUS:
      case NUMBER:
      case NATNUMBER:
      case REAL_NUMBER:
      case COMPLEX_NUMBER:
      case ID_VARIABLE:
      case ID_ENUM:
      case ID_DOMAIN:
      case ID_FUNCTION:
      case CHAR_LITERAL:
      case STRING_LITERAL:
      case 117:
        t = includesExpr(localVar, areAllowedNewVar);
        break;
      default:
        jj_la1[66] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

// in e !in (appartenenza)
  final public Term includesExpr(HashMap localVar, boolean areAllowedNewVar) throws ParseException {
  Term t, arg1, arg2;
  Token tok;
    t = relationalExpr(localVar, areAllowedNewVar);
    if (jj_2_20(1)) {
      if (getToken(1).kind == ID_FUNCTION && getToken(1).image.equals("in")) {
        tok = jj_consume_token(ID_FUNCTION);
        Logger.logDebug("\u005ctin\u005ct\u005ctoperator");
        arg2 = relationalExpr(localVar, areAllowedNewVar);
      } else if (getToken(1).kind == ID_FUNCTION && getToken(1).image.equals("notin")) {
        tok = jj_consume_token(ID_FUNCTION);
        Logger.logDebug("\u005ctnotin\u005ct\u005ctoperator");
        arg2 = relationalExpr(localVar, areAllowedNewVar);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      arg1 = t;
      String funcName = Utility.getFunctionName(tok.image);
      TupleTerm tupleT = Utility.createPair(arg1, arg2, termsPack, defPack, header.getSignature());
      if ((t = Utility.createFunctionTerm(funcName, tupleT, termsPack, declared_Func, declared_Dom, defPack, header.getSignature())) == null) {if (true) throw new ParseException("");}
    } else {
      ;
    }
    {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

// == != > >= < <=
  final public Term relationalExpr(HashMap localVar, boolean areAllowedNewVar) throws ParseException {
  Term t, arg1, arg2;
  Token tok;
    t = additiveExpr(localVar, areAllowedNewVar);
    label_28:
    while (true) {
      if (jj_2_21(2)) {
        ;
      } else {
        break label_28;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        tok = jj_consume_token(EQ);
        Logger.logDebug("\u005ct=\u005ct\u005ctoperator");
        arg2 = additiveExpr(localVar, areAllowedNewVar);
        break;
      case NEQ:
        tok = jj_consume_token(NEQ);
        Logger.logDebug("\u005ct!=\u005ct\u005ctoperator");
        arg2 = additiveExpr(localVar, areAllowedNewVar);
        break;
      case LT:
        tok = jj_consume_token(LT);
        Logger.logDebug("\u005ct<\u005ct\u005ctoperator");
        arg2 = additiveExpr(localVar, areAllowedNewVar);
        break;
      case LE:
        tok = jj_consume_token(LE);
        Logger.logDebug("\u005ct<=\u005ct\u005ctoperator");
        arg2 = additiveExpr(localVar, areAllowedNewVar);
        break;
      case GT:
        tok = jj_consume_token(GT);
        Logger.logDebug("\u005ct>\u005ct\u005ctoperator");
        arg2 = additiveExpr(localVar, areAllowedNewVar);
        break;
      case GE:
        tok = jj_consume_token(GE);
        Logger.logDebug("\u005ct>=\u005ct\u005ctoperator");
        arg2 = additiveExpr(localVar, areAllowedNewVar);
        break;
      default:
        jj_la1[67] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      arg1 = t;
      String funcName = Utility.getFunctionName(tok.image);
      TupleTerm tupleT = Utility.createPair(arg1, arg2, termsPack, defPack, header.getSignature());
      if ((t = Utility.createFunctionTerm(funcName, tupleT, termsPack, declared_Func, declared_Dom, defPack, header.getSignature())) == null) {if (true) throw new ParseException("");}
    }
    {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Term additiveExpr(HashMap localVar, boolean areAllowedNewVar) throws ParseException {
  Term t, arg1, arg2;
  Token tok;
    t = multiplicativeExpr(localVar, areAllowedNewVar);
    label_29:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[68] = jj_gen;
        break label_29;
      }
      if (jj_2_22(2)) {
        tok = jj_consume_token(PLUS);
        Logger.logDebug("\u005ct+\u005ct\u005ctoperator");
        arg2 = multiplicativeExpr(localVar, areAllowedNewVar);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MINUS:
          tok = jj_consume_token(MINUS);
        Logger.logDebug("\u005ct-\u005ct\u005ctoperator");
          arg2 = multiplicativeExpr(localVar, areAllowedNewVar);
          break;
        default:
          jj_la1[69] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      arg1 = t;
      String funcName = Utility.getFunctionName(tok.image);
      TupleTerm tupleT = Utility.createPair(arg1, arg2, termsPack, defPack, header.getSignature());
      if ((t = Utility.createFunctionTerm(funcName, tupleT, termsPack, declared_Func, declared_Dom, defPack, header.getSignature())) == null) {if (true) throw new ParseException("");}
    }
    {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Term multiplicativeExpr(HashMap localVar, boolean areAllowedNewVar) throws ParseException {
  Term t, arg1, arg2;
  Token tok;
    t = powerExpr(localVar, areAllowedNewVar);
    label_30:
    while (true) {
      if (jj_2_23(1)) {
        ;
      } else {
        break label_30;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULT:
        tok = jj_consume_token(MULT);
        Logger.logDebug("\u005ct*\u005ct\u005ctoperator");
        arg2 = powerExpr(localVar, areAllowedNewVar);
        break;
      case DIV:
        tok = jj_consume_token(DIV);
        Logger.logDebug("\u005ct/\u005ct\u005ctoperator");
        arg2 = powerExpr(localVar, areAllowedNewVar);
        break;
      default:
        jj_la1[70] = jj_gen;
        if (getToken(1).kind == ID_FUNCTION && getToken(1).image.equals("mod")) {
          tok = jj_consume_token(ID_FUNCTION);
        Logger.logDebug("\u005ctmod\u005ct\u005ctoperator");
          // se definisco il token mod non posso più usarlo come funzione,
                // invece mod è definito nella standard library anche come funzione
                // quindi quando trova <MOD> invece che function protesta
                // tok = <MOD> {Logger.logDebug("\tmod\t\toperator");}
                arg2 = powerExpr(localVar, areAllowedNewVar);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      arg1 = t;
      String funcName = Utility.getFunctionName(tok.image);
      TupleTerm tupleT = Utility.createPair(arg1, arg2, termsPack, defPack, header.getSignature());
      if ((t = Utility.createFunctionTerm(funcName, tupleT, termsPack, declared_Func, declared_Dom, defPack, header.getSignature())) == null) {if (true) throw new ParseException("");}
    }
    {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Term powerExpr(HashMap localVar, boolean areAllowedNewVar) throws ParseException {
  Term t, arg1, arg2;
  Token tok;
    t = unaryExpr(localVar, areAllowedNewVar);
    label_31:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PWR:
        ;
        break;
      default:
        jj_la1[71] = jj_gen;
        break label_31;
      }
      tok = jj_consume_token(PWR);
      Logger.logDebug("\u005ct^\u005ct\u005ctoperator");
      arg2 = unaryExpr(localVar, areAllowedNewVar);
      arg1 = t;
      String funcName = Utility.getFunctionName(tok.image);
      TupleTerm tupleT = Utility.createPair(arg1, arg2, termsPack, defPack, header.getSignature());
      if ((t = Utility.createFunctionTerm(funcName, tupleT, termsPack, declared_Func, declared_Dom, defPack, header.getSignature())) == null) {if (true) throw new ParseException("");}
    }
    {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Term unaryExpr(HashMap localVar, boolean areAllowedNewVar) throws ParseException {
  Term t = null, arg;
  Token tok;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      if (jj_2_24(2)) {
        tok = jj_consume_token(PLUS);
        Logger.logDebug("\u005ctPLUS UNARY -\u005ct\u005ctoperator");
        arg = unaryExpr(localVar, areAllowedNewVar);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MINUS:
          tok = jj_consume_token(MINUS);
        Logger.logDebug("\u005ct MINUS  UNARY -\u005ct\u005ctoperator");
          arg = unaryExpr(localVar, areAllowedNewVar);
          break;
        default:
          jj_la1[72] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      String funcName = Utility.getFunctionName(tok.image);
      TupleTerm tupleT = Utility.createSingle(arg, termsPack, defPack, header.getSignature());
      t = Utility.createFunctionTerm(funcName, tupleT, termsPack, declared_Func, declared_Dom, defPack, header.getSignature());
      if (t == null) {if (true) throw new ParseException("Problems in creating unary espressions.");}
      {if (true) return t;}
      break;
    case PROD:
    case SEQ:
    case POWERSET:
    case BAG:
    case MAP:
    case RULEDOM:
    case TRUE:
    case FALSE:
    case UNDEF:
    case NUMBER:
    case NATNUMBER:
    case REAL_NUMBER:
    case COMPLEX_NUMBER:
    case ID_VARIABLE:
    case ID_ENUM:
    case ID_DOMAIN:
    case ID_FUNCTION:
    case CHAR_LITERAL:
    case STRING_LITERAL:
    case 117:
      t = basicExpr(localVar, areAllowedNewVar);
      break;
    default:
      jj_la1[73] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Term basicExpr(HashMap localVar, boolean areAllowedNewVar) throws ParseException {
  Term t;
    if (jj_2_25(2147483647)) {
      t = BasicTerm(localVar, areAllowedNewVar);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PROD:
      case SEQ:
      case POWERSET:
      case BAG:
      case MAP:
      case RULEDOM:
      case ID_DOMAIN:
        t = DomainTerm();
        break;
      default:
        jj_la1[74] = jj_gen;
        if (jj_2_26(2147483647)) {
          t = FiniteQuantificationTerm(localVar);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 117:
            jj_consume_token(117);
      Logger.logDebug("\u005ct(");
            t = Expression(localVar, areAllowedNewVar);
            jj_consume_token(119);
      Logger.logDebug("\u005ct)");
            break;
          default:
            jj_la1[75] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
    {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

////////////////////////////////////////////////////////////////////////////////////////
  final public BasicTerm BasicTerm(HashMap localVar, boolean areAllowedNewVar) throws ParseException {
  BasicTerm t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
    case FALSE:
    case UNDEF:
    case NUMBER:
    case NATNUMBER:
    case REAL_NUMBER:
    case COMPLEX_NUMBER:
    case ID_ENUM:
    case CHAR_LITERAL:
    case STRING_LITERAL:
      t = ConstantTerm();
      break;
    case ID_VARIABLE:
      t = VariableTerm(localVar, areAllowedNewVar);
      break;
    case ID_FUNCTION:
      t = FunctionTerm(localVar, areAllowedNewVar);
      break;
    default:
      jj_la1[76] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public FunctionTerm FunctionTerm(HashMap localVar, boolean areAllowedNewVar) throws ParseException {
  String funcName;
  String agentName = null;
  TupleTerm tupleT = null;
  FunctionTerm t;
    Logger.logDebug("\u005ct");
    if (jj_2_27(2)) {
      agentName = ID_AGENT();
      jj_consume_token(125);
      Logger.logDebug(agentName + ".");
    } else {
      ;
    }
    funcName = ID_FUNCTION();
    Logger.logDebug(funcName + "\u005ct\u005ctFunctionTerm beginning");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 117:
      tupleT = TupleTerm(localVar, areAllowedNewVar);
      break;
    default:
      jj_la1[77] = jj_gen;
      ;
    }
    if (agentName != null)
    { //create a new functionTerm representing the agent
      FunctionTerm agent_funT;
      if (agentName.equals("self"))
      {
        if ((agent_funT = Utility.createFunctionTerm("self", null, termsPack, declared_Func, declared_Dom, defPack, header.getSignature())) == null) {if (true) throw new ParseException("");}
      }
      else
      {
        Term arg = Utility.createStringT(agentName, termsPack, domainsFactory);
        TupleTerm agentArg = Utility.createSingle(arg, termsPack, defPack, header.getSignature());
        if ((agent_funT = Utility.createFunctionTerm("getAgent", agentArg, termsPack, declared_Func, declared_Dom, defPack, header.getSignature())) == null) {if (true) throw new ParseException("");}
      }
      //insert the functionTerm created as first element of tupleT
      if (tupleT == null)
      { //create a new TupleTerm for the FunctionTerm
        tupleT = Utility.createSingle(agent_funT, termsPack, defPack, header.getSignature());
      }
      else tupleT.getTerms().add(0, agent_funT);
    }
    if ((t = Utility.createFunctionTerm(funcName, tupleT, termsPack, declared_Func, declared_Dom, defPack, header.getSignature())) == null) {if (true) throw new ParseException("Problems in creating Function Term");}
    Logger.logDebug("\u005ct\u005ct\u005ctFunctionTerm end, D=" + t.getDomain().getName());
    {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public LocationTerm LocationTerm(HashMap localVar, boolean areAllowedNewVar) throws ParseException {
  String funcName;
  TupleTerm tupleT = null;
  String agentName = null;
  LocationTerm t;
    Logger.logDebug("\u005ct");
    if (jj_2_28(2)) {
      agentName = ID_AGENT();
      jj_consume_token(125);
      Logger.logDebug(agentName + ".");
    } else {
      ;
    }
    funcName = ID_FUNCTION();
    Logger.logDebug("\u005ct" + funcName + "\u005ct\u005ctLocationTerm beginning");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 117:
      tupleT = TupleTerm(localVar, areAllowedNewVar);
      break;
    default:
      jj_la1[78] = jj_gen;
      ;
    }
    if (agentName != null)
    { //create a new functionTerm representing the agent
      FunctionTerm agent_funT;
      if (agentName.equals("self"))
      {
        if ((agent_funT = Utility.createFunctionTerm("self", null, termsPack, declared_Func, declared_Dom, defPack, header.getSignature())) == null) {if (true) throw new ParseException("");}
      }
      else
      {
        Term arg = Utility.createStringT(agentName, termsPack, domainsFactory);
        TupleTerm agentArg = Utility.createPair(arg, null, termsPack, defPack, header.getSignature());
        if ((agent_funT = Utility.createFunctionTerm("getAgent", agentArg, termsPack, declared_Func, declared_Dom, defPack, header.getSignature())) == null) {if (true) throw new ParseException("");}
      }
      //insert the functionTerm created as first element of tupleT
      if (tupleT == null)
      { //create a new TupleTerm for the FunctionTerm
        tupleT = Utility.createPair(agent_funT, null, termsPack, defPack, header.getSignature());
      }
      else tupleT.getTerms().add(0, agent_funT);
    }
    FunctionTerm f = Utility.createFunctionTerm(funcName, tupleT, termsPack, declared_Func, declared_Dom, defPack, header.getSignature());
    t = (LocationTerm) f;
    if (t == null) {if (true) throw new ParseException("Problems in creating Location Term");}
    Logger.logDebug("\u005ct\u005ct\u005ctLocationTerm end, TD=" + t.getDomain().getName());
    {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

/** reads a variable term v:
* if v is not in localVar and not areAllowedNewVar parseException
* if v is not in localVar and areAllowedNewVar then builds new variable
* if v is in localVar then insert it in localVar and return that variable
*/
  final public VariableTerm VariableTerm(HashMap < String, VariableTerm > localVar, boolean areAllowedNewVar) throws ParseException {
  String name;
  VariableKind kind = VariableKind.LOGICAL_VAR;
    name = ID_VARIABLE();
    VariableTerm variable = (VariableTerm) localVar.get(name);
    if (!areAllowedNewVar && variable == null) {if (true) throw new ParseException("Error: The definition of new variable is not allowed and " + name + " variable occurs for the first time");}
    if (variable == null) //create a new variable
    { //create the object
      variable = termsPack.getBasicTerms().createVariableTerm(name, kind);
      //add this new variable to the localVar HashMap
      localVar.put(name, variable);
      //set TypeDomain
      AnyDomain anyDomain = Utility.getAnyDomain(domainsFactory, anyDomainAnyName);
      if (anyDomain == null) {if (true) throw new ParseException("Error: The AnyDomain is not defined");}
      variable.setDomain(anyDomain);
    } //else use the variable found in the HashMap
    //OCL constraints are granted for construction.
    //The variable associations are set through the updateVariable() method invoked by the construct that use the variable
    Logger.logDebug("\u005ct" + name + "\u005ct\u005ctVariableTerm, D=" + variable.getDomain().getName() + ", kind=" + variable.getKind().toString());
    {if (true) return variable;}
    throw new Error("Missing return statement in function");
  }

  final public ConstantTerm ConstantTerm() throws ParseException {
  ConstantTerm t;
    if (jj_2_29(2147483647)) {
      t = ComplexTerm();
    } else if (jj_2_30(2147483647)) {
      t = RealTerm();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBER:
        t = IntegerTerm();
        break;
      case NATNUMBER:
        t = NaturalTerm();
        break;
      case CHAR_LITERAL:
        t = CharTerm();
        break;
      case STRING_LITERAL:
        t = StringTerm();
        break;
      case TRUE:
      case FALSE:
        t = BooleanTerm();
        break;
      case UNDEF:
        t = UndefTerm();
        break;
      case ID_ENUM:
        t = EnumTerm();
        break;
      default:
        jj_la1[79] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public ComplexTerm ComplexTerm() throws ParseException {
  Token t;
  String symbol;
    t = jj_consume_token(COMPLEX_NUMBER);
    symbol = t.image;
    //create the object
    ComplexTerm term = termsPack.getFurtherTerms().createComplexTerm();
    // set the symbol
    term.setSymbol(symbol);
    //look for the Complex domain reference
    BasicTd complexDom = Utility.getBasicDomain(domainsFactory, "Complex");
    //set the reference
    term.setDomain(complexDom);
    //constraint 1 is granted for construction
    Logger.logDebug("\u005ct" + term.getSymbol() + "\u005ct\u005ctComplexTerm, TD=" + term.getDomain().getName());
    {if (true) return term;}
    throw new Error("Missing return statement in function");
  }

  final public RealTerm RealTerm() throws ParseException {
  Token t;
  String symbol = "";
    t = jj_consume_token(REAL_NUMBER);
    symbol = symbol.concat(t.image);
    //create the object
    RealTerm term = termsPack.getFurtherTerms().createRealTerm();
    term.setSymbol(symbol);
    //look for the Real domain reference in the predefined_Dom HashMap
    TypeDomain dom = Utility.getBasicDomain(domainsFactory, "Real");
    if (dom == null)
    {
      {if (true) throw new ParseException("Error: The Real domain is not defined");}
    }
    //set references
    term.setDomain(dom);
    //constraint 1 is granted for construction
    Logger.logDebug("\u005ct" + term.getSymbol() + "\u005ct\u005ctRealTerm, TD=" + term.getDomain().getName());
    {if (true) return term;}
    throw new Error("Missing return statement in function");
  }

  final public IntegerTerm IntegerTerm() throws ParseException {
  Token t;
  String symbol = "";
    //(t ="+"|t ="-"){symbol = symbol.concat(t.image);}
      t = jj_consume_token(NUMBER);
    symbol = symbol.concat(t.image);
    //create the object
    IntegerTerm term = termsPack.getFurtherTerms().createIntegerTerm();
    term.setSymbol(symbol);
    //look for the Integer domain reference in the predefined_Dom HashMap
    TypeDomain dom = (TypeDomain) Utility.getBasicDomain(domainsFactory, "Integer");
    if (dom == null)
    {
      {if (true) throw new ParseException("Error: The Integer domain is not defined");}
    }
    //set references
    term.setDomain(dom);
    //constraint 1 is granted for construction
    Logger.logDebug("\u005ct" + term.getSymbol() + "\u005ct\u005ctIntegerTerm, TD=" + term.getDomain().getName());
    {if (true) return term;}
    throw new Error("Missing return statement in function");
  }

  final public NaturalTerm NaturalTerm() throws ParseException {
  Token t;
  String symbol;
    t = jj_consume_token(NATNUMBER);
    symbol = t.image;
    //create the object
    NaturalTerm term = termsPack.getFurtherTerms().createNaturalTerm();
    term.setSymbol(symbol);
    //look for the Natural domain reference in the predefined_Dom HashMap
    TypeDomain dom = (TypeDomain) Utility.getBasicDomain(domainsFactory, "Natural");
    if (dom == null)
    {
      {if (true) throw new ParseException("Error: The Natural domain is not defined");}
    }
    //set references
    term.setDomain(dom);
    //constraint 1 is granted for construction
    Logger.logDebug("\u005ct" + term.getSymbol() + "\u005ct\u005ctNaturalTerm, TD=" + term.getDomain().getName());
    {if (true) return term;}
    throw new Error("Missing return statement in function");
  }

  final public CharTerm CharTerm() throws ParseException {
  Token t;
  String symbol;
    t = jj_consume_token(CHAR_LITERAL);
    symbol = t.image;
    //create the object
    CharTerm term = termsPack.getFurtherTerms().createCharTerm();
    term.setSymbol(symbol);
    //look for the char domain reference in the predefined_Dom HashMap
    TypeDomain dom = (TypeDomain) Utility.getBasicDomain(domainsFactory, "Char");
    if (dom == null)
    {
      {if (true) throw new ParseException("Error: The Char domain is not defined");}
    }
    //set references
    term.setDomain(dom);
    //constraint 1 is granted for construction
    Logger.logDebug("\u005ct" + term.getSymbol() + "\u005ct\u005ctCharTerm, TD=" + term.getDomain().getName());
    {if (true) return term;}
    throw new Error("Missing return statement in function");
  }

  final public StringTerm StringTerm() throws ParseException {
  Token t;
  String symbol;
    t = jj_consume_token(STRING_LITERAL);
    symbol = t.image;
    //TODO dubbio di PA. Con l'istruzione symbol = t.image; le stringhe sono
    //ritornate con le virgolette. Con l'istruzione qui sotto commentata le virgolette
    //sono rimosse. E' meglio averle le virgolette, o non averle? 
    //symbol = t.image.substring(1, t.image.length() - 1);
    StringTerm term = Utility.createStringT(symbol, termsPack, domainsFactory);
    if (term == null) {if (true) throw new ParseException("Error: The Char domain is not defined");}
    Logger.logDebug("\u005ct" + term.getSymbol() + "\u005ct\u005ctStringTerm, TD=" + term.getDomain().getName());
    {if (true) return term;}
    throw new Error("Missing return statement in function");
  }

  final public BooleanTerm BooleanTerm() throws ParseException {
  Token t;
  String symbol;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      t = jj_consume_token(TRUE);
      break;
    case FALSE:
      t = jj_consume_token(FALSE);
      break;
    default:
      jj_la1[80] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    symbol = t.image;
    BooleanTerm term = termsPack.getBasicTerms().createBooleanTerm(Boolean.parseBoolean(symbol));
    //look for the boolean domain reference in the predefined_Dom HashMap
    TypeDomain dom = (TypeDomain) Utility.getBasicDomain(domainsFactory, "Boolean");
    if (dom == null)
    {
      {if (true) throw new ParseException("Error: The Boolean domain is not defined.");}
    }
    //set references
    term.setDomain(dom);
    //constraint 1 is granted for construction
    Logger.logDebug("\u005ct" + term.getSymbol() + "\u005ct\u005ctBooleanTerm, TD=" + term.getDomain().getName());
    {if (true) return term;}
    throw new Error("Missing return statement in function");
  }

  final public UndefTerm UndefTerm() throws ParseException {
  Token t;
  String symbol;
    t = jj_consume_token(UNDEF);
    Logger.logDebug("match:UndefTerm");
    symbol = t.image;
    UndefTerm term = termsPack.getBasicTerms().createUndefTerm();
    term.setSymbol(symbol);
    //look for the Undef domain reference in the predefined_Dom HashMap
    TypeDomain dom = (TypeDomain) Utility.getBasicDomain(domainsFactory, "Undef");
    if (dom == null)
    {
      {if (true) throw new ParseException("Error: The Undef domain is not defined");}
    }
    //set references
    term.setDomain(dom);
    //constraint 1 is granted for construction
    Logger.logDebug("\u005ct" + term.getSymbol() + "\u005ct\u005ctUndefTerm, TD=" + term.getDomain().getName());
    {if (true) return term;}
    throw new Error("Missing return statement in function");
  }

  final public EnumTerm EnumTerm() throws ParseException {
  String symbol;
    symbol = ID_ENUM();
    //look for the enumTerm symbol in the enumElem HashMap to obtain the enumeration type-domain to which the enum term is associated.
    TypeDomain dom = (TypeDomain) enumElem.get(symbol);
    if (dom == null)
    {
      {if (true) throw new ParseException("Error: The enumeration element " + symbol + " is not defined.");}
    }
    //create the object
    EnumTerm term = termsPack.getFurtherTerms().createEnumTerm();
    term.setSymbol(symbol);
    //set references
    term.setDomain(dom);
    //constraint 1 and 2 are granted for construction
    Logger.logDebug("\u005ct" + term.getSymbol() + "\u005ct\u005ctEnumTerm, TD=" + term.getDomain().getName());
    {if (true) return term;}
    throw new Error("Missing return statement in function");
  }

  final public ExtendedTerm ExtendedTerm(HashMap localVar, boolean areAllowedNewVar, RuleDeclaration c, Domain expDom) throws ParseException {
  ExtendedTerm t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
      t = ConditionalTerm(localVar);
      break;
    case SWITCH:
      t = CaseTerm(localVar);
      break;
    default:
      jj_la1[81] = jj_gen;
      if (jj_2_31(2)) {
        //to solve the conflict with the finite quantification terms  (exist... | existUnique... |forall... )
            t = TupleTerm(localVar, areAllowedNewVar);
      } else if (jj_2_32(2147483647)) {
        t = VariableBindingTerm(localVar);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LT:
        case 121:
        case 126:
          t = CollectionTerm(localVar, areAllowedNewVar);
          break;
        case 129:
          t = RuleAsTerm(localVar, c, expDom);
          break;
        case PROD:
        case SEQ:
        case POWERSET:
        case BAG:
        case MAP:
        case RULEDOM:
        case ID_DOMAIN:
          t = DomainTerm();
          break;
        default:
          jj_la1[82] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public ConditionalTerm ConditionalTerm(HashMap localVar) throws ParseException {
  Term thenT, elseT, guard;
    jj_consume_token(IF);
    Logger.logDebug("\u005ctif\u005ct\u005ctConditionalTerm beginning");
    guard = Term(localVar, false, null);
    jj_consume_token(THEN);
    Logger.logDebug("\u005ctthen");
    thenT = Term(localVar, false, null);
    ConditionalTerm term = termsPack.getFurtherTerms().createConditionalTerm();
    //set references
    term.setGuard(guard);
    term.setThenTerm(thenT);
    //create associations
    //XX AConditionalTermGuard a_conditionalT_guard = termsPack.getFurtherTerms().getAConditionalTermGuard();
    //XX a_conditionalT_guard.add(term,guard);
    //XX AConditionalTermThenTerm a_conditionalT_thenT = termsPack.getFurtherTerms().getAConditionalTermThenTerm();
    //XX a_conditionalT_thenT.add(term,thenT);

    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      Logger.logDebug("\u005ctelse");
      elseT = Term(localVar, false, null);
      //set the reference
      term.setElseTerm(elseT);
      //set the association
      //XX AConditionalTermElseTerm a_conditionalT_elseT = termsPack.getFurtherTerms().getAConditionalTermElseTerm();
      //XX a_conditionalT_elseT.add(term,elseT);

      break;
    default:
      jj_la1[83] = jj_gen;
      ;
    }
    jj_consume_token(ENDIF);
    //set TypeDomain with "then term" type domain
    TypeDomain td = OCL_Checker.getTypeDomain(thenT.getDomain());
    term.setDomain(td);
    //check OCL constraints
    if (!OCL_Checker.checkConditionalTerm(term))
    {
      Logger.logErr(OCL_Checker.getMsgErr());
      Logger.logErr("       At a conditional term.");
    }
    Logger.logDebug("\u005ctendif\u005ct\u005ctConditionalTerm end, TD=" + term.getDomain().getName());
    {if (true) return term;}
    throw new Error("Missing return statement in function");
  }

  final public CaseTerm CaseTerm(HashMap localVar) throws ParseException {
  Term switchT, caseT, resT;
    jj_consume_token(SWITCH);
    Logger.logDebug("\u005ctswitch\u005ct\u005ctCaseTerm beginning");
    switchT = Term(localVar, false, null);
    CaseTerm term = termsPack.getFurtherTerms().createCaseTerm();
    //set the reference
    term.setComparedTerm(switchT);
    List comparingList = term.getComparingTerm();
    List resultList = term.getResultTerms();
    label_32:
    while (true) {
      jj_consume_token(CASE);
      Logger.logDebug("\u005ctcase");
      caseT = Term(localVar, false, null);
      jj_consume_token(120);
      Logger.logDebug("\u005ct:");
      resT = Term(localVar, false, null);
      //set the reference
      comparingList.add(caseT);
      resultList.add(resT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE:
        ;
        break;
      default:
        jj_la1[84] = jj_gen;
        break label_32;
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OTHERWISE:
      jj_consume_token(OTHERWISE);
      Logger.logDebug("\u005ctotherwise");
      resT = Term(localVar, false, null);
      //set the reference
      term.setOtherwiseTerm(resT);
      //create associations
      //X ACaseTermOtherwiseTerm a_caseT_otherwiseT = termsPack.getFurtherTerms().getACaseTermOtherwiseTerm();
      //X a_caseT_otherwiseT.add(term,resT);

      break;
    default:
      jj_la1[85] = jj_gen;
      ;
    }
    jj_consume_token(END_SWITCH);
    //set TypeDomain with either the type domain of the last case result term or the one of the otherwise term (if it exist)
    TypeDomain td = OCL_Checker.getTypeDomain(resT.getDomain());
    term.setDomain(td);
    //check OCL constraints
    //constraint 1 is granted for construction
    //check constraints 2-3
    // to be improved
    if (!OCL_Checker.checkCaseTerm(term))
    {
      Logger.logErr(OCL_Checker.getMsgErr());
      Logger.logErr("       At a case term");
      {if (true) throw new ParseException(OCL_Checker.getMsgErr() + "\u005cn       At a case term");}
    }
    Logger.logDebug("\u005ctendswitch\u005ct\u005ctCaseTerm end, TD=" + term.getDomain().getName());
    {if (true) return term;}
    throw new Error("Missing return statement in function");
  }

  final public TupleTerm TupleTerm(HashMap localVar, boolean areAllowedNewVar) throws ParseException {
  int arity;
  Term t;
    jj_consume_token(117);
    Logger.logDebug("\u005ct(\u005ct\u005ctTupleTerm beginning");
    //create the object
    TupleTerm term = termsPack.getBasicTerms().createTupleTerm();
    List < Term > elemList = term.getTerms();
    List < Domain > prodDomList = new LinkedList < Domain > ();
    t = Term(localVar, areAllowedNewVar, null);
    //add the element to the terms list
    elemList.add(t);
    //add this domain to the domain list
    prodDomList.add(t.getDomain());
    //check constraint 1 (check elements type)
    if (!OCL_Checker.termAccepted(t)) {if (true) throw new ParseException(OCL_Checker.getMsgErr() + "\u005cn       At a tuple term");}
    label_33:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 118:
        ;
        break;
      default:
        jj_la1[86] = jj_gen;
        break label_33;
      }
      jj_consume_token(118);
      t = Term(localVar, areAllowedNewVar, null);
      //add a new element to the terms list
      elemList.add(t);
      //add this type domain to the domain list
      prodDomList.add(t.getDomain());
      //check constraint 1 (check elements type)
      if (!OCL_Checker.termAccepted(t)) {if (true) throw new ParseException(OCL_Checker.getMsgErr() + "\u005cn       At a tuple term");}
    }
    jj_consume_token(119);
    //set the tuple arity
    arity = elemList.size();
    term.setArity(arity);
    //set the tuple TypeDomain
    Domain dom;
    if (arity == 1)  //the domain associated to the tuple term must be equal to the one associated to its unique term
    dom = ((Term) elemList.get(0)).getDomain();
    else //the type-domain associated to the tuple term must be a Cartesian product domain
    dom = Utility.getProduct(prodDomList, defPack, header.getSignature());
    term.setDomain(dom);
    //OCL constraints 2-3 granted for construction
    {
      Logger.logDebug("\u005ct)\u005ct\u005ctTupleTerm end, arity=" + term.getArity() + ", TD=" + term.getDomain().getName());
    }
    {if (true) return term;}
    throw new Error("Missing return statement in function");
  }

  final public CollectionTerm CollectionTerm(HashMap localVar, boolean areAllowedNewVar) throws ParseException {
  CollectionTerm t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 126:
      t = SequenceTerm(localVar, areAllowedNewVar);
      break;
    default:
      jj_la1[87] = jj_gen;
      if (jj_2_33(2147483647)) {
        //{->} stands for the empty map
            t = MapTerm(localVar, areAllowedNewVar);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 121:
          t = SetTerm(localVar, areAllowedNewVar);
          break;
        case LT:
          t = BagTerm(localVar, areAllowedNewVar);
          break;
        default:
          jj_la1[88] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

/* A collection of zero or more elements of the same nature which have an order and may be duplicated
For example, Sequence{?one?, ?table?, ?one?} and Sequence{?one?, ?one?, ?table?} are different sequences over the string domain.
*/
  final public SequenceTerm SequenceTerm(HashMap localVar, boolean areAllowedNewVar) throws ParseException {
  int size;
  Term elem, firstElem, lastElem;
  Token tok;
  double step = 1;
  boolean natural_step = true;
    jj_consume_token(126);
    Logger.logDebug("\u005ct[\u005ct\u005ctSequenceTerm beginning");
    //create the object
    SequenceTerm term = termsPack.getFurtherTerms().createSequenceTerm();
    List < Term > elemList = term.getTerms();
    if (jj_2_34(1)) {
      firstElem = Term(localVar, areAllowedNewVar, null);
      //add a new element to the terms list
      elemList.add(firstElem);
      //constraint 3
      if (!OCL_Checker.termAccepted(firstElem)) {if (true) throw new ParseException(OCL_Checker.getMsgErr() + "\u005cn       At a SequenceTerm.");}
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 118:
      case 127:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 118:
          label_34:
          while (true) {
            jj_consume_token(118);
            elem = Term(localVar, areAllowedNewVar, null);
          //add a new element to the terms list
          elemList.add(elem);
          //constraint 3
          if (!OCL_Checker.termAccepted(elem)) {if (true) throw new ParseException(OCL_Checker.getMsgErr() + "\u005cn       At a SequenceTerm.");}
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 118:
              ;
              break;
            default:
              jj_la1[89] = jj_gen;
              break label_34;
            }
          }
          break;
        case 127:
          jj_consume_token(127);
          Logger.logDebug("\u005ct..");
          //Interval notation
                  lastElem = Term(localVar, areAllowedNewVar, null);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 118:
            jj_consume_token(118);
            elem = Term(localVar, areAllowedNewVar, null);
            if (!(elem.getDomain() instanceof IntegerDomain)) natural_step = false;
            step = Utility.convertToDouble(elem);
            Logger.logDebug("\u005ct" + step + "\u005ct\u005ctinterval step");
            if (step <= 0) {if (true) throw new ParseException("The step must be a positive number." + "\u005cn       At a sequenceTerm.");}
            break;
          default:
            jj_la1[90] = jj_gen;
            ;
          }
        Utility.createTermCollection(firstElem, lastElem, elemList, step, natural_step, termsPack, declared_Func, declared_Dom, defPack, header.getSignature());
          break;
        default:
          jj_la1[91] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[92] = jj_gen;
        ;
      }
    } else {
      ;
    }
    jj_consume_token(128);
    //set the size
    size = elemList.size();
    term.setSize(size);
    //set the TypeDomain
    TypeDomain elemTD;
    if (size == 0) //empty collection
    {
      AnyDomain anyDomain = Utility.getAnyDomain(domainsFactory, anyDomainAnyName);
      if (anyDomain == null) {if (true) throw new ParseException("Error: The genric AnyDomain is not defined");}
      elemTD = anyDomain;
    }
    else
    {
      elemTD = Utility.getCommonTD(elemList);
      if (elemTD == null) {if (true) throw new ParseException("Error: every element of a sequence must have the same type-domain.\u005cn");}
    }
    Logger.logDebug("Common type-domain: " + elemTD.getName());
    SequenceDomain seqDom = Utility.getSequence(elemTD, defPack, header.getSignature());
    //set seqDom as the sequence TypeDomain
    term.setDomain(seqDom);
    // ocl constraints 1 and 2 granted for construction
    Logger.logDebug("\u005ct]\u005ct\u005ctSequenceTerm end, size=" + term.getSize() + ", TD=" + term.getDomain().getName());
    {if (true) return term;}
    throw new Error("Missing return statement in function");
  }

//A collection of zero or more elements of the same nature which have no order and cannot be duplicated
  final public SetTerm SetTerm(HashMap localVar, boolean areAllowedNewVar) throws ParseException {
  int size;
  Term elem, firstElem, lastElem;
  Token tok;
  double step = 1;
  boolean natural_step = true;
    jj_consume_token(121);
    Logger.logDebug("\u005ct{\u005ct\u005ctSetTerm beginning");
    //create the object
    SetTerm term = termsPack.getBasicTerms().createSetTerm();
    //X ASetTermTerm a_SetTerm_Term = termsPack.getBasicTerms().getASetTermTerm();
    Collection elemColl = term.getTerm();
    if (jj_2_35(1)) {
      firstElem = Term(localVar, areAllowedNewVar, null);
      //constraint 3
      if (!OCL_Checker.termAccepted(firstElem)) {if (true) throw new ParseException(OCL_Checker.getMsgErr() + "\u005cn       At a SetTerm.");}
      //add a new element to the terms list
      elemColl.add(firstElem);
      //add a new association
      //X a_SetTerm_Term.add(term,firstElem);
      //??? In this parser it is created a new term for every used symbol (number,char,string,boolean,ecc...)
      //So every term is a different object and two terms with the same value are inserted in the collection twice.
      //create an HashMap containing set elements and check if an element is duplicated
      HashMap insertedElem = new HashMap();
      String key = Utility.appendInKey(new StringBuffer(), firstElem).toString();
      insertedElem.put(new Integer(key.hashCode()), key);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 118:
      case 127:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 118:
          label_35:
          while (true) {
            jj_consume_token(118);
            elem = Term(localVar, areAllowedNewVar, null);
          //constraint 3
          if (!OCL_Checker.termAccepted(elem)) {if (true) throw new ParseException(OCL_Checker.getMsgErr() + "\u005cn       At a SetTerm.");}
          //add a new element to the term list
          elemColl.add(elem);
          //add a new association
          //X a_SetTerm_Term.add(term,elem);
          //check if the element is duplicated
          key = Utility.appendInKey(new StringBuffer(), elem).toString();
          if (insertedElem.containsKey(new Integer(key.hashCode()))) {if (true) throw new ParseException("Error: Duplicates are not allowed in a set. " + key + " is present twice.");}
          insertedElem.put(new Integer(key.hashCode()), key);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 118:
              ;
              break;
            default:
              jj_la1[93] = jj_gen;
              break label_35;
            }
          }
          break;
        case 127:
          jj_consume_token(127);
          Logger.logDebug("\u005ct..");
          //Interval notation
                  lastElem = Term(localVar, areAllowedNewVar, null);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 118:
            jj_consume_token(118);
            elem = Term(localVar, areAllowedNewVar, null);
            if (!(elem.getDomain() instanceof IntegerDomain)) natural_step = false;
            step = Utility.convertToDouble(elem);
            Logger.logDebug("\u005ct" + step + "\u005ct\u005ctinterval step");
            if (step <= 0) {if (true) throw new ParseException("The step must be a positive number." + "\u005cn       At a SetTerm.");}
            break;
          default:
            jj_la1[94] = jj_gen;
            ;
          }
        Utility.createTermCollection(firstElem, lastElem, elemColl, step, natural_step, termsPack, declared_Func, declared_Dom, defPack, header.getSignature());
          break;
        default:
          jj_la1[95] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[96] = jj_gen;
        ;
      }
    } else {
      ;
    }
    jj_consume_token(123);
    //set the size
    size = elemColl.size();
    term.setSize(size);
    //set the TypeDomain
    TypeDomain elemTD;
    if (size == 0) //empty collection
    {
      AnyDomain anyDomain = Utility.getAnyDomain(domainsFactory, anyDomainAnyName);
      if (anyDomain == null) {if (true) throw new ParseException("Error: The generic AnyDomain is not defined");}
      elemTD = anyDomain;
    }
    else
    {
      elemTD = Utility.getCommonTD(elemColl);
      if (elemTD == null) {if (true) throw new ParseException("Error: every element of a set must have the same type-domain.\u005cn");}
    }
    PowersetDomain setDom = Utility.getPowerset(elemTD, defPack, header.getSignature());
    //set setDom as the set TypeDomain
    term.setDomain(setDom);
    // ocl constraints 1 and 2 granted for construction
    Logger.logDebug("\u005ct}\u005ct\u005ctSetTerm end, size=" + term.getSize() + ", TD=" + term.getDomain().getName());
    {if (true) return term;}
    throw new Error("Missing return statement in function");
  }

/*A collection of zero or more associations which have no order and cannot be duplicated,
like Map{t1 -> s1, . . ., tn -> sn} where t1, . . ., tn are terms of the same nature, and so s1, . . ., sn.
*/
  final public MapTerm MapTerm(HashMap localVar, boolean areAllowedNewVar) throws ParseException {
  Term elem1, elem2;
  TypeDomain sourceTD = null;
  TypeDomain targetTD = null;
    jj_consume_token(121);
    Logger.logDebug("\u005ct{\u005ct\u005ctMapTerm beginning");
    //create the object
    MapTerm term = termsPack.getFurtherTerms().createMapTerm();
    //AMapTermPair a_MapTerm_Pair = termsPack.getFurtherTerms().getAMapTermPair();
    Collection pairColl = term.getPair();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 124:
      jj_consume_token(124);
      Logger.logDebug("\u005ct->");
      break;
    default:
      jj_la1[98] = jj_gen;
      if (jj_2_36(1)) {
        elem1 = Term(localVar, areAllowedNewVar, null);
        jj_consume_token(124);
        Logger.logDebug("\u005ct->");
        elem2 = Term(localVar, areAllowedNewVar, null);
        //create a new pair
        TupleTerm pair = Utility.createPair(elem1, elem2, termsPack, defPack, header.getSignature());
        //add a new element to the terms list
        pairColl.add(pair);
        //add a new association
        //a_MapTerm_Pair.add(term,pair);
        sourceTD = OCL_Checker.getTypeDomain(elem1.getDomain());
        targetTD = OCL_Checker.getTypeDomain(elem2.getDomain());
        //In this parser it is created a new term for every used symbol (number,char,string,boolean,ecc...)
        //So every term is a different object and two equals pair are inserted in the collection twice
        //create an HashMap containing pairs and check if a pair is duplicated
        HashMap insertedPair = new HashMap();
        StringBuffer key = Utility.appendInKey(new StringBuffer(), elem1);
        key.append("->");
        Utility.appendInKey(key, elem2);
        // TODO: elimina l'uso di String o la conversione
        insertedPair.put(new Integer(key.toString().hashCode()), key.toString());
        label_36:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 118:
            ;
            break;
          default:
            jj_la1[97] = jj_gen;
            break label_36;
          }
          jj_consume_token(118);
          elem1 = Term(localVar, areAllowedNewVar, null);
          jj_consume_token(124);
          Logger.logDebug("\u005ct->");
          elem2 = Term(localVar, areAllowedNewVar, null);
          //create a new pair
          pair = Utility.createPair(elem1, elem2, termsPack, defPack, header.getSignature());
          //add a new element to the terms list
          pairColl.add(pair);
          //add a new association
          //a_MapTerm_Pair.add(term,pair);
          //check typeDomain of this pair
          if (!OCL_Checker.compatible(sourceTD, elem1.getDomain())) {if (true) throw new ParseException("Error: every pair of a map must be compatible with the type-domain for the first pair element. \u005cn" + "domain of the first element of the first pair: " + sourceTD.getName() + "  domain of another pair: " + elem1.getDomain().getName());}
          if (!OCL_Checker.compatible(targetTD, elem2.getDomain())) {if (true) throw new ParseException("Error: every pair of a map must be compatible with the type-domain for the second pair element. ");}
          //check if a pair is duplicated
          key = Utility.appendInKey(new StringBuffer(), elem1);
          key.append("->");
          Utility.appendInKey(key, elem2);
          // TODO : eliminare conversione a String
          if (insertedPair.containsKey(new Integer(key.toString().hashCode())))
          {
            Logger.logWarning("Warning: Duplicate pairs are not allowed in a map. " + key + " is present twice.");
          }
          insertedPair.put(new Integer(key.hashCode()), key);
        }
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(123);
    //set the size
    int size = pairColl.size();
    term.setSize(size);
    //set the TypeDomain when map size is 0
    if (size == 0) //empty collection
    {
      AnyDomain anyDomain = Utility.getAnyDomain(domainsFactory, anyDomainAnyName);
      if (anyDomain == null) {if (true) throw new ParseException("Error: The AnyDomain is not defined");}
      sourceTD = targetTD = anyDomain;
    }
    MapDomain mapDom = Utility.getMap(sourceTD, targetTD, defPack, header.getSignature());
    //set setDom as the set TypeDomain
    term.setDomain(mapDom);
    //OCL constraints 1,2 and 3 are granted for construction
    Logger.logDebug("\u005ct}\u005ct\u005ctMapTerm end, size=" + term.getSize() + ", TD=" + term.getDomain().getName());
    {if (true) return term;}
    throw new Error("Missing return statement in function");
  }

//A collection of zero or more elements of the same nature which have no order and may be duplicated
  final public BagTerm BagTerm(HashMap localVar, boolean areAllowedNewVar) throws ParseException {
  int size;
  Term elem, firstElem, lastElem;
  Token tok;
  double step = 1;
  boolean natural_step = true;
    jj_consume_token(LT);
    Logger.logDebug("\u005ct<\u005ct\u005ctBagTerm beginning");
    //create the object
    BagTerm term = termsPack.getFurtherTerms().createBagTerm();
    //XX ABagTermTerm a_BagTerm_Term = termsPack.getFurtherTerms().getABagTermTerm();
    Collection elemColl = term.getTerm();
    if (jj_2_37(1)) {
      firstElem = Term(localVar, areAllowedNewVar, null);
      //add a new element to the terms list
      elemColl.add(firstElem);
      //add a new association
      //XX  a_BagTerm_Term.add(firstElem,term);
      //constraint 3
      if (!OCL_Checker.termAccepted(firstElem)) {if (true) throw new ParseException(OCL_Checker.getMsgErr() + "\u005cn       At a BagTerm.");}
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 118:
      case 127:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 118:
          label_37:
          while (true) {
            jj_consume_token(118);
            elem = Term(localVar, areAllowedNewVar, null);
          //add a new element to the terms list
          elemColl.add(elem);
          //add a new association
          //XX a_BagTerm_Term.add(elem,term);
          //constraint 3
          if (!OCL_Checker.termAccepted(elem)) {if (true) throw new ParseException(OCL_Checker.getMsgErr() + "\u005cn       At a BagTerm.");}
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 118:
              ;
              break;
            default:
              jj_la1[99] = jj_gen;
              break label_37;
            }
          }
          break;
        case 127:
          jj_consume_token(127);
          Logger.logDebug("\u005ct..");
          //Interval notation
                  lastElem = Term(localVar, areAllowedNewVar, null);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 118:
            jj_consume_token(118);
            elem = Term(localVar, areAllowedNewVar, null);
            if (!(elem.getDomain() instanceof IntegerDomain)) natural_step = false;
            step = Utility.convertToDouble(elem);
            Logger.logDebug("\u005ct" + step + "\u005ct\u005ctinterval step");
            if (step <= 0) {if (true) throw new ParseException("The step must be a positive number." + "\u005cn       At a sequenceTerm.");}
            break;
          default:
            jj_la1[100] = jj_gen;
            ;
          }
        Utility.createTermCollection(firstElem, lastElem, elemColl, step, natural_step, termsPack, declared_Func, declared_Dom, defPack, header.getSignature());
          break;
        default:
          jj_la1[101] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[102] = jj_gen;
        ;
      }
    } else {
      ;
    }
    jj_consume_token(GT);
    //set the bag size
    size = elemColl.size();
    term.setSize(size);
    //set the TypeDomain
    TypeDomain elemTD;
    if (size == 0) //empty collection
    {
      AnyDomain anyDomain = Utility.getAnyDomain(domainsFactory, anyDomainAnyName);
      if (anyDomain == null) {if (true) throw new ParseException("Error: The AnyDomain is not defined");}
      elemTD = anyDomain;
    }
    else
    {
      elemTD = Utility.getCommonTD(elemColl);
      if (elemTD == null) {if (true) throw new ParseException("Error: every element of a bag must have the same type-domain.\u005cn");}
    }
    BagDomain bagDom = Utility.getBag(elemTD, defPack, header.getSignature());
    //set bagDom as the bag TypeDomain
    term.setDomain(bagDom);
    // ocl constraints 1 and 2 granted for construction
    Logger.logDebug("\u005ct>\u005ct\u005ctBagTerm end, size=" + term.getSize() + ", TD=" + term.getDomain().getName());
    {if (true) return term;}
    throw new Error("Missing return statement in function");
  }

  final public VariableBindingTerm VariableBindingTerm(HashMap localVar) throws ParseException {
  VariableBindingTerm t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LET:
      t = LetTerm(localVar);
      break;
    case 117:
      t = FiniteQuantificationTerm(localVar);
      break;
    case LT:
    case 121:
    case 126:
      t = ComprehensionTerm(localVar);
      break;
    default:
      jj_la1[103] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public FiniteQuantificationTerm FiniteQuantificationTerm(HashMap localVar) throws ParseException {
  FiniteQuantificationTerm t;
    if (jj_2_38(2147483647)) {
      t = ForallTerm(localVar);
    } else if (jj_2_39(2147483647)) {
      t = ExistUniqueTerm(localVar);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 117:
        t = ExistTerm(localVar);
        break;
      default:
        jj_la1[104] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    //check OCL constraints
    //(OCL constraint 1)set TypeDomain
    //look for the boolean domain reference in the predefined_Dom HashMap
    TypeDomain td = Utility.getBasicDomain(domainsFactory, "Boolean");
    if (td == null) {if (true) throw new ParseException("\u005cnError: The Boolean domain has not been declared.");}
    //set the reference
    t.setDomain(td);
    //(constrains 4) check if the guard has a Boolen domain as associated TypeDomain
    if ((t.getGuard() != null) && !OCL_Checker.isBoolean(t.getGuard()))
    {
      Logger.logErr("\u005cnError: The type-domain of terms after \u005c"with\u005c" must be the boolean domain\u005cn        At a Finite-Quantification term\u005cn");
    }
    Logger.logDebug(", TD=Boolean");
    {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

//NEW by Patrizia Added ranges
  final public ExistTerm ExistTerm(HashMap localVar) throws ParseException {
  VariableTerm variable;
  Term inTerm, guard;
    jj_consume_token(117);
    jj_consume_token(EXIST);
    Logger.logDebug("\u005ct(exist\u005ct\u005ctExistTerm beginning");
    ExistTerm term = termsPack.getFurtherTerms().createExistTerm();
    List < Term > rangeList = term.getRanges();
    //check if the next variable is already used (look for it in the localVar HashMap)
    String nextVar = getToken(1).image;
    if (localVar.get(nextVar) != null) {if (true) throw new ParseException("Error: The variable " + nextVar + " cannot be bound to a value in the ExistTerm. It is already used.");}
    variable = VariableTerm(localVar, true);
    jj_consume_token(IN);
    Logger.logDebug("\u005ctin");
    inTerm = Term(localVar, false, null);
    //set the reference to the variable
    Collection variableList = term.getVariable();
    variableList.add(variable);
    //check constraint 2 of superclass(part of it is granted for construction)
    if (!(OCL_Checker.getTypeDomain(inTerm.getDomain()) instanceof PowersetDomain)) {if (true) throw new ParseException("Error: The type-domain of terms after \u005c"in\u005c"  must be the power set domain \u005cn" + "       At an ExistTerm");}
    //update variable features
    Utility.updateVariable(variable, inTerm);
    Logger.logDebug("\u005ct\u005ct\u005ct" + variable.getName() + " updated: TD=" + variable.getDomain().getName() + ", kind=" + variable.getKind().toString());
    rangeList.add(inTerm);
    label_38:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 118:
        ;
        break;
      default:
        jj_la1[105] = jj_gen;
        break label_38;
      }
      jj_consume_token(118);
      //check if the next variable is already used (look for it in the localVar HashMap)
      nextVar = getToken(1).image;
      if (localVar.get(nextVar) != null) {if (true) throw new ParseException("Error: The variable " + nextVar + " cannot be bound to a value in the ExistTerm. It is already used.");}
      variable = VariableTerm(localVar, true);
      jj_consume_token(IN);
      Logger.logDebug("\u005ctin");
      inTerm = Term(localVar, false, null);
      //set the reference to the variable
      variableList.add(variable);
      //create the association
      //X a_FinQuantT_Var.add(variable,term);
      //check constraint 2 of superclass(part of it is granted for construction)
      if (!(inTerm.getDomain() instanceof PowersetDomain)) {if (true) throw new ParseException("Error: The type-domain of terms after \u005c"in\u005c"  must be a power set domain \u005cn" + "       At an ExistTerm");}
      //update variable features
      Utility.updateVariable(variable, inTerm);
      Logger.logDebug("\u005ct\u005ct\u005ct" + variable.getName() + " updated: TD=" + variable.getDomain().getName() + ", kind=" + variable.getKind().toString());
      rangeList.add(inTerm);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WITH:
      jj_consume_token(WITH);
      Logger.logDebug("\u005ctwith");
      guard = Term(localVar, false, null);
      //set the reference
      term.setGuard(guard);
      //create associations
      //X AFiniteQuantificationTermGuard a_FinQuantT_Guard = termsPack.getFurtherTerms().getAFiniteQuantificationTermGuard();
      //X a_FinQuantT_Guard.add(guard,term);

      break;
    default:
      jj_la1[106] = jj_gen;
      ;
    }
    jj_consume_token(119);
    Logger.logDebug("\u005ct)\u005ct\u005ctExistTerm end");
    {if (true) return term;}
    throw new Error("Missing return statement in function");
  }

//NEW by Patrizia Added ranges
  final public ExistUniqueTerm ExistUniqueTerm(HashMap localVar) throws ParseException {
  VariableTerm variable;
  Term inTerm, guard;
    jj_consume_token(117);
    jj_consume_token(EXIST);
    jj_consume_token(UNIQUE);
    Logger.logDebug("\u005ct(exist unique\u005ct\u005ctExistUniqueTerm beginning");
    ExistUniqueTerm term = termsPack.getFurtherTerms().createExistUniqueTerm();
    List < Term > rangeList = term.getRanges();
    //check if the next variable is already used (look for it in the localVar HashMap)
    String nextVar = getToken(1).image;
    if (localVar.get(nextVar) != null) {if (true) throw new ParseException("Error: The variable " + nextVar + " cannot be bound to a value in the ExistUniqueTerm. It is already used.");}
    variable = VariableTerm(localVar, true);
    jj_consume_token(IN);
    Logger.logDebug("\u005ctin");
    inTerm = Term(localVar, false, null);
    //set the reference to the variable
    Collection variableList = term.getVariable();
    variableList.add(variable);
    //create the association
    //X AFiniteQuantificationTermVariable a_FinQuantT_Var = termsPack.getFurtherTerms().getAFiniteQuantificationTermVariable();
    //X a_FinQuantT_Var.add(variable,term);
    //check constraint 2 of superclass(part of it is granted for construction)
    if (!(inTerm.getDomain() instanceof PowersetDomain)) {if (true) throw new ParseException("Error: The type-domain of terms after \u005c"in\u005c"  must be a power set domain \u005cn" + "       At an ExistUniqueTerm");}
    //update variable features
    Utility.updateVariable(variable, inTerm);
    Logger.logDebug("\u005ct\u005ct\u005ct" + variable.getName() + " updated: TD=" + variable.getDomain().getName() + ", kind=" + variable.getKind().toString());
    rangeList.add(inTerm);
    label_39:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 118:
        ;
        break;
      default:
        jj_la1[107] = jj_gen;
        break label_39;
      }
      jj_consume_token(118);
      //check if the next variable is already used (look for it in the localVar HashMap)
      nextVar = getToken(1).image;
      if (localVar.get(nextVar) != null) {if (true) throw new ParseException("Error: The variable " + nextVar + " cannot be bound to a value in the ExistUniqueTerm. It is already used.");}
      variable = VariableTerm(localVar, true);
      jj_consume_token(IN);
      Logger.logDebug("\u005ctin");
      inTerm = Term(localVar, false, null);
      //set the reference to the variable
      variableList.add(variable);
      //create the association
      //X a_FinQuantT_Var.add(variable,term);
      //check constraint 2 of superclass(part of it is granted for construction)
      if (!(inTerm.getDomain() instanceof PowersetDomain)) {if (true) throw new ParseException("Error: The type-domain of terms after \u005c"in\u005c"  must be a power set domain \u005cn" + "       At an ExistUniqueTerm");}
      //update variable features
      Utility.updateVariable(variable, inTerm);
      Logger.logDebug("\u005ct\u005ct\u005ct" + variable.getName() + " updated: TD=" + variable.getDomain().getName() + ", kind=" + variable.getKind().toString());
      rangeList.add(inTerm);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WITH:
      jj_consume_token(WITH);
      Logger.logDebug("\u005ctwith");
      guard = Term(localVar, false, null);
      //set the reference
      term.setGuard(guard);
      //create associations
      //X AFiniteQuantificationTermGuard a_FinQuantT_Guard = termsPack.getFurtherTerms().getAFiniteQuantificationTermGuard();
      //X a_FinQuantT_Guard.add(guard,term);

      break;
    default:
      jj_la1[108] = jj_gen;
      ;
    }
    jj_consume_token(119);
    Logger.logDebug("\u005ct)\u005ct\u005ctExistUniqueTerm end");
    {if (true) return term;}
    throw new Error("Missing return statement in function");
  }

//NEW by Patrizia Added ranges
  final public ForallTerm ForallTerm(HashMap localVar) throws ParseException {
  VariableTerm variable;
  Term inTerm, guard;
    jj_consume_token(117);
    jj_consume_token(FORALL);
    Logger.logDebug("\u005ct(forall\u005ct\u005ctForallTerm beginning");
    ForallTerm term = termsPack.getFurtherTerms().createForallTerm();
    List < Term > rangeList = term.getRanges();
    //check if the next variable is already used (look for it in the localVar HashMap)
    String nextVar = getToken(1).image;
    if (localVar.get(nextVar) != null) {if (true) throw new ParseException("Error: The variable " + nextVar + " cannot be bound to a value in the ForallTerm. It is already used.");}
    variable = VariableTerm(localVar, true);
    jj_consume_token(IN);
    Logger.logDebug("\u005ctin");
    inTerm = Term(localVar, false, null);
    //set the reference to the variable
    Collection variableList = term.getVariable();
    variableList.add(variable);
    //check constraint 2 of superclass(part of it is granted for construction)
    if (!(inTerm.getDomain() instanceof PowersetDomain)) {if (true) throw new ParseException("Error: The type-domain of terms after \u005c"in\u005c"  must be a power set domain \u005cn" + "       At an ForallTerm");}
    //update variable features
    Utility.updateVariable(variable, inTerm);
    Logger.logDebug("\u005ct\u005ct\u005ct" + variable.getName() + " updated: TD=" + variable.getDomain().getName() + ", kind=" + variable.getKind().toString());
    rangeList.add(inTerm);
    label_40:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 118:
        ;
        break;
      default:
        jj_la1[109] = jj_gen;
        break label_40;
      }
      jj_consume_token(118);
      //check if the next variable is already used (look for it in the localVar HashMap)
      nextVar = getToken(1).image;
      if (localVar.get(nextVar) != null) {if (true) throw new ParseException("Error: The variable " + nextVar + " cannot be bound to a value in the ForallTerm. It is already used.");}
      variable = VariableTerm(localVar, true);
      jj_consume_token(IN);
      Logger.logDebug("\u005ctin");
      inTerm = Term(localVar, false, null);
      //set the reference to the variable
      variableList.add(variable);
      //check constraint 2 of superclass(part of it is granted for construction)
      if (!(inTerm.getDomain() instanceof PowersetDomain)) {if (true) throw new ParseException("Error: The type-domain of terms after \u005c"in\u005c"  must be a power set domain \u005cn" + "       At an ForallTerm");}
      //update variable features
      Utility.updateVariable(variable, inTerm);
      Logger.logDebug("\u005ct\u005ct\u005ct" + variable.getName() + " updated: TD=" + variable.getDomain().getName() + ", kind=" + variable.getKind().toString());
      rangeList.add(inTerm);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WITH:
      jj_consume_token(WITH);
      Logger.logDebug("\u005ctwith");
      guard = Term(localVar, false, null);
      //set the reference
      term.setGuard(guard);
      //create associations
      //X AFiniteQuantificationTermGuard a_FinQuantT_Guard = termsPack.getFurtherTerms().getAFiniteQuantificationTermGuard();
      //X a_FinQuantT_Guard.add(guard,term);

      break;
    default:
      jj_la1[110] = jj_gen;
      ;
    }
    jj_consume_token(119);
    Logger.logDebug("\u005ct)\u005ct\u005ctForallTerm end");
    {if (true) return term;}
    throw new Error("Missing return statement in function");
  }

  final public LetTerm LetTerm(HashMap localVar) throws ParseException {
  VariableTerm variable;
  Term assignT, body;
    jj_consume_token(LET);
    jj_consume_token(117);
    Logger.logDebug("\u005ctlet(\u005ct\u005ctLetTerm beginning");
    //check if the next variable is already used (look for it in the localVar HashMap)
    String nextVar = getToken(1).image;
    if (localVar.get(nextVar) != null) {if (true) throw new ParseException("Error: The variable " + nextVar + " cannot be bound to a value in the LetTerm. It is already used.");}
    variable = VariableTerm(localVar, true);
    jj_consume_token(EQ);
    Logger.logDebug("\u005ct=");
    assignT = Term(localVar, false, null);
    LetTerm term = termsPack.getFurtherTerms().createLetTerm();
    List variableList = term.getVariable();
    List assignTList = term.getAssignmentTerm();
    //ALetTermVariable a_letT_Var = termsPack.getFurtherTerms().getALetTermVariable();
    //ALetTermAssignmentTerm a_letT_assignT = termsPack.getFurtherTerms().getALetTermAssignmentTerm();
    //set variable TypeDomain         
    // FIXME 1/4/2009 the domain can be a concrete domain, not only a type domain!
    Domain varTD = null;
    if (assignT.getDomain() instanceof ConcreteDomain)
    {
      varTD = assignT.getDomain();
    }
    else
    {
      varTD = OCL_Checker.getTypeDomain(assignT.getDomain());
    }
    variable.setDomain(varTD);
    //set variable kind
    if (varTD instanceof RuleDomain) variable.setKind(VariableKind.RULE_VAR);
    //set references
    variableList.add(variable);
    assignTList.add(assignT);
    //create associations
    //a_letT_Var.add(variable,term);
    //a_letT_assignT.add(term,assignT);
    Logger.logDebug("\u005ct\u005ct\u005ct" + variable.getName() + " updated: TD=" + variable.getDomain().getName() + ", kind=" + variable.getKind().toString());
    label_41:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 118:
        ;
        break;
      default:
        jj_la1[111] = jj_gen;
        break label_41;
      }
      jj_consume_token(118);
      //check if the next variable is already used (look for it in the localVar HashMap)
      nextVar = getToken(1).image;
      if (localVar.get(nextVar) != null) {if (true) throw new ParseException("Error: The variable " + nextVar + " cannot be bound to a value in the LetTerm. It is already used.");}
      variable = VariableTerm(localVar, true);
      jj_consume_token(EQ);
      Logger.logDebug("\u005ct=");
      assignT = Term(localVar, false, null);
      // set variable TypeDomain
      //varTD = OCL_Checker.getTypeDomain(assignT.getDomain());
      varTD = null;
      if (assignT.getDomain() instanceof ConcreteDomain)
      {
        varTD = assignT.getDomain();
      }
      else
      {
        varTD = OCL_Checker.getTypeDomain(assignT.getDomain());
      }
      variable.setDomain(varTD);
      // set variable kind
      if (varTD instanceof RuleDomain) variable.setKind(VariableKind.RULE_VAR);
      //else kind=logicalVar (it has been setted when the variable term has been created)
      //set references
      variableList.add(variable);
      assignTList.add(assignT);
      //create associations
      //a_letT_Var.add(variable,term);
      //a_letT_assignT.add(term,assignT);
      Logger.logDebug("\u005ct\u005ct\u005ct" + variable.getName() + " updated: TD=" + variable.getDomain().getName() + ", kind=" + variable.getKind().toString());
    }
    jj_consume_token(119);
    Logger.logDebug("\u005ct)");
    jj_consume_token(IN);
    Logger.logDebug("\u005ctin");
    body = Term(localVar, false, null);
    jj_consume_token(ENDLET);
    //set the reference
    term.setBody(body);
    //create the association
    //XX ALetTermBody a_letT_body = termsPack.getFurtherTerms().getALetTermBody();
    //XX a_letT_body.add(term,body);
    //set LetTerm typeDomain
    TypeDomain td = OCL_Checker.getTypeDomain(body.getDomain());
    term.setDomain(td);
    //OCL constraint 1, 2, 3 granted for construction
    {
      Logger.logDebug("\u005ctendlet\u005ct\u005ctLetTerm end, TD=" + term.getDomain().getName());
    }
    {if (true) return term;}
    throw new Error("Missing return statement in function");
  }

  final public ComprehensionTerm ComprehensionTerm(HashMap localVar) throws ParseException {
  ComprehensionTerm t;
    if (jj_2_40(2147483647)) {
      t = SetCT(localVar);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 121:
        t = MapCT(localVar);
        break;
      case 126:
        t = SequenceCT(localVar);
        break;
      case LT:
        t = BagCT(localVar);
        break;
      default:
        jj_la1[112] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    //constraint 1 checked in the specific terms (SetCT, MapCT, SequenceCT, BagCT)
    //constraint 2 (check if the guard TypeDomain is the Boolean domain)
    if ((t.getGuard() != null) && (!OCL_Checker.isBoolean(t.getGuard())))
    {
      Logger.logErr("Error: The type-domain of terms after \u005c"with\u005c" must be the boolean domain\u005cn        At a comprehension term\u005cn");
    }
    {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

//NEW by Patrizia Added ranges.
  final public SetCt SetCT(HashMap localVar) throws ParseException {
  Term t, inTerm, guard;
  VariableTerm variable;
  SetCt term = termsPack.getFurtherTerms().createSetCt();
  List < Term > rangeList = term.getRanges();
    jj_consume_token(121);
    Logger.logDebug("\u005ct{\u005ct\u005ctSetCT beginning");
    variable = VariableTerm(localVar, true);
    jj_consume_token(IN);
    Logger.logDebug("\u005ctin");
    inTerm = Term(localVar, false, null);
    //if the TypeDomain associated to this variable is not ANY_DOMAIN then it has been used out of the Comprehensionterm
    if (!(variable.getDomain() instanceof AnyDomain)) {if (true) throw new ParseException("Error: The variable " + variable.getName() + " cannot be used within the setCT. It is already used.");}
    //set the reference to the variable
    Collection variableList = term.getVariable();
    variableList.add(variable);
    //create the association
    //X AComprehensionTermVariable a_Comp_Var = termsPack.getFurtherTerms().getAComprehensionTermVariable();
    //X a_Comp_Var.add(term,variable);
    //check constraint 2 (part of it is granted for construction)
    if (!(inTerm.getDomain() instanceof PowersetDomain)) {if (true) throw new ParseException("Error: The type-domain of terms after \u005c"in\u005c"  must be a power set domain \u005cn" + "       At a SetCT");}
    //update variable features
    Utility.updateVariable(variable, inTerm);
    Logger.logDebug("\u005ct\u005ct\u005ct" + variable.getName() + " updated: TD=" + variable.getDomain().getName() + ", kind=" + variable.getKind().toString());
    rangeList.add(inTerm);
    label_42:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 118:
        ;
        break;
      default:
        jj_la1[113] = jj_gen;
        break label_42;
      }
      jj_consume_token(118);
      variable = VariableTerm(localVar, true);
      jj_consume_token(IN);
      Logger.logDebug("\u005ctin");
      inTerm = Term(localVar, false, null);
      //if the TypeDomain associated to this variable is not ANY_DOMAIN then it has been used out of the Comprehensionterm
      if (!(variable.getDomain() instanceof AnyDomain)) {if (true) throw new ParseException("Error: The variable " + variable.getName() + " cannot be used within the setCT. It is already used.");}
      //set the reference to the variable
      variableList.add(variable);
      //create the association
      //X a_Comp_Var.add(term,variable);
      //check constraint 2 (part of it is granted for construction)
      if (!(inTerm.getDomain() instanceof PowersetDomain)) {if (true) throw new ParseException("Error: The type-domain of terms after \u005c"in\u005c"  must be a power set domain \u005cn" + "       At a SetCT");}
      //update variable features
      Utility.updateVariable(variable, inTerm);
      Logger.logDebug("\u005ct\u005ct\u005ct" + variable.getName() + " updated: TD=" + variable.getDomain().getName() + ", kind=" + variable.getKind().toString());
      rangeList.add(inTerm);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 122:
      jj_consume_token(122);
      Logger.logDebug("\u005ct|");
      guard = Term(localVar, false, null);
      //set the reference
      term.setGuard(guard);
      //set the association
      //X AComprehensionTermGuard a_Comp_Guard = termsPack.getFurtherTerms().getAComprehensionTermGuard();
      //X a_Comp_Guard.add(term,guard);

      break;
    default:
      jj_la1[114] = jj_gen;
      ;
    }
    jj_consume_token(120);
    Logger.logDebug("\u005ct:");
    t = Term(localVar, false, null);
    //set the reference
    term.setTerm(t);
    //set the association
    //X AComprehensionTermTerm a_Comp_Term = termsPack.getFurtherTerms().getAComprehensionTermTerm();
    //X a_Comp_Term.add(term,t);
    //check constraint 1 of the superclass (check elements type)
    if (!OCL_Checker.termAccepted(t)) {if (true) throw new ParseException(OCL_Checker.getMsgErr() + "\u005cn       At a SetComprehensionTerm.\u005cn");}
    jj_consume_token(123);
    // set TypeDomain
    TypeDomain td = Utility.getPowerset(OCL_Checker.getTypeDomain(t.getDomain()), defPack, header.getSignature());
    term.setDomain(td);
    //OCL constraint 1 granted for construction
    Logger.logDebug("\u005ct}\u005ct\u005ctSetCT end, TD=" + term.getDomain().getName());
    {if (true) return term;}
    throw new Error("Missing return statement in function");
  }

//NEW by Patrizia Added ranges.
  final public MapCt MapCT(HashMap localVar) throws ParseException {
  Term t1, t2, inTerm, guard;
  VariableTerm variable;
  List < Term > rangeList = new ArrayList < Term > ();
  MapCt term = termsPack.getFurtherTerms().createMapCt(rangeList);
    jj_consume_token(121);
    Logger.logDebug("\u005ct{\u005ct\u005ctMapCT beginning");
    variable = VariableTerm(localVar, true);
    jj_consume_token(IN);
    Logger.logDebug("\u005ctin");
    inTerm = Term(localVar, false, null);
    //if the TypeDomain associated to this variable is not ANY_DOMAIN then it has been used out of the Comprehensionterm
    if (!(variable.getDomain() instanceof AnyDomain)) {if (true) throw new ParseException("Error: The variable " + variable.getName() + " cannot be used within the mapCT. It is already used.");}
    //set the reference to the variable
    Collection variableList = term.getVariable();
    variableList.add(variable);
    //create the association
    //X AComprehensionTermVariable a_Comp_Var = termsPack.getFurtherTerms().getAComprehensionTermVariable();
    //X a_Comp_Var.add(term,variable);
    //check constraint 3 (part of it is granted for construction)
    if (!(inTerm.getDomain() instanceof PowersetDomain)) {if (true) throw new ParseException("Error: The type-domain of terms after \u005c"in\u005c"  must be a power set domain \u005cn" + "       At a MapCT");}
    //update variable features
    Utility.updateVariable(variable, inTerm);
    Logger.logDebug("\u005ct\u005ct\u005ct" + variable.getName() + " updated: TD=" + variable.getDomain().getName() + ", kind=" + variable.getKind().toString());
    rangeList.add(inTerm);
    label_43:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 118:
        ;
        break;
      default:
        jj_la1[115] = jj_gen;
        break label_43;
      }
      jj_consume_token(118);
      variable = VariableTerm(localVar, true);
      jj_consume_token(IN);
      Logger.logDebug("\u005ctin");
      inTerm = Term(localVar, false, null);
      //if the TypeDomain associated to this variable is not ANY_DOMAIN then it has been used out of the Comprehensionterm
      if (!(variable.getDomain() instanceof AnyDomain)) {if (true) throw new ParseException("Error: The variable " + variable.getName() + " cannot be used within the mapCT. It is already used.");}
      //set the reference to the variable
      variableList.add(variable);
      //create the association
      //X a_Comp_Var.add(term,variable);
      //check constraint 3 (part of it is granted for construction)
      if (!(inTerm.getDomain() instanceof PowersetDomain)) {if (true) throw new ParseException("Error: The type-domain of terms after \u005c"in\u005c"  must be a power set domain \u005cn" + "       At a MapCT");}
      //update variable features
      Utility.updateVariable(variable, inTerm);
      Logger.logDebug("\u005ct\u005ct\u005ct" + variable.getName() + " updated: TD=" + variable.getDomain().getName() + ", kind=" + variable.getKind().toString());
      rangeList.add(inTerm);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 122:
      jj_consume_token(122);
      Logger.logDebug("\u005ct|");
      guard = Term(localVar, false, null);
      //set the reference
      term.setGuard(guard);
      //set the association
      //X AComprehensionTermGuard a_Comp_Guard = termsPack.getFurtherTerms().getAComprehensionTermGuard();
      //X a_Comp_Guard.add(term,guard);

      break;
    default:
      jj_la1[116] = jj_gen;
      ;
    }
    jj_consume_token(120);
    Logger.logDebug("\u005ct:");
    t1 = Term(localVar, false, null);
    jj_consume_token(124);
    Logger.logDebug("\u005ct->");
    t2 = Term(localVar, false, null);
    jj_consume_token(122);
    Logger.logDebug("\u005ct|");
    //create a new pair
    TupleTerm pair = Utility.createPair(t1, t2, termsPack, defPack, header.getSignature());
    //set the reference
    term.setTerm(pair);
    //set the association
    //X AComprehensionTermTerm a_Comp_Term = termsPack.getFurtherTerms().getAComprehensionTermTerm();
    //X a_Comp_Term.add(term,pair);

    jj_consume_token(123);
    // set TypeDomain
    TypeDomain td = Utility.getMap(OCL_Checker.getTypeDomain(t1.getDomain()), OCL_Checker.getTypeDomain(t2.getDomain()), defPack, header.getSignature());
    term.setDomain(td);
    //OCL constraints 1, 2 granted for construction
    Logger.logDebug("\u005ct}\u005ct\u005ctMapCTend, TD=" + term.getDomain().getName());
    {if (true) return term;}
    throw new Error("Missing return statement in function");
  }

  final public SequenceCt SequenceCT(HashMap localVar) throws ParseException {
  //Notation  [D | P : E] where D are variable declarations, P is the property, E is the espression.
  //P is optional, if not present: [D : E]
  Term t, inTerm, guard;
  VariableTerm variable;
  SequenceCt term = termsPack.getFurtherTerms().createSequenceCt();
  List < Term > rangeList = term.getRanges();
    jj_consume_token(126);
    Logger.logDebug("\u005ct[\u005ct\u005ctSequenceCT beginning");
    variable = VariableTerm(localVar, true);
    jj_consume_token(IN);
    Logger.logDebug("\u005ctin");
    inTerm = Term(localVar, false, null);
    //if the TypeDomain associated to this variable is not ANY_DOMAIN then it has been used out of the Comprehensionterm
    if (!(variable.getDomain() instanceof AnyDomain)) {if (true) throw new ParseException("Error: The variable " + variable.getName() + " cannot be used within the SequenceCT. It is already used.");}
    //set the reference to the variable
    Collection variableList = term.getVariable();
    variableList.add(variable);
    //create the association
    //X AComprehensionTermVariable a_Comp_Var = termsPack.getFurtherTerms().getAComprehensionTermVariable();
    //X a_Comp_Var.add(term,variable);
    //check constraint 2 (part of it is granted for construction)
    if (!(inTerm.getDomain() instanceof SequenceDomain)) {if (true) throw new ParseException("Error: The type-domain of terms after \u005c"in\u005c"  must be a sequence domain \u005cn" + "       At a SequenceCT");}
    //update variable features
    Utility.updateVariable(variable, inTerm);
    Logger.logDebug("\u005ct\u005ct\u005ct" + variable.getName() + " updated: TD=" + variable.getDomain().getName() + ", kind=" + variable.getKind().toString());
    rangeList.add(inTerm);
    label_44:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 118:
        ;
        break;
      default:
        jj_la1[117] = jj_gen;
        break label_44;
      }
      jj_consume_token(118);
      variable = VariableTerm(localVar, true);
      jj_consume_token(IN);
      Logger.logDebug("\u005ctin");
      inTerm = Term(localVar, false, null);
      //if the TypeDomain associated to this variable is not ANY_DOMAIN then it has been used out of the Comprehensionterm
      if (!(variable.getDomain() instanceof AnyDomain)) {if (true) throw new ParseException("Error: The variable " + variable.getName() + " cannot be used within the SequenceCT. It is already used.");}
      //set the reference to the variable
      variableList.add(variable);
      //create the association
      //X a_Comp_Var.add(term,variable);
      //check constraint 2 (part of it is granted for construction)
      if (!(inTerm.getDomain() instanceof SequenceDomain)) {if (true) throw new ParseException("Error: The type-domain of terms after \u005c"in\u005c"  must be a sequence domain \u005cn" + "       At a SequenceCT");}
      //update variable features
      Utility.updateVariable(variable, inTerm);
      Logger.logDebug("\u005ct\u005ct\u005ct" + variable.getName() + " updated: TD=" + variable.getDomain().getName() + ", kind=" + variable.getKind().toString());
      rangeList.add(inTerm);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 122:
      jj_consume_token(122);
      Logger.logDebug("\u005ct|");
      guard = Term(localVar, false, null);
      //set the reference
      term.setGuard(guard);
      //set the association
      //AComprehensionTermGuard a_Comp_Guard = termsPack.getFurtherTerms().getAComprehensionTermGuard();
      //a_Comp_Guard.add(term,guard);

      break;
    default:
      jj_la1[118] = jj_gen;
      ;
    }
    jj_consume_token(120);
    Logger.logDebug("\u005ct:");
    t = Term(localVar, false, null);
    //set the expression reference
    term.setTerm(t);
    //set the association
    //X AComprehensionTermTerm a_Comp_Term = termsPack.getFurtherTerms().getAComprehensionTermTerm();
    //X a_Comp_Term.add(term,t);
    //check constraint 1 of the superclass (check elements type)
    if (!OCL_Checker.termAccepted(t)) {if (true) throw new ParseException(OCL_Checker.getMsgErr() + "\u005cn       At a sequence-comprehension term.\u005cn");}
    jj_consume_token(128);
    // set TypeDomain
    TypeDomain td = Utility.getSequence(OCL_Checker.getTypeDomain(t.getDomain()), defPack, header.getSignature());
    term.setDomain(td);
    //OCL constraint 1 granted for construction
    Logger.logDebug("\u005ct]\u005ct\u005ctSequenceCT end, TD=" + term.getDomain().getName());
    {if (true) return term;}
    throw new Error("Missing return statement in function");
  }

//NEW by Patrizia Added ranges
  final public BagCt BagCT(HashMap localVar) throws ParseException {
  Term t, inTerm, guard;
  VariableTerm variable;
  BagCt term = termsPack.getFurtherTerms().createBagCt();
  List < Term > rangeList = term.getRanges();
    jj_consume_token(LT);
    Logger.logDebug("\u005ct<\u005ct\u005ctBagCT beginning");
    variable = VariableTerm(localVar, true);
    jj_consume_token(IN);
    Logger.logDebug("\u005ctin");
    inTerm = Term(localVar, false, null);
    //if the TypeDomain associated to this variable is not ANY_DOMAIN then it has been used out of the Comprehensionterm
    if (!(variable.getDomain() instanceof AnyDomain)) {if (true) throw new ParseException("Error: The variable " + variable.getName() + " cannot be used within the BagCT. It is already used.");}
    //set the reference to the variable
    Collection variableList = term.getVariable();
    variableList.add(variable);
    //create the association
    //X AComprehensionTermVariable a_Comp_Var = termsPack.getFurtherTerms().getAComprehensionTermVariable();
    //X a_Comp_Var.add(term,variable);
    //check constraint 2 (part of it is granted for construction)
    if (!(inTerm.getDomain() instanceof BagDomain)) {if (true) throw new ParseException("Error: The type-domain of terms after \u005c"in\u005c"  must be a bag domain \u005cn" + "       At a BagCT");}
    //update variable features
    Utility.updateVariable(variable, inTerm);
    Logger.logDebug("\u005ct\u005ct\u005ct" + variable.getName() + " updated: TD=" + variable.getDomain().getName() + ", kind=" + variable.getKind().toString());
    rangeList.add(inTerm);
    label_45:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 118:
        ;
        break;
      default:
        jj_la1[119] = jj_gen;
        break label_45;
      }
      jj_consume_token(118);
      variable = VariableTerm(localVar, true);
      jj_consume_token(IN);
      Logger.logDebug("\u005ctin");
      inTerm = Term(localVar, false, null);
      //if the TypeDomain associated to this variable is not ANY_DOMAIN then it has been used out of the Comprehensionterm
      if (!(variable.getDomain() instanceof AnyDomain)) {if (true) throw new ParseException("Error: The variable " + variable.getName() + " cannot be used within the BagCT. It is already used.");}
      //set the reference to the variable
      variableList.add(variable);
      //create the association
      //X a_Comp_Var.add(term,variable);
      //check constraint 2 (part of it is granted for construction)
      if (!(inTerm.getDomain() instanceof BagDomain)) {if (true) throw new ParseException("Error: The type-domain of terms after \u005c"in\u005c"  must be a bag domain \u005cn" + "       At a BagCT");}
      //update variable features
      Utility.updateVariable(variable, inTerm);
      Logger.logDebug("\u005ct\u005ct\u005ct" + variable.getName() + " updated: TD=" + variable.getDomain().getName() + ", kind=" + variable.getKind().toString());
      rangeList.add(inTerm);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 122:
      jj_consume_token(122);
      Logger.logDebug("\u005ct|");
      guard = Term(localVar, false, null);
      //set the reference
      term.setGuard(guard);
      //set the association
      //AComprehensionTermGuard a_Comp_Guard = termsPack.getFurtherTerms().getAComprehensionTermGuard();
      //a_Comp_Guard.add(term,guard);

      break;
    default:
      jj_la1[120] = jj_gen;
      ;
    }
    jj_consume_token(120);
    Logger.logDebug("\u005ct:");
    t = Term(localVar, false, null);
    //set the reference
    term.setTerm(t);
    //set the association
    //X AComprehensionTermTerm a_Comp_Term = termsPack.getFurtherTerms().getAComprehensionTermTerm();
    //X a_Comp_Term.add(term,t);
    //check constraint 1 of the superclass (check elements type)
    if (!OCL_Checker.termAccepted(t)) {if (true) throw new ParseException(OCL_Checker.getMsgErr() + "\u005cn       At a bag-comprehension term.\u005cn");}
    jj_consume_token(GT);
    // set TypeDomain
    TypeDomain td = Utility.getBag(OCL_Checker.getTypeDomain(t.getDomain()), defPack, header.getSignature());
    term.setDomain(td);
    //OCL constraint 1 granted for construction
    Logger.logDebug("\u005ct>\u005ct\u005ctBagCT end, TD=" + term.getDomain().getName());
    {if (true) return term;}
    throw new Error("Missing return statement in function");
  }

  final public DomainTerm DomainTerm() throws ParseException {
  Domain d;
    d = getDomainByID();
    //create the object
    DomainTerm term = termsPack.getBasicTerms().createDomainTerm();
    //set references
    term.setDomain(d);
    //set the TypeDomain
    PowersetDomain powersetDom = Utility.getPowerset(d, defPack, header.getSignature());
    //set references
    term.setDomain(powersetDom);
    //OCL constraint 1 granted for construction
    Logger.logDebug("\u005ct" + d.getName() + "\u005ct\u005ctDomainTerm, D=" + term.getDomain().getName());
    {if (true) return term;}
    throw new Error("Missing return statement in function");
  }

/*
* modified 10 Jan 2008 by acarioni
*
*/
  final public RuleAsTerm RuleAsTerm(HashMap localVar, RuleDeclaration c, Domain expDom) throws ParseException {
  RuleDeclaration r;
  Object [ ] dcl;
  String ruleName;
  List < Domain > ruleDomList;
    jj_consume_token(129);
    Logger.logDebug("\u005ct<<\u005ct\u005ctRuleAsTerm beginning");
    // ruleName=ID_RULE()
      dcl = MacroDcl();
    ruleName = (String) dcl [ 0 ];
    ruleDomList = (List < Domain >) dcl [ 1 ];
    jj_consume_token(130);
    Logger.logDebug("\u005ct>>\u005ct");
    RuleAsTerm term = termsPack.getBasicTerms().createRuleAsTerm();
    /* commented 10 Jan 2008 by acarioni
      //look for the Rule domain reference; it is created in case it does note yet exist
      // convert expDomn to RuleDomain
	  RuleDomain rDom = (RuleDomain) expDom;
      List<Domain> ruleDomList = null;
      if(rDom.getDomains()!=null){
            ruleDomList = new LinkedList();
      		for(Object o : rDom.getDomains()){
	  			Domain d = MDRConnector.toDomain(o);
				ruleDomList.add(d);
	  		}
      }
      */
    //look for the rule declaration in the rule HashMap
    r = Utility.getRuleByNameDom(declared_Rules, ruleName, ruleDomList);
    if (r == null)
    {
      {if (true) throw new ParseException("ERROR: Unresolved reference to " + ruleName + Utility.toString(ruleDomList));}
    }
    //set the rule reference
    term.setRule(r);
    RuleDomain dom = Utility.getRuleDomain(ruleDomList, defPack, header.getSignature());
    //set the domain reference
    term.setDomain(dom);
    Logger.logDebug("\u005ctRuleAsTerm end, TD=" + dom.getName());
    {if (true) return term;}
    throw new Error("Missing return statement in function");
  }

/*
* added 10 Jan 2008 by acarioni
*
* Returns a 2-value array containing a macro rule name and a list of domains
* as the formal parameter domains.
* It is used by RuleAsTerm.
*
*/
  final public Object [ ] MacroDcl() throws ParseException {
  Logger.logDebug("begin - macro rule in RuleAsTerm");
  String ruleName;
  Domain inDom;
  List < Domain > domains = new ArrayList < Domain > ();
    ruleName = ID_RULE();
    Logger.logDebug("\u005ct" + ruleName);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 117:
      Logger.logDebug("domains: ");
      jj_consume_token(117);
      inDom = getDomainByID();
      //add it to the list
      domains.add(inDom);
      Logger.logDebug("\u005ct" + inDom.getName());
      label_46:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 118:
          ;
          break;
        default:
          jj_la1[121] = jj_gen;
          break label_46;
        }
        jj_consume_token(118);
        inDom = getDomainByID();
        //add it to the list
        domains.add(inDom);
        Logger.logDebug("\u005ct" + inDom.getName());
      }
      jj_consume_token(119);
      break;
    default:
      jj_la1[122] = jj_gen;
      ;
    }
    Logger.logDebug("end - macro rule in RuleAsTerm");
    {if (true) return new Object [ ]
    {
      ruleName, domains
    }
    ;}
    throw new Error("Missing return statement in function");
  }

////////////////////////////////////// RULES ////////////////////////////////////////////
  final public Rule Rule(HashMap localVar, RuleDeclaration c) throws ParseException {
  Rule r;
    if (jj_2_41(2147483647)) {
      r = DelayedRule(localVar, c);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DYNAMIC:
      case IF:
      case SWITCH:
      case LET:
      case FORALL:
      case Skip:
      case PAR:
      case CHOOSE:
      case EXTEND:
      case seq:
      case ITERATE:
      case LOCAL:
      case WHILE:
      case WHILEREC:
      case ID_VARIABLE:
      case ID_RULE:
      case ID_FUNCTION:
        r = OtherRule(localVar, c);
        break;
      default:
        jj_la1[123] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

//OK! No derived rules
  final public Rule OtherRule(HashMap localVar, RuleDeclaration c) throws ParseException {
  Rule r;
    if (jj_2_42(2)) {
      r = BasicRule(localVar, c);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DYNAMIC:
      case seq:
      case ITERATE:
      case LOCAL:
      case ID_RULE:
        r = TurboRule(localVar, c);
        break;
      default:
        jj_la1[124] = jj_gen;
        if (jj_2_43(2147483647)) {
          r = UpdateRule(localVar, c);
        } else if (jj_2_44(2147483647)) {
          r = TurboReturnRule(localVar, c);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ID_VARIABLE:
          case ID_FUNCTION:
            r = TermAsRule(localVar, c);
            break;
          case SWITCH:
          case WHILE:
          case WHILEREC:
            r = DerivedRule(localVar, c);
            break;
          default:
            jj_la1[125] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
    {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

//OK!
  final public TermAsRule TermAsRule(HashMap localVar, RuleDeclaration c) throws ParseException {
  Logger.logDebug("\u005ct\u005ct\u005ctTermAsRule beginning");
  Term par, t = null;
  TermAsRule rule = rulesPack.getBasicTransitionRules().createTermAsRule();
  List < Term > actualParamList = rule.getParameters();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID_FUNCTION:
      t = FunctionTerm(localVar, false);
      break;
    case ID_VARIABLE:
      t = VariableTerm(localVar, false);
      break;
    default:
      jj_la1[126] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 126:
      jj_consume_token(126);
      Logger.logDebug("\u005ct[");
      par = Term(localVar, false, c);
      actualParamList.add(par);
      label_47:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 118:
          ;
          break;
        default:
          jj_la1[127] = jj_gen;
          break label_47;
        }
        jj_consume_token(118);
        par = Term(localVar, false, c);
        actualParamList.add(par);
      }
      jj_consume_token(128);
      break;
    default:
      jj_la1[128] = jj_gen;
      ;
    }
    //set the references
    rule.setTerm(t);
    // check OCL constraint
    if (!OCL_Checker.checkTermAsRule(rule)) {if (true) throw new ParseException(OCL_Checker.getMsgErr() + "\u005cn       At a RuleAsTerm");}
    Logger.logDebug("\u005ct\u005ct\u005ctTermAsRule end");
    {if (true) return rule;}
    throw new Error("Missing return statement in function");
  }

  final public Rule BasicRule(HashMap localVar, RuleDeclaration c) throws ParseException {
  Rule r;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Skip:
      r = SkipRule();
      break;
    case ID_RULE:
      r = MacroCallRule(localVar, c);
      break;
    case PAR:
      r = BlockRule(localVar, c);
      break;
    case IF:
      r = ConditionalRule(localVar, c);
      break;
    case CHOOSE:
      r = ChooseRule(localVar, c);
      break;
    case FORALL:
      r = ForallRule(localVar, c);
      break;
    case LET:
      r = LetRule(localVar, c);
      break;
    case EXTEND:
      r = ExtendRule(localVar, c);
      break;
    default:
      jj_la1[129] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

///////////////////////// BASIC RULES //////////////////////////////////////////
//OK!
  final public SkipRule SkipRule() throws ParseException {
  SkipRule rule;
    jj_consume_token(Skip);
    Logger.logDebug("\u005ctskip\u005ct\u005ctSkipRule");
    rule = rulesPack.getBasicTransitionRules().createSkipRule();
    {if (true) return rule;}
    throw new Error("Missing return statement in function");
  }

/* build an updateRule*/
  final public UpdateRule UpdateRule(HashMap localVar, RuleDeclaration c) throws ParseException {
  Term loc = null;
  Term updatingT;
    Logger.logDebug("\u005ct\u005ct\u005ctUpdateRule beginning");
    //create the object
    UpdateRule rule = rulesPack.getBasicTransitionRules().createUpdateRule();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID_FUNCTION:
      loc = LocationTerm(localVar, false);
      //set the reference to the location to be updated
      rule.setLocation(loc);
      break;
    case ID_VARIABLE:
      loc = VariableTerm(localVar, false);
      //set the reference to the variable
      VariableTerm locVar = (VariableTerm) loc;
      rule.setLocation(locVar);
      // check and update the variable kind
      if (locVar.getKind() == VariableKind.LOGICAL_VAR)
      {
        locVar.setKind(VariableKind.LOCATION_VAR);
        Logger.logDebug("\u005ct\u005ct\u005ct" + locVar.getName() + " updated: TD=" + locVar.getDomain().getName() + ", kind=" + locVar.getKind().toString());
      }
      else if (locVar.getKind() == VariableKind.RULE_VAR) {if (true) throw new ParseException("Error: In an Updating rule, the variable to update must be a location variable, not a rule variable. ");}
      break;
    default:
      jj_la1[130] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(131);
    Logger.logDebug("\u005ct:=");
    updatingT = TermForUpdateRule(localVar, false, c, loc.getDomain());
    assert updatingT != null;
    //set the references
    rule.setUpdatingTerm(updatingT);
    // OCL check R1
    //NEW by Patrizia to allow result:=... to pass constraint R1
    //****
    if (loc != null && (loc instanceof LocationTerm) && ((LocationTerm) loc).getFunction().getName().equals("result"))
    {
      rule.getLocation().setDomain(rule.getUpdatingTerm().getDomain());
      Logger.logDebug("\u005ct\u005ct\u005ct Location term \u005c"result\u005c" updated: TD=" + rule.getUpdatingTerm().getDomain().getName());
    }
    //****
    if (!OCL_Checker.checkUpdateRule(rule)) {if (true) throw new ParseException(OCL_Checker.getMsgErr() + "\u005cn       At the application of the update-rule.\u005cn"+c);}
    Logger.logDebug("\u005ct\u005ct\u005ctUpdateRule end");
    {if (true) return rule;}
    throw new Error("Missing return statement in function");
  }

//OK (a parte controllare il metamodello)
  final public BlockRule BlockRule(HashMap localVar, RuleDeclaration c) throws ParseException {
  Rule r;
    jj_consume_token(PAR);
    Logger.logDebug("\u005ctpar\u005ct\u005ctBlockRule beginning");
    BlockRule rule = rulesPack.getBasicTransitionRules().createBlockRule();
    List < Rule > rulesList = rule.getRules();
    r = Rule(localVar, c);
    //set the reference
    rulesList.add(r);
    label_48:
    while (true) {
      r = Rule(localVar, c);
      //set the reference
      rulesList.add(r);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DYNAMIC:
      case IF:
      case SWITCH:
      case LET:
      case FORALL:
      case Skip:
      case PAR:
      case CHOOSE:
      case EXTEND:
      case seq:
      case ITERATE:
      case LOCAL:
      case WHILE:
      case WHILEREC:
      case ID_VARIABLE:
      case ID_RULE:
      case ID_FUNCTION:
        ;
        break;
      default:
        jj_la1[131] = jj_gen;
        break label_48;
      }
    }
    jj_consume_token(ENDPAR);
    Logger.logDebug("\u005ctendpar\u005ct\u005ctBlockRule end\u005cn");
    {if (true) return rule;}
    throw new Error("Missing return statement in function");
  }

//OK!
  final public ConditionalRule ConditionalRule(HashMap localVar, RuleDeclaration c) throws ParseException {
  Rule thenR, elseR;
  Term guard;
    jj_consume_token(IF);
    Logger.logDebug("\u005ctif\u005ct\u005ctConditionalRule beginning");
    guard = Term(localVar, false, c);
    jj_consume_token(THEN);
    Logger.logDebug("\u005ctthen");
    thenR = Rule(localVar, c);
    ConditionalRule rule = rulesPack.getBasicTransitionRules().createConditionalRule();
    //set references
    rule.setGuard(guard);
    rule.setThenRule(thenR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      Logger.logDebug("\u005ctelse");
      elseR = Rule(localVar, c);
      //set the reference
      rule.setElseRule(elseR);
      break;
    default:
      jj_la1[132] = jj_gen;
      ;
    }
    jj_consume_token(ENDIF);
    //(OCL constraints 1) check if the guard TypeDomain is the Boolean domain
    if (!OCL_Checker.isBoolean(guard))
    {
      //PA 31 gen 2011. commentato logger ed introdotta ParseException
      //Logger.logErr("Error: In a conditional rule the type-domain associated to the term after \"if\" must be the Boolean domain.");
      {if (true) throw new ParseException("Error: In a conditional rule the type-domain associated to the term after \u005c"if\u005c" must be the Boolean domain.");}
    }
    Logger.logDebug("\u005ctendif\u005ct\u005ctConditionalRule end");
    {if (true) return rule;}
    throw new Error("Missing return statement in function");
  }

//OK!!
  final public DelayedRule DelayedRule(HashMap localVar, RuleDeclaration c) throws ParseException {
  Rule thenR;
  long guard;
  Token t;
    Logger.logDebug("\u005ctaif\u005ct\u005ctDelayedRule beginning");
    thenR = OtherRule(localVar, c);
    jj_consume_token(COMMA);
    Logger.logDebug("\u005ct;");
    t = jj_consume_token(NUMBER);
    guard = Long.parseLong( t.image );
    DelayedRule rule = rulesPack.getBasicTransitionRules().createDelayedRule();
    //set references
    rule.setGuard(guard);
    rule.setThenRule(thenR);
   //(OCL constraints 1) check if the guard TypeDomain is the Integer domain
    if (!OCL_Checker.isLong(guard))
    {
      {if (true) throw new ParseException("Error: In a delayed rule the type-domain associated to the term after \u005c";\u005c" must be the Unsigned Integer domain.");}
    }
    Logger.logDebug("\u005ct\u005ct\u005ctDelayedRule end");
    {if (true) return rule;}
    throw new Error("Missing return statement in function");
  }

//NEW by Patrizia Added ranges. Please don't touch!
  final public ChooseRule ChooseRule(HashMap localVar, RuleDeclaration c) throws ParseException {
  VariableTerm variable;
  Term inTerm, guard;
  Rule doRule, ifnone;
    jj_consume_token(CHOOSE);
    Logger.logDebug("\u005ctchoose\u005ct\u005ctChooseRule beginning");
    ChooseRule rule = rulesPack.getBasicTransitionRules().createChooseRule();
    List < Term > rangeList = rule.getRanges();
    //check if the next variable is already used (look for it in the localVar HashMap)
    String nextVar = getToken(1).image;
    if (localVar.get(nextVar) != null) {if (true) throw new ParseException("Error: The variable " + nextVar + " cannot be bound to a value in the ChooseRule. It is already used.");}
    variable = VariableTerm(localVar, true);
    jj_consume_token(IN);
    Logger.logDebug("\u005ctin");
    inTerm = Term(localVar, false, c);
    //set the reference to the variable
    Collection variableList = rule.getVariable();
    variableList.add(variable);
    //check constraint R7
    if (!(OCL_Checker.getTypeDomain(inTerm.getDomain()) instanceof PowersetDomain)) {if (true) throw new ParseException("Error: The type-domain of terms after \u005c"in\u005c"  must be a power set domain \u005cn" + "       At a ChooseRule");}
    //update variable features
    Utility.updateVariable(variable, inTerm);
    Logger.logDebug("\u005ct\u005ct\u005ct" + variable.getName() + " updated: D=" + variable.getDomain().getName() + ", kind=" + variable.getKind().toString());
    //set the reference to the variable range
    rangeList.add(inTerm);
    //Constraints R10, R8 granted for construction

    label_49:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 118:
        ;
        break;
      default:
        jj_la1[133] = jj_gen;
        break label_49;
      }
      jj_consume_token(118);
      //check if the next variable is already used (look for it in the localVar HashMap)
      nextVar = getToken(1).image;
      if (localVar.get(nextVar) != null) {if (true) throw new ParseException("Error: The variable " + nextVar + " cannot be bound to a value in the ChooseRule. It is already used.");}
      variable = VariableTerm(localVar, true);
      jj_consume_token(IN);
      Logger.logDebug("\u005ctin");
      inTerm = Term(localVar, false, c);
      //set the reference to the variable
      variableList.add(variable);
      if (!(OCL_Checker.getTypeDomain(inTerm.getDomain()) instanceof PowersetDomain)) {if (true) throw new ParseException("Error: The type-domain of terms after \u005c"in\u005c"  must be a power set domain \u005cn" + "       At a ChooseRule");}
      //update variable features
      Utility.updateVariable(variable, inTerm);
      Logger.logDebug("\u005ct\u005ct\u005ct" + variable.getName() + " updated: TD=" + variable.getDomain().getName() + ", kind=" + variable.getKind().toString());
      //set the reference to the variable range
      rangeList.add(inTerm);
      //Constraints R10, R8 granted for construction

    }
    jj_consume_token(WITH);
    Logger.logDebug("\u005ctwith");
    guard = Term(localVar, false, c);
    //set the reference to the guard
    rule.setGuard(guard);
    //Check constraint R9
    if (!OCL_Checker.isBoolean(guard))
    {
      Logger.logErr("Error: In a ChooseRule the type-domain associated to the term after \u005c"with\u005c" must be the Boolean domain");
    }
    jj_consume_token(DO);
    Logger.logDebug("\u005ctdo");
    doRule = Rule(localVar, c);
    //set the reference to the body rule
    rule.setDoRule(doRule);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IFNONE:
      jj_consume_token(IFNONE);
      Logger.logDebug("\u005ctifnone");
      ifnone = Rule(localVar, c);
      //set the reference to the ifnone rule
      rule.setIfnone(ifnone);
      break;
    default:
      jj_la1[134] = jj_gen;
      ;
    }
    Logger.logDebug("\u005ct\u005ct\u005ctChooseRule end");
    {if (true) return rule;}
    throw new Error("Missing return statement in function");
  }

//NEW by Patrizia Added ranges. Please don't touch!
  final public ForallRule ForallRule(HashMap localVar, RuleDeclaration c) throws ParseException {
  VariableTerm variable;
  Term inTerm, guard;
  Rule doRule;
    jj_consume_token(FORALL);
    Logger.logDebug("\u005ctforall\u005ct\u005ctForallRule beginning");
    ForallRule rule = rulesPack.getBasicTransitionRules().createForallRule();
    List < Term > rangeList = rule.getRanges();
    //check if the next variable is already used (look for it in the localVar HashMap)
    String nextVar = getToken(1).image;
    if (localVar.get(nextVar) != null) {if (true) throw new ParseException("Error: The variable " + nextVar + " cannot be bound to a value in the ForallRule. It is already used.");}
    variable = VariableTerm(localVar, true);
    jj_consume_token(IN);
    Logger.logDebug("\u005ctin");
    inTerm = Term(localVar, false, c);
    //set the reference to the variable
    Collection variableList = rule.getVariable();
    variableList.add(variable);
    //check constraint 1 (part of it is granted for construction)
    if (!(inTerm.getDomain() instanceof PowersetDomain)) {if (true) throw new ParseException("Error: The type-domain of terms after \u005c"in\u005c"  must be a power set domain \u005cn" + "       At a ForallRule");}
    //update variable features
    Utility.updateVariable(variable, inTerm);
    Logger.logDebug("\u005ct\u005ct\u005ct" + variable.getName() + " updated: TD=" + variable.getDomain().getName() + ", kind=" + variable.getKind().toString());
    //set the reference to the variable range
    rangeList.add(inTerm);
    label_50:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 118:
        ;
        break;
      default:
        jj_la1[135] = jj_gen;
        break label_50;
      }
      jj_consume_token(118);
      //check if the next variable is already used (look for it in the localVar HashMap)
      nextVar = getToken(1).image;
      if (localVar.get(nextVar) != null) {if (true) throw new ParseException("Error: The variable " + nextVar + " cannot be bound to a value in the ForallRule. It is already used.");}
      variable = VariableTerm(localVar, true);
      jj_consume_token(IN);
      Logger.logDebug("\u005ctin");
      inTerm = Term(localVar, false, c);
      //set the reference to the variable
      variableList.add(variable);
      //check constraint 1 (part of it is granted for construction)
      if (!(inTerm.getDomain() instanceof PowersetDomain)) {if (true) throw new ParseException("Error: The type-domain of terms after \u005c"in\u005c"  must be a power set domain \u005cn" + "       At a ForallRule");}
      //update variable features
      Utility.updateVariable(variable, inTerm);
      Logger.logDebug("\u005ct\u005ct\u005ct" + variable.getName() + " updated: TD=" + variable.getDomain().getName() + ", kind=" + variable.getKind().toString());
      //set the reference to the variable range
      rangeList.add(inTerm);
    }
    guard = termsPack.getBasicTerms().createBooleanTerm(true);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WITH:
      jj_consume_token(WITH);
      Logger.logDebug("\u005ctwith");
      guard = Term(localVar, false, c);
      //(OCL constraints 2) check if the guard TypeDomain is the Boolean domain
      if (!OCL_Checker.isBoolean(guard))
      {
        Logger.logErr("Error: In a ForallRule the type-domain associated to the term after \u005c"with\u005c" must be the Boolean domain");
      }
      break;
    default:
      jj_la1[136] = jj_gen;
      ;
    }
    //set the reference
    rule.setGuard(guard);
    jj_consume_token(DO);
    Logger.logDebug("\u005ctdo");
    doRule = Rule(localVar, c);
    //set the reference
    rule.setDoRule(doRule);
    Logger.logDebug("\u005ct\u005ct\u005ctForallRule end");
    {if (true) return rule;}
    throw new Error("Missing return statement in function");
  }

// DA CONTROLLARE IL METAMODELLO
  final public LetRule LetRule(HashMap localVar, RuleDeclaration c) throws ParseException {
  VariableTerm variable;
  Term initExp;
  Rule inRule;
    jj_consume_token(LET);
    jj_consume_token(117);
    Logger.logDebug("\u005ctlet(\u005ct\u005ctLetRule beginning");
    //check if the next variable is already used (look for it in the localVar HashMap)
    String nextVar = getToken(1).image;
    if (localVar.get(nextVar) != null) {if (true) throw new ParseException("Error: The variable " + nextVar + " cannot be bound to a value in the LetRule. It is already used.");}
    variable = VariableTerm(localVar, true);
    jj_consume_token(EQ);
    Logger.logDebug("\u005ct=");
    initExp = Term(localVar, false, c);
    LetRule rule = rulesPack.getBasicTransitionRules().createLetRule();
    List < VariableTerm > variableList = rule.getVariable();
    List < Term > initExpList = rule.getInitExpression();
    Domain varD;
    //set variable TypeDomain
    varD = initExp.getDomain();
    variable.setDomain(varD);
    //set variable kind
    if (varD instanceof RuleDomain) variable.setKind(VariableKind.RULE_VAR);
    //set references
    variableList.add(variable);
    initExpList.add(initExp);
    Logger.logDebug("\u005ct\u005ct\u005ct" + variable.getName() + " updated: D=" + variable.getDomain().getName() + ", kind=" + variable.getKind().toString());
    label_51:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 118:
        ;
        break;
      default:
        jj_la1[137] = jj_gen;
        break label_51;
      }
      jj_consume_token(118);
      nextVar = getToken(1).image;
      if (localVar.get(nextVar) != null) {if (true) throw new ParseException("Error: The variable " + nextVar + " cannot be bound to a value in the LetRule. It is already used.");}
      variable = VariableTerm(localVar, true);
      jj_consume_token(EQ);
      Logger.logDebug("\u005ct=");
      initExp = Term(localVar, false, c);
      // set variable TypeDomain
      varD = initExp.getDomain();
      variable.setDomain(varD);
      // set variable kind
      if (varD instanceof RuleDomain) variable.setKind(VariableKind.RULE_VAR);
      //set references
      variableList.add(variable);
      initExpList.add(initExp);
      Logger.logDebug("\u005ct\u005ct\u005ct" + variable.getName() + " updated: D=" + variable.getDomain().getName() + ", kind=" + variable.getKind().toString());
    }
    jj_consume_token(119);
    Logger.logDebug("\u005ct)");
    jj_consume_token(IN);
    Logger.logDebug("\u005ctin");
    inRule = Rule(localVar, c);
    //set the reference
    rule.setInRule(inRule);
    //create the association
    //check OCL constraints
    if (!OCL_Checker.checkLetRule(rule)) {if (true) throw new ParseException(OCL_Checker.getMsgErr() + "\u005cn       At the application of the let-rule.");}
    jj_consume_token(ENDLET);
    Logger.logDebug("\u005ctendlet\u005ct\u005ctLetRule end");
    {if (true) return rule;}
    throw new Error("Missing return statement in function");
  }

//Ok!
/*
* modified 10 Jan 2008 by acarioni
*
*/
  final public MacroCallRule MacroCallRule(HashMap localVar, RuleDeclaration c) throws ParseException {
  String ruleName;
  Term par;
    ruleName = ID_RULE();
    Logger.logDebug("\u005ct" + ruleName + "\u005ct\u005ctMacroCallRule beginning");
    //create the object
    MacroCallRule rule = rulesPack.getBasicTransitionRules().createMacroCallRule();
    List < Term > actualParamList = rule.getParameters();
    jj_consume_token(126);
    Logger.logDebug("\u005ct[");
    if (jj_2_45(1)) {
      par = Term(localVar, false, c);
      actualParamList.add(par);
      label_52:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 118:
          ;
          break;
        default:
          jj_la1[138] = jj_gen;
          break label_52;
        }
        jj_consume_token(118);
        par = Term(localVar, false, c);
        actualParamList.add(par);
      }
    } else {
      ;
    }
    jj_consume_token(128);
    Logger.logDebug("\u005ct]\u005ct\u005ctMacroCallRule end");
    //look for the rule in the rule HashMap
    RuleDeclaration r = Utility.getRuleByNameTerm(declared_Rules, ruleName, actualParamList);
    //PA: 15/10/2011
    /*List<Domain> doms = Utility.buildDomains(actualParamList);
		List<VariableTerm> list = r.getVariable();
		Iterator<VariableTerm> it = list.iterator();
		HashMap<String, Domain> genericDomValue =  new HashMap<String, Domain>();		
		for(Domain domain: doms)	{
		  Domain other = it.next().getDomain();
		  System.out.println(domain.getName() + " " + other.getName() +" " +OCL_Checker.applicable(domain, other));
		  System.out.println(other.getName() + " " + domain.getName() +" " +OCL_Checker.applicable(other, domain));
		  
		  //if(!OCL_Checker.compareFixingAnyDomain(other, domain, genericDomValue))
		  if(!OCL_Checker.applicable(domain, other))
		  {
		    throw new ParseException("Error: ");
		  }
		}*/
    //PA: 15/10/2011 - end
    // added 10 Jan 2008 by acarioni
    if (r == null)
    {
      List < Domain > domains = Utility.buildDomains(actualParamList);
      Logger.logErr("rules already declared: " + Utility.toString(declared_Rules));
      {if (true) throw new ParseException("Error: Unresolved reference to " + ruleName + Utility.toString(domains));}
    }
    //******* NEW by Patrizia to manage recursion
    // NON FUNZIONA PIU' if (c!= null && ruleName.equals(c.getName()))
    //         	   r = c;
    if (!(r instanceof MacroDeclaration)) {if (true) throw new ParseException("Error: The rule " + ruleName + " is not a macro");}
    //set reference
    rule.setCalledMacro((MacroDeclaration) r);
    //PA: 15/10/2011 - start
    StringBuilder sb = new StringBuilder();
    sb.append("Macro call rule " + rule.getCalledMacro().getName() + " has been associated to the rule " + r.getName() + "[");
    for (VariableTerm v : r.getVariable())
    {
      sb.append(v.getDomain().getName());
    }
    sb.append("]");
    Logger.logDebug(sb.toString());
    //PA: 15/10/2011 - end
    //check OCL constraints
    if (!OCL_Checker.checkMacroCallRule(rule)) {if (true) throw new ParseException(OCL_Checker.getMsgErr() + "\u005cn       At the application of the rule " + ruleName + " as a macro.");}
    Logger.logDebug("The macro call rule respects the OCL constraints.");
    {if (true) return rule;}
    throw new Error("Missing return statement in function");
  }

//OK!
  final public ExtendRule ExtendRule(HashMap localVar, RuleDeclaration c) throws ParseException {
  String id_dom;
  VariableTerm v;
  Rule doRule;
    jj_consume_token(EXTEND);
    Logger.logDebug("\u005ctextend\u005ct\u005ctExtendRule beginning");
    id_dom = ID_DOMAIN();
    ExtendRule rule = rulesPack.getBasicTransitionRules().createExtendRule();
    Domain dom = (Domain) declared_Dom.get(id_dom);
    rule.setExtendedDomain(dom);
    //XAExtendRuleExtendedDomain a_ExtendR_Dom= rulesPack.getBasicTransitionRules().getAExtendRuleExtendedDomain();
    //Xa_ExtendR_Dom.add(rule,(AbstractTd)dom);

    jj_consume_token(WITH);
    Logger.logDebug("\u005ctwith");
    String nextVar = getToken(1).image;
    if (localVar.get(nextVar) != null) {if (true) throw new ParseException("Error: The variable " + nextVar + " cannot be bound to a value in the ExtendRule. It is already used.");}
    v = VariableTerm(localVar, true);
    Collection VariablesList = rule.getBoundVar();
    VariablesList.add(v);
    //XAExtendRuleBoundVar a_ExtendR_Var= rulesPack.getBasicTransitionRules().getAExtendRuleBoundVar();
    //Xa_ExtendR_Var.add(rule,v);
    ReserveDomain Reservedom = (ReserveDomain) Utility.getPredefinedAbstractDomain(domainsFactory, "Reserve");
    if (Reservedom == null) {if (true) throw new ParseException("Error: The domain Reserve has not been declared.");}
    Utility.updateVariable(v, dom);
    //constraint R6 is granted for construction
    Logger.logDebug("\u005ct\u005ct\u005ctTD assigned to " + v.getName() + ": " + v.getDomain().getName());
    label_53:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 118:
        ;
        break;
      default:
        jj_la1[139] = jj_gen;
        break label_53;
      }
      jj_consume_token(118);
      nextVar = getToken(1).image;
      if (localVar.get(nextVar) != null) {if (true) throw new ParseException("Error: The variable " + nextVar + " cannot be bound to a value in the ExtendRule. It is already used.");}
      v = VariableTerm(localVar, true);
      VariablesList.add(v);
      //Xa_ExtendR_Var.add(rule,v);
      Utility.updateVariable(v, dom);
      //constraint R6 is granted for construction
      Logger.logDebug("\u005ct\u005ct\u005ctTD assigned to " + v.getName() + ": " + v.getDomain().getName());
    }
    jj_consume_token(DO);
    Logger.logDebug("\u005ctdo");
    doRule = Rule(localVar, c);
    rule.setDoRule(doRule);
    //X AExtendRuleDoRule a_ExtendR_DoRule= rulesPack.getBasicTransitionRules().getAExtendRuleDoRule();
    //X a_ExtendR_DoRule.add(rule,doRule);
    //check OCL constraints
    if (!OCL_Checker.checkExtendRule(rule)) {if (true) throw new ParseException(OCL_Checker.getMsgErr() + "\u005cn       At the application of the extend rule.");}
    Logger.logDebug("\u005ct\u005ct\u005ctExtendRule end");
    {if (true) return rule;}
    throw new Error("Missing return statement in function");
  }

/////////////////////////////////////////////////////////////////////////
  final public TurboRule TurboRule(HashMap localVar, RuleDeclaration c) throws ParseException {
  TurboRule result;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case seq:
      result = SeqRule(localVar, c);
      break;
    case ITERATE:
      result = IterateRule(localVar, c);
      break;
    case ID_RULE:
      result = TurboCallRule(localVar, c);
      break;
    case DYNAMIC:
    case LOCAL:
      result = TurboLocalStateRule(localVar, c);
      break;
    default:
      jj_la1[140] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

///////////////// TURBO RULE /////////////////
  final public SeqRule SeqRule(HashMap localVar, RuleDeclaration c) throws ParseException {
  Rule r;
    jj_consume_token(seq);
    Logger.logDebug("\u005ctseq\u005ct\u005ctSeqRule beginning");
    SeqRule rule = rulesPack.getTurboTransitionRules().createSeqRule();
    List < Rule > rulesList = rule.getRules();
    r = Rule(localVar, c);
    //add rules
    rulesList.add(r);
    label_54:
    while (true) {
      r = Rule(localVar, c);
      //set the reference
      rulesList.add(r);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DYNAMIC:
      case IF:
      case SWITCH:
      case LET:
      case FORALL:
      case Skip:
      case PAR:
      case CHOOSE:
      case EXTEND:
      case seq:
      case ITERATE:
      case LOCAL:
      case WHILE:
      case WHILEREC:
      case ID_VARIABLE:
      case ID_RULE:
      case ID_FUNCTION:
        ;
        break;
      default:
        jj_la1[141] = jj_gen;
        break label_54;
      }
    }
    jj_consume_token(ENDSEQ);
    Logger.logDebug("\u005ctendseq\u005ct\u005ctSeqRule end");
    {if (true) return rule;}
    throw new Error("Missing return statement in function");
  }

  final public IterateRule IterateRule(HashMap localVar, RuleDeclaration c) throws ParseException {
  Rule r;
    jj_consume_token(ITERATE);
    Logger.logDebug("\u005ctiterate\u005ct\u005ctIterateRule beginning");
    r = Rule(localVar, c);
    jj_consume_token(ENDITERATE);
    Logger.logDebug("\u005ctenditerate\u005ct\u005ctIterateRule end");
    IterateRule rule = rulesPack.getTurboTransitionRules().createIterateRule();
    //set the reference
    rule.setRule(r);
    {if (true) return rule;}
    throw new Error("Missing return statement in function");
  }

  final public TurboCallRule TurboCallRule(HashMap localVar, RuleDeclaration c) throws ParseException {
  String ruleName;
  Term par;
    ruleName = ID_RULE();
    Logger.logDebug("\u005ct" + ruleName + "\u005ct\u005ctTurboCallRule beginning");
    Logger.logDebug("\u005ct context: " + ((c == null) ? "null" : c.getName()));
    //create the object
    TurboCallRule rule = rulesPack.getTurboTransitionRules().createTurboCallRule();
    List < Term > actualParamList = rule.getParameters();
    jj_consume_token(117);
    Logger.logDebug("\u005ct(");
    if (jj_2_46(1)) {
      par = Term(localVar, false, c);
      actualParamList.add(par);
      label_55:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 118:
          ;
          break;
        default:
          jj_la1[142] = jj_gen;
          break label_55;
        }
        jj_consume_token(118);
        par = Term(localVar, false, c);
        actualParamList.add(par);
      }
    } else {
      ;
    }
    jj_consume_token(119);
    Logger.logDebug("\u005ct)\u005ct\u005ctTurboCallRule end");
    //look for the rule in the rule HashMap
    RuleDeclaration r = Utility.getRuleByNameTerm(declared_Rules, ruleName, actualParamList);
    //******* NEW by Patrizia to manage recursion
    if (c != null && ruleName.equals(c.getName())) r = c;
    //*************
    // added 10 Jan 2008 by acarioni
    if (r == null)
    {
      List < Domain > domains = Utility.buildDomains(actualParamList);
      Logger.logErr("rules already declared: " + Utility.toString(declared_Rules));
      //Logger.logErr("Asbtract domains:" + Utility.toString(Utility.abstractTds.values()));
      {if (true) throw new ParseException("Error: Unresolved reference to " + ruleName + Utility.toString(domains));}
    }
    if (!(r instanceof TurboDeclaration)) {if (true) throw new ParseException("Error: The rule " + ruleName + " is not declared as turbo, but it is called as it was.");}
    //set reference
    rule.setCalledRule((TurboDeclaration) r);
    if (ruleName.equals(c.getName()))  //***NEW by Patrizia - in case of recursion, don't check OCL constraints
    {if (true) return rule;}
    //check OCL constraints
    if (!OCL_Checker.checkTurboCallRule(rule))
    { //For debugging
      Logger.logDebug(rule.getParameters().size() + " " + rule.getCalledRule().getArity());
      {if (true) throw new ParseException(OCL_Checker.getMsgErr() + "\u005cn       At the application of the rule " + ruleName + " as a submachine.");}
    }
    {if (true) return rule;}
    throw new Error("Missing return statement in function");
  }

  final public TurboReturnRule TurboReturnRule(HashMap localVar, RuleDeclaration c) throws ParseException {
  LocationTerm loc;
  VariableTerm locVar;
  TurboCallRule updateR;
    Logger.logDebug("\u005ct\u005ct\u005ctTurboReturnRule beginning");
    TurboReturnRule rule = rulesPack.getTurboTransitionRules().createTurboReturnRule();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID_FUNCTION:
      loc = LocationTerm(localVar, false);
      //set the reference
      rule.setLocation(loc);
      break;
    case ID_VARIABLE:
      locVar = VariableTerm(localVar, false);
      //set the reference
      rule.setLocation(locVar);
      // check and update the variable kind
      if (locVar.getKind() == VariableKind.LOGICAL_VAR)
      {
        locVar.setKind(VariableKind.LOCATION_VAR);
        Logger.logDebug("\u005ct\u005ct\u005ct" + locVar.getName() + " updated: TD=" + locVar.getDomain().getName() + ", kind=" + locVar.getKind().toString());
      }
      else if (locVar.getKind() == VariableKind.RULE_VAR) {if (true) throw new ParseException("Error: In a turbo-return rule, the variable to update must be a location variable, not a rule variable. ");}
      break;
    default:
      jj_la1[143] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(132);
    Logger.logDebug("\u005ct<-");
    updateR = TurboCallRule(localVar, c);
    //set the references
    rule.setUpdateRule(updateR);
    // constraint 1 and 2 are granted for construction
    Logger.logDebug("\u005ct\u005ct\u005ctTurboReturnRule end");
    {if (true) return rule;}
    throw new Error("Missing return statement in function");
  }

  final public TurboLocalStateRule TurboLocalStateRule(HashMap localVar, RuleDeclaration c) throws ParseException {
  Rule init, body;
  LocalFunction localF;
  LinkedList localFunctions = new LinkedList();
    Logger.logDebug("\u005ct\u005ct\u005ctTurboLocalStateRule beginning");
    Logger.logDebug("\u005ct");
    localF = LocalFunction();
    boolean inserted = Utility.insert(localF, declared_Func);
    if (inserted) localFunctions.add(localF);
    else {if (true) throw new ParseException("Error: The function " + localF.getName() + ":" + ((localF.getDomain() == null) ? "" : (localF.getDomain().getName() + "->")) + localF.getCodomain().getName() + " has been declared twice.");}
    jj_consume_token(126);
    Logger.logDebug("\u005ct[");
    init = Rule(localVar, c);
    jj_consume_token(128);
    Logger.logDebug("\u005ct]");
    TurboLocalStateRule rule = rulesPack.getTurboTransitionRules().createTurboLocalStateRule();
    List LocFunList = rule.getLocalFunction();
    List InitRulesList = rule.getInit();
    //X ATurboLocalStateRuleInit a_TurLocStaTR_Init = rulesPack.getTurboTransitionRules().getATurboLocalStateRuleInit();
    //X ATurboLocalStateRuleLocalFunction a_TurLocStaTR_LocF = rulesPack.getTurboTransitionRules().getATurboLocalStateRuleLocalFunction();
    //set references
    LocFunList.add(localF);
    InitRulesList.add(init);
    //create associations
    //X a_TurLocStaTR_LocF.add(rule,localF);
    //X a_TurLocStaTR_Init.add(rule,init);
    //(OCL constraints 1) the dynamic functions must be local
    //if(!(localF.getKind().toString().equals("local")))
    //  throw new ParseException("Error: In a turbo rule with local state, the dynamic functions must be local.");

    label_56:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DYNAMIC:
      case LOCAL:
        ;
        break;
      default:
        jj_la1[144] = jj_gen;
        break label_56;
      }
      Logger.logDebug("\u005ct");
      localF = LocalFunction();
      inserted = Utility.insert(localF, declared_Func);
      if (inserted) localFunctions.add(localF);
      else {if (true) throw new ParseException("Error: The function " + localF.getName() + ":" + ((localF.getDomain() == null) ? "" : (localF.getDomain().getName() + "->")) + localF.getCodomain().getName() + " has been declared twice.");}
      jj_consume_token(126);
      Logger.logDebug("\u005ct[");
      init = Rule(localVar, c);
      jj_consume_token(128);
      Logger.logDebug("\u005ct]");
      //set references
      LocFunList.add(localF);
      InitRulesList.add(init);
      //create associations
      //X a_TurLocStaTR_LocF.add(rule,localF);
      //X a_TurLocStaTR_Init.add(rule,init);
      //(OCL constraints 1) the dynamic functions must be local
      //if(!(localF.getKind().toString().equals("local")))
      //   throw new ParseException("Error: In a turbo rule with local state, the dynamic functions must be local.");

    }
    body = Rule(localVar, c);
    rule.setBody(body);
    //X ATurboLocalStateRuleBody a_TurLocStaTR_Body = rulesPack.getTurboTransitionRules().getATurboLocalStateRuleBody();
    //X a_TurLocStaTR_Body.add(rule,body);
    LocalFunction f;
    for (int count = 0; count < localFunctions.size(); count++)
    {
      f = (LocalFunction) localFunctions.get(count);
      Utility.remove(f, declared_Func);
    }
    Logger.logDebug("\u005ct\u005ct\u005ctTurboLocalStateRule end");
    //Check OCL constraints
    if (!OCL_Checker.checkTurboLocalStateRule(rule))
    {
      Logger.logErr(OCL_Checker.getMsgErr());
      Logger.logErr("       At the TurboLocalStateRule.\u005cn");
    }
    {if (true) return rule;}
    throw new Error("Missing return statement in function");
  }

  final public TryCatchRule TryCatchRule(HashMap localVar, RuleDeclaration c) throws ParseException {
  Rule tryR, catchR;
  Term loc;
    jj_consume_token(TRY);
    Logger.logDebug("\u005cttry\u005ct\u005ctTryCatchRule beginning");
    tryR = Rule(localVar, c);
    //create the object
    TryCatchRule rule = rulesPack.getTurboTransitionRules().createTryCatchRule();
    //set the reference
    rule.setTryRule(tryR);
    //create the association
    //X ATryCatchRuleTryRule a_TryCatchR_TryR = rulesPack.getTurboTransitionRules().getATryCatchRuleTryRule();
    //X a_TryCatchR_TryR.add(rule,tryR);
    Collection locColl = rule.getLocation();
    //X ATryCatchRuleLocation a_TryCatchR_Loc = rulesPack.getTurboTransitionRules().getATryCatchRuleLocation();
    //X ATryCatchRuleLocationVar a_TryCatchR_LocVar = rulesPack.getTurboTransitionRules().getATryCatchRuleLocationVar();

    jj_consume_token(CATCH);
    Logger.logDebug("\u005ctcatch");
    loc = Term(localVar, false, c);
      //add location term to collection
      locColl.add(loc);
      //create the association
      //X a_TryCatchR_Loc.add(rule,loc);
      // check and update the variable kind
      if (loc instanceof VariableTerm)
      {
        VariableTerm locVar = (VariableTerm) loc;
        if (locVar.getKind() == VariableKind.LOGICAL_VAR)
        {
          ((VariableTerm) loc).setKind(VariableKind.LOCATION_VAR);
          Logger.logDebug("\u005ct\u005ct\u005ct" + locVar.getName() + " updated: TD=" + locVar.getDomain().getName() + ", kind=" + locVar.getKind().toString());
        }
        else if (locVar.getKind() == VariableKind.RULE_VAR) {if (true) throw new ParseException("Error: In a try-catch rule, the variable to catch must be a location variable, not a rule variable. ");}
      }
    label_57:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 118:
        ;
        break;
      default:
        jj_la1[145] = jj_gen;
        break label_57;
      }
      jj_consume_token(118);
      loc = Term(localVar, false, c);
        //add location term to collection
        locColl.add(loc);
        // check and update the variable kind
        if (loc instanceof VariableTerm)
        {
          VariableTerm locVar = (VariableTerm) loc;
          if (locVar.getKind() == VariableKind.LOGICAL_VAR)
          {
            ((VariableTerm) loc).setKind(VariableKind.LOCATION_VAR);
            Logger.logDebug("\u005ct\u005ct\u005ct" + locVar.getName() + " updated: TD=" + locVar.getDomain().getName() + ", kind=" + locVar.getKind().toString());
          }
          else if (locVar.getKind() == VariableKind.RULE_VAR) {if (true) throw new ParseException("Error: In a try-catch rule, the variable to catch must be a location variable, not a rule variable. ");}
        }
    }
    catchR = Rule(localVar, c);
    //set the reference
    rule.setCatchRule(catchR);
    //create the association
    //X ATryCatchRuleCatchRule a_TryCatchR_CatchR = rulesPack.getTurboTransitionRules().getATryCatchRuleCatchRule();
    //X a_TryCatchR_CatchR.add(rule,catchR);
    Logger.logDebug("\u005ct\u005ct\u005ctTryCatchRule end");
    //OCL constraints granted for construction!
    {if (true) return rule;}
    throw new Error("Missing return statement in function");
  }

//////////////////////////////////////////////////////////////////////////////////////////////
  final public DerivedRule DerivedRule(HashMap localVar, RuleDeclaration c) throws ParseException {
  DerivedRule r;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SWITCH:
      r = BasicDerivedRule(localVar, c);
      break;
    case WHILE:
    case WHILEREC:
      r = TurboDerivedRule(localVar, c);
      break;
    default:
      jj_la1[146] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  final public BasicDerivedRule BasicDerivedRule(HashMap localVar, RuleDeclaration c) throws ParseException {
  BasicDerivedRule r;
    r = CaseRule(localVar, c);
    {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  final public CaseRule CaseRule(HashMap localVar, RuleDeclaration c) throws ParseException {
  Term caseT, term;
  Rule resRule;
    jj_consume_token(SWITCH);
    Logger.logDebug("\u005ctswitch\u005ct\u005ctCaseRule beginning");
    term = Term(localVar, false, c);
    //create the object
    CaseRule rule = rulesPack.getDerivedTransitionRules().createCaseRule();
    //set the reference
    rule.setTerm(term);
    List < Term > caseTermsList = rule.getCaseTerm();
    List < Rule > resList = rule.getCaseBranches();
    label_58:
    while (true) {
      jj_consume_token(CASE);
      Logger.logDebug("\u005ctcase");
      term = Term(localVar, false, c);
      jj_consume_token(120);
      Logger.logDebug("\u005ct:");
      resRule = Rule(localVar, c);
      caseTermsList.add(term);
      resList.add(resRule);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE:
        ;
        break;
      default:
        jj_la1[147] = jj_gen;
        break label_58;
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OTHERWISE:
      jj_consume_token(OTHERWISE);
      Logger.logDebug("\u005ctotherwise");
      resRule = Rule(localVar, c);
      //set the reference
      rule.setOtherwiseBranch(resRule);
      break;
    default:
      jj_la1[148] = jj_gen;
      ;
    }
    jj_consume_token(END_SWITCH);
    //check OCL constraints
    if (!OCL_Checker.checkCaseRule(rule))
    {
      Logger.logErr(OCL_Checker.getMsgErr());
      Logger.logErr("       At a case rule");
    }
    Logger.logDebug("\u005ctendswitch\u005ct\u005ctCaseRule end");
    {if (true) return rule;}
    throw new Error("Missing return statement in function");
  }

  final public TurboDerivedRule TurboDerivedRule(HashMap localVar, RuleDeclaration c) throws ParseException {
  TurboDerivedRule r;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHILEREC:
      r = RecursiveWhileRule(localVar, c);
      break;
    case WHILE:
      r = IterativeWhileRule(localVar, c);
      break;
    default:
      jj_la1[149] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  final public RecursiveWhileRule RecursiveWhileRule(HashMap localVar, RuleDeclaration c) throws ParseException {
  Term guard;
  Rule r;
    jj_consume_token(WHILEREC);
    Logger.logDebug("\u005ctwhilerec\u005ct\u005ctRecursiveWhileRule beginning");
    guard = Term(localVar, false, c);
    jj_consume_token(DO);
    Logger.logDebug("\u005ctdo");
    r = Rule(localVar, c);
    RecursiveWhileRule rule = rulesPack.getDerivedTransitionRules().createRecursiveWhileRule();
    //set references
    rule.setGuard(guard);
    rule.setRule(r);
    //create associations
    //X ARecursiveWhileRuleGuard a_RecWhileR_Guard = rulesPack.getDerivedTransitionRules().getARecursiveWhileRuleGuard();
    //X a_RecWhileR_Guard.add(rule,guard);
    //X ARecursiveWhileRuleRule a_RecWhileR_Rule = rulesPack.getDerivedTransitionRules().getARecursiveWhileRuleRule();
    //X a_RecWhileR_Rule.add(r,rule);
    //OCL constraints
    if (!OCL_Checker.checkRecursiveWhileRule(rule))
    {
      Logger.logErr(OCL_Checker.getMsgErr());
      Logger.logErr("       At a RecursiveWhileRule");
    }
    Logger.logDebug("\u005ct\u005ct\u005ctRecursiveWhileRule end");
    {if (true) return rule;}
    throw new Error("Missing return statement in function");
  }

  final public IterativeWhileRule IterativeWhileRule(HashMap localVar, RuleDeclaration c) throws ParseException {
  Term guard;
  Rule r;
    jj_consume_token(WHILE);
    Logger.logDebug("\u005ctwhile\u005ct\u005ctIterativeWhileRule beginning");
    guard = Term(localVar, false, c);
    jj_consume_token(DO);
    Logger.logDebug("\u005ctdo");
    r = Rule(localVar, c);
    IterativeWhileRule rule = rulesPack.getDerivedTransitionRules().createIterativeWhileRule();
    //set references
    rule.setGuard(guard);
    rule.setRule(r);
    //create associations
    //X AIterativeWhileRuleGuard a_ItWhileR_Guard = rulesPack.getDerivedTransitionRules().getAIterativeWhileRuleGuard();
    //X a_ItWhileR_Guard.add(rule,guard);
    //X AIterativeWhileRuleRule a_ItWhileR_Rule = rulesPack.getDerivedTransitionRules().getAIterativeWhileRuleRule();
    //X a_ItWhileR_Rule.add(r,rule);
    //OCL constraints
    if (!OCL_Checker.checkIterativeWhileRule(rule))
    {
      Logger.logErr(OCL_Checker.getMsgErr());
      Logger.logErr("       At a IterativeWhileRule");
    }
    Logger.logDebug("\u005ct\u005ct\u005ctIterativeWhileRule end");
    {if (true) return rule;}
    throw new Error("Missing return statement in function");
  }

////////////////////////////////////////////////////////
/////////////////////////////////// END OF GRAMMAR ///////////////////////////
  final public String ID_VARIABLE() throws ParseException {
  Token t;
    t = jj_consume_token(ID_VARIABLE);
    {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public String ID_ENUM() throws ParseException {
  Token t;
    t = jj_consume_token(ID_ENUM);
    {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public String ID_DOMAIN() throws ParseException {
  Token t;
    t = jj_consume_token(ID_DOMAIN);
    {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public String ID_RULE() throws ParseException {
  Token t;
    t = jj_consume_token(ID_RULE);
    {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public String ID_AXIOM() throws ParseException {
  Token t;
    t = jj_consume_token(ID_AXIOM);
    {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public String ID_CTL() throws ParseException {
  Token t;
    t = jj_consume_token(ID_CTL);
    {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public String ID_LTL() throws ParseException {
  Token t;
    t = jj_consume_token(ID_LTL);
    {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public String ID_FUNCTION() throws ParseException {
  Token t;
    t = jj_consume_token(ID_FUNCTION);
    {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public String ID_AGENT() throws ParseException {
  Token t;
    t = jj_consume_token(ID_FUNCTION);
    {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public String ID() throws ParseException {
  Token t;
    t = jj_consume_token(ID);
    {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public String MOD_ID() throws ParseException {
  Token t;
    t = jj_consume_token(MOD_ID);
    {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  private boolean jj_3R_314() {
    if (jj_3R_322()) return true;
    return false;
  }

  private boolean jj_3R_313() {
    if (jj_3R_321()) return true;
    return false;
  }

  private boolean jj_3R_114() {
    if (jj_3R_82()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_312()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_33() {
    if (jj_scan_token(121)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_94()) {
    jj_scanpos = xsp;
    if (jj_scan_token(124)) return true;
    }
    return false;
  }

  private boolean jj_3R_306() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_313()) {
    jj_scanpos = xsp;
    if (jj_3R_314()) {
    jj_scanpos = xsp;
    if (jj_3R_315()) {
    jj_scanpos = xsp;
    if (jj_3R_316()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_294() {
    if (jj_3R_310()) return true;
    return false;
  }

  private boolean jj_3R_293() {
    if (jj_3R_309()) return true;
    return false;
  }

  private boolean jj_3R_292() {
    if (jj_3R_308()) return true;
    return false;
  }

  private boolean jj_3R_291() {
    if (jj_3R_307()) return true;
    return false;
  }

  private boolean jj_3R_268() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_291()) {
    jj_scanpos = xsp;
    if (jj_3R_292()) {
    jj_scanpos = xsp;
    if (jj_3R_293()) {
    jj_scanpos = xsp;
    if (jj_3R_294()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_81() {
    if (jj_scan_token(GE)) return true;
    if (jj_3R_114()) return true;
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_scan_token(GT)) return true;
    if (jj_3R_114()) return true;
    return false;
  }

  private boolean jj_3R_259() {
    if (jj_scan_token(DYNAMIC)) return true;
    return false;
  }

  private boolean jj_3R_224() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_259()) jj_scanpos = xsp;
    if (jj_scan_token(ABSTRACT)) return true;
    if (jj_scan_token(DOMAIN)) return true;
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_scan_token(LE)) return true;
    if (jj_3R_114()) return true;
    return false;
  }

  private boolean jj_3R_271() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_221()) return true;
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_114()) return true;
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_scan_token(NEQ)) return true;
    if (jj_3R_114()) return true;
    return false;
  }

  private boolean jj_3R_225() {
    if (jj_scan_token(BASIC)) return true;
    if (jj_scan_token(DOMAIN)) return true;
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_scan_token(EQ)) return true;
    if (jj_3R_114()) return true;
    return false;
  }

  private boolean jj_3R_258() {
    if (jj_scan_token(118)) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_164() {
    if (jj_scan_token(IF)) return true;
    if (jj_3R_95()) return true;
    if (jj_scan_token(THEN)) return true;
    if (jj_3R_221()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_271()) jj_scanpos = xsp;
    if (jj_scan_token(ENDIF)) return true;
    return false;
  }

  private boolean jj_3R_287() {
    if (jj_3R_114()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_21()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_scan_token(DOMAIN)) return true;
    if (jj_3R_108()) return true;
    return false;
  }

  private boolean jj_3R_317() {
    if (jj_scan_token(118)) return true;
    if (jj_3R_96()) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_222() {
    if (jj_scan_token(ANYDOMAIN)) return true;
    if (jj_3R_108()) return true;
    return false;
  }

  private boolean jj_3R_92() {
    if (jj_scan_token(117)) return true;
    if (jj_3R_95()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_258()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(119)) return true;
    return false;
  }

  private boolean jj_3R_270() {
    if (jj_3R_221()) return true;
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_scan_token(ID_FUNCTION)) return true;
    if (jj_3R_287()) return true;
    return false;
  }

  private boolean jj_3R_174() {
    if (jj_3R_225()) return true;
    return false;
  }

  private boolean jj_3R_173() {
    if (jj_3R_224()) return true;
    return false;
  }

  private boolean jj_3R_172() {
    if (jj_3R_223()) return true;
    return false;
  }

  private boolean jj_3R_280() {
    if (jj_3R_279()) return true;
    if (jj_scan_token(126)) return true;
    if (jj_3R_221()) return true;
    if (jj_scan_token(128)) return true;
    return false;
  }

  private boolean jj_3R_171() {
    if (jj_3R_145()) return true;
    return false;
  }

  private boolean jj_3R_163() {
    if (jj_scan_token(PAR)) return true;
    if (jj_3R_221()) return true;
    Token xsp;
    if (jj_3R_270()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_270()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(ENDPAR)) return true;
    return false;
  }

  private boolean jj_3R_170() {
    if (jj_3R_222()) return true;
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_scan_token(ID_FUNCTION)) return true;
    if (jj_3R_287()) return true;
    return false;
  }

  private boolean jj_3R_142() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_170()) {
    jj_scanpos = xsp;
    if (jj_3R_171()) {
    jj_scanpos = xsp;
    if (jj_3R_172()) {
    jj_scanpos = xsp;
    if (jj_3R_173()) {
    jj_scanpos = xsp;
    if (jj_3R_174()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_20() {
    Token xsp;
    xsp = jj_scanpos;
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind == ID_FUNCTION && getToken(1).image.equals("in");
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_74()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind == ID_FUNCTION && getToken(1).image.equals("notin");
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_75()) return true;
    }
    return false;
  }

  private boolean jj_3R_263() {
    if (jj_3R_287()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_20()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_235() {
    if (jj_3R_263()) return true;
    return false;
  }

  private boolean jj_3R_297() {
    if (jj_scan_token(OTHERWISE)) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_305() {
    if (jj_scan_token(LET)) return true;
    if (jj_scan_token(117)) return true;
    if (jj_3R_96()) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_3R_95()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_317()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(119)) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_3R_95()) return true;
    if (jj_scan_token(ENDLET)) return true;
    return false;
  }

  private boolean jj_3R_109() {
    if (jj_scan_token(DYNAMIC)) return true;
    return false;
  }

  private boolean jj_3R_234() {
    if (jj_scan_token(ID_FUNCTION)) return true;
    if (jj_3R_263()) return true;
    return false;
  }

  private boolean jj_3R_63() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_109()) jj_scanpos = xsp;
    if (jj_scan_token(DOMAIN)) return true;
    if (jj_3R_108()) return true;
    return false;
  }

  private boolean jj_3R_183() {
    Token xsp;
    xsp = jj_scanpos;
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind == ID_FUNCTION && getToken(1).image.equals("not");
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_234()) {
    jj_scanpos = xsp;
    if (jj_3R_235()) return true;
    }
    return false;
  }

  private boolean jj_3R_296() {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_95()) return true;
    if (jj_scan_token(120)) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_252() {
    if (jj_3R_279()) return true;
    if (jj_scan_token(126)) return true;
    if (jj_3R_221()) return true;
    if (jj_scan_token(128)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_280()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_221()) return true;
    return false;
  }

  private boolean jj_3R_211() {
    if (jj_3R_96()) return true;
    return false;
  }

  private boolean jj_3R_105() {
    if (jj_3R_142()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3R_125() {
    if (jj_scan_token(122)) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_210() {
    if (jj_3R_141()) return true;
    return false;
  }

  private boolean jj_3R_59() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3R_105()) return true;
    }
    return false;
  }

  private boolean jj_3R_266() {
    if (jj_scan_token(SWITCH)) return true;
    if (jj_3R_95()) return true;
    Token xsp;
    if (jj_3R_296()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_296()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_297()) jj_scanpos = xsp;
    if (jj_scan_token(END_SWITCH)) return true;
    return false;
  }

  private boolean jj_3R_200() {
    if (jj_scan_token(WITH)) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_157() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_210()) {
    jj_scanpos = xsp;
    if (jj_3R_211()) return true;
    }
    if (jj_scan_token(131)) return true;
    if (jj_3R_126()) return true;
    return false;
  }

  private boolean jj_3R_184() {
    if (jj_scan_token(ID_FUNCTION)) return true;
    if (jj_3R_183()) return true;
    return false;
  }

  private boolean jj_3R_146() {
    if (jj_3R_183()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_184()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_213() {
    if (jj_3R_96()) return true;
    return false;
  }

  private boolean jj_3R_212() {
    if (jj_3R_141()) return true;
    return false;
  }

  private boolean jj_3R_161() {
    if (jj_scan_token(Skip)) return true;
    return false;
  }

  private boolean jj_3R_199() {
    if (jj_scan_token(118)) return true;
    if (jj_3R_96()) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_158() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_212()) {
    jj_scanpos = xsp;
    if (jj_3R_213()) return true;
    }
    if (jj_scan_token(132)) return true;
    if (jj_3R_214()) return true;
    return false;
  }

  private boolean jj_3R_295() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_140() {
    if (jj_3R_168()) return true;
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_scan_token(ID_FUNCTION)) return true;
    return false;
  }

  private boolean jj_3R_124() {
    if (jj_scan_token(118)) return true;
    if (jj_3R_96()) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_139() {
    if (jj_3R_167()) return true;
    return false;
  }

  private boolean jj_3R_138() {
    if (jj_3R_166()) return true;
    return false;
  }

  private boolean jj_3R_137() {
    if (jj_3R_165()) return true;
    return false;
  }

  private boolean jj_3R_136() {
    if (jj_3R_164()) return true;
    return false;
  }

  private boolean jj_3R_135() {
    if (jj_3R_163()) return true;
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_scan_token(ID_FUNCTION)) return true;
    return false;
  }

  private boolean jj_3R_134() {
    if (jj_3R_162()) return true;
    return false;
  }

  private boolean jj_3R_133() {
    if (jj_3R_161()) return true;
    return false;
  }

  private boolean jj_3_19() {
    Token xsp;
    xsp = jj_scanpos;
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind == ID_FUNCTION && getToken(1).image.equals("or");
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_72()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind == ID_FUNCTION && getToken(1).image.equals("xor");
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_73()) return true;
    }
    if (jj_3R_146()) return true;
    return false;
  }

  private boolean jj_3R_100() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_133()) {
    jj_scanpos = xsp;
    if (jj_3R_134()) {
    jj_scanpos = xsp;
    if (jj_3R_135()) {
    jj_scanpos = xsp;
    if (jj_3R_136()) {
    jj_scanpos = xsp;
    if (jj_3R_137()) {
    jj_scanpos = xsp;
    if (jj_3R_138()) {
    jj_scanpos = xsp;
    if (jj_3R_139()) {
    jj_scanpos = xsp;
    if (jj_3R_140()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_113() {
    if (jj_3R_146()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_19()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_151() {
    if (jj_scan_token(117)) return true;
    if (jj_scan_token(FORALL)) return true;
    if (jj_3R_96()) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_3R_95()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_199()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_200()) jj_scanpos = xsp;
    if (jj_scan_token(119)) return true;
    return false;
  }

  private boolean jj_3R_265() {
    if (jj_scan_token(IF)) return true;
    if (jj_3R_95()) return true;
    if (jj_scan_token(THEN)) return true;
    if (jj_3R_95()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_295()) jj_scanpos = xsp;
    if (jj_scan_token(ENDIF)) return true;
    return false;
  }

  private boolean jj_3R_253() {
    if (jj_scan_token(118)) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3_32() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(59)) {
    jj_scanpos = xsp;
    if (jj_scan_token(117)) {
    jj_scanpos = xsp;
    if (jj_3R_93()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_249() {
    if (jj_3R_236()) return true;
    return false;
  }

  private boolean jj_3R_248() {
    if (jj_3R_269()) return true;
    return false;
  }

  private boolean jj_3R_247() {
    if (jj_3R_268()) return true;
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_scan_token(ID_FUNCTION)) return true;
    if (jj_3R_113()) return true;
    return false;
  }

  private boolean jj_3R_281() {
    if (jj_scan_token(118)) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_93() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(121)) {
    jj_scanpos = xsp;
    if (jj_scan_token(126)) {
    jj_scanpos = xsp;
    if (jj_scan_token(87)) return true;
    }
    }
    if (jj_3R_96()) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_3R_95()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_124()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_125()) jj_scanpos = xsp;
    if (jj_scan_token(120)) return true;
    return false;
  }

  private boolean jj_3R_217() {
    if (jj_scan_token(126)) return true;
    if (jj_3R_95()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_253()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(128)) return true;
    return false;
  }

  private boolean jj_3R_246() {
    if (jj_3R_267()) return true;
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_scan_token(ID_FUNCTION)) return true;
    if (jj_3R_113()) return true;
    return false;
  }

  private boolean jj_3R_216() {
    if (jj_3R_96()) return true;
    return false;
  }

  private boolean jj_3_31() {
    if (jj_3R_92()) return true;
    return false;
  }

  private boolean jj_3R_215() {
    if (jj_3R_150()) return true;
    return false;
  }

  private boolean jj_3_46() {
    if (jj_3R_95()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_281()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_18() {
    Token xsp;
    xsp = jj_scanpos;
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind == ID_FUNCTION && getToken(1).image.equals("implies");
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_70()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind == ID_FUNCTION && getToken(1).image.equals("iff");
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_71()) return true;
    }
    return false;
  }

  private boolean jj_3R_245() {
    if (jj_3R_266()) return true;
    return false;
  }

  private boolean jj_3R_244() {
    if (jj_3R_265()) return true;
    return false;
  }

  private boolean jj_3R_202() {
    if (jj_scan_token(WITH)) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_159() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_215()) {
    jj_scanpos = xsp;
    if (jj_3R_216()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_217()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_3R_113()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_18()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_205() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_244()) {
    jj_scanpos = xsp;
    if (jj_3R_245()) {
    jj_scanpos = xsp;
    if (jj_3_31()) {
    jj_scanpos = xsp;
    if (jj_3R_246()) {
    jj_scanpos = xsp;
    if (jj_3R_247()) {
    jj_scanpos = xsp;
    if (jj_3R_248()) {
    jj_scanpos = xsp;
    if (jj_3R_249()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_103() {
    if (jj_3R_96()) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3_44() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_103()) {
    jj_scanpos = xsp;
    if (jj_3R_104()) return true;
    }
    if (jj_scan_token(132)) return true;
    return false;
  }

  private boolean jj_3R_101() {
    if (jj_3R_96()) return true;
    return false;
  }

  private boolean jj_3_43() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) return true;
    }
    if (jj_scan_token(131)) return true;
    return false;
  }

  private boolean jj_3R_214() {
    if (jj_3R_220()) return true;
    if (jj_scan_token(117)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_46()) jj_scanpos = xsp;
    if (jj_scan_token(119)) return true;
    return false;
  }

  private boolean jj_3R_132() {
    if (jj_3R_160()) return true;
    return false;
  }

  private boolean jj_3R_131() {
    if (jj_3R_159()) return true;
    return false;
  }

  private boolean jj_3R_155() {
    if (jj_3R_205()) return true;
    return false;
  }

  private boolean jj_3R_104() {
    if (jj_3R_141()) return true;
    return false;
  }

  private boolean jj_3R_154() {
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_130() {
    if (jj_3R_158()) return true;
    return false;
  }

  private boolean jj_3R_102() {
    if (jj_3R_141()) return true;
    return false;
  }

  private boolean jj_3R_126() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_154()) {
    jj_scanpos = xsp;
    if (jj_3R_155()) return true;
    }
    return false;
  }

  private boolean jj_3R_129() {
    if (jj_3R_157()) return true;
    return false;
  }

  private boolean jj_3R_128() {
    if (jj_3R_156()) return true;
    return false;
  }

  private boolean jj_3R_201() {
    if (jj_scan_token(118)) return true;
    if (jj_3R_96()) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3_42() {
    if (jj_3R_100()) return true;
    return false;
  }

  private boolean jj_3R_243() {
    if (jj_3R_264()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3R_99() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_42()) {
    jj_scanpos = xsp;
    if (jj_3R_128()) {
    jj_scanpos = xsp;
    if (jj_3R_129()) {
    jj_scanpos = xsp;
    if (jj_3R_130()) {
    jj_scanpos = xsp;
    if (jj_3R_131()) {
    jj_scanpos = xsp;
    if (jj_3R_132()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_41() {
    if (jj_3R_99()) return true;
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  private boolean jj_3R_95() {
    if (jj_3R_126()) return true;
    return false;
  }

  private boolean jj_3R_251() {
    if (jj_scan_token(ITERATE)) return true;
    if (jj_3R_221()) return true;
    if (jj_scan_token(ENDITERATE)) return true;
    return false;
  }

  private boolean jj_3R_257() {
    if (jj_3R_99()) return true;
    return false;
  }

  private boolean jj_3R_256() {
    if (jj_3R_285()) return true;
    return false;
  }

  private boolean jj_3R_221() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_256()) {
    jj_scanpos = xsp;
    if (jj_3R_257()) return true;
    }
    return false;
  }

  private boolean jj_3R_278() {
    if (jj_3R_221()) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_3R_64()) return true;
    if (jj_scan_token(124)) return true;
    return false;
  }

  private boolean jj_3R_242() {
    if (jj_scan_token(UNDEF)) return true;
    return false;
  }

  private boolean jj_3R_152() {
    if (jj_scan_token(117)) return true;
    if (jj_scan_token(EXIST)) return true;
    if (jj_scan_token(UNIQUE)) return true;
    if (jj_3R_96()) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_3R_95()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_201()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_202()) jj_scanpos = xsp;
    if (jj_scan_token(119)) return true;
    return false;
  }

  private boolean jj_3R_250() {
    if (jj_scan_token(seq)) return true;
    if (jj_3R_221()) return true;
    Token xsp;
    if (jj_3R_278()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_278()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(ENDSEQ)) return true;
    return false;
  }

  private boolean jj_3R_319() {
    if (jj_scan_token(118)) return true;
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3R_65() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(28)) jj_scanpos = xsp;
    if (jj_scan_token(OUT)) return true;
    if (jj_3R_112()) return true;
    return false;
  }

  private boolean jj_3R_311() {
    if (jj_scan_token(117)) return true;
    if (jj_3R_64()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_319()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(119)) return true;
    return false;
  }

  private boolean jj_3R_209() {
    if (jj_3R_252()) return true;
    return false;
  }

  private boolean jj_3R_208() {
    if (jj_3R_214()) return true;
    return false;
  }

  private boolean jj_3R_207() {
    if (jj_3R_251()) return true;
    return false;
  }

  private boolean jj_3R_241() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(47)) return true;
    }
    return false;
  }

  private boolean jj_3R_206() {
    if (jj_3R_250()) return true;
    return false;
  }

  private boolean jj_3R_204() {
    if (jj_scan_token(WITH)) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_156() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_206()) {
    jj_scanpos = xsp;
    if (jj_3R_207()) {
    jj_scanpos = xsp;
    if (jj_3R_208()) {
    jj_scanpos = xsp;
    if (jj_3R_209()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_298() {
    if (jj_3R_220()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_311()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_3R_64()) return true;
    if (jj_scan_token(124)) return true;
    return false;
  }

  private boolean jj_3R_240() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_203() {
    if (jj_scan_token(118)) return true;
    if (jj_3R_96()) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_66() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(28)) jj_scanpos = xsp;
    if (jj_scan_token(MONITORED)) return true;
    if (jj_3R_112()) return true;
    return false;
  }

  private boolean jj_3R_277() {
    if (jj_scan_token(118)) return true;
    if (jj_3R_96()) return true;
    return false;
  }

  private boolean jj_3R_239() {
    if (jj_scan_token(CHAR_LITERAL)) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_3R_64()) return true;
    if (jj_scan_token(124)) return true;
    return false;
  }

  private boolean jj_3R_153() {
    if (jj_scan_token(117)) return true;
    if (jj_scan_token(EXIST)) return true;
    if (jj_3R_96()) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_3R_95()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_203()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_204()) jj_scanpos = xsp;
    if (jj_scan_token(119)) return true;
    return false;
  }

  private boolean jj_3R_269() {
    if (jj_scan_token(129)) return true;
    if (jj_3R_298()) return true;
    if (jj_scan_token(130)) return true;
    return false;
  }

  private boolean jj_3R_67() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(28)) jj_scanpos = xsp;
    if (jj_scan_token(SHARED)) return true;
    if (jj_3R_112()) return true;
    return false;
  }

  private boolean jj_3_39() {
    if (jj_scan_token(117)) return true;
    if (jj_scan_token(EXIST)) return true;
    if (jj_scan_token(UNIQUE)) return true;
    return false;
  }

  private boolean jj_3_38() {
    if (jj_scan_token(117)) return true;
    if (jj_scan_token(FORALL)) return true;
    return false;
  }

  private boolean jj_3R_238() {
    if (jj_scan_token(NATNUMBER)) return true;
    return false;
  }

  private boolean jj_3R_168() {
    if (jj_scan_token(EXTEND)) return true;
    if (jj_3R_108()) return true;
    if (jj_scan_token(WITH)) return true;
    if (jj_3R_96()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_277()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(DO)) return true;
    if (jj_3R_221()) return true;
    return false;
  }

  private boolean jj_3R_123() {
    if (jj_3R_153()) return true;
    return false;
  }

  private boolean jj_3R_122() {
    if (jj_3R_152()) return true;
    return false;
  }

  private boolean jj_3R_121() {
    if (jj_3R_151()) return true;
    return false;
  }

  private boolean jj_3R_88() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_121()) {
    jj_scanpos = xsp;
    if (jj_3R_122()) {
    jj_scanpos = xsp;
    if (jj_3R_123()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_13() {
    if (jj_3R_64()) return true;
    if (jj_scan_token(124)) return true;
    return false;
  }

  private boolean jj_3R_236() {
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3R_290() {
    if (jj_3R_306()) return true;
    return false;
  }

  private boolean jj_3R_289() {
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_288() {
    if (jj_3R_305()) return true;
    return false;
  }

  private boolean jj_3R_237() {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  private boolean jj_3R_267() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_288()) {
    jj_scanpos = xsp;
    if (jj_3R_289()) {
    jj_scanpos = xsp;
    if (jj_3R_290()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_68() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(28)) jj_scanpos = xsp;
    if (jj_scan_token(CONTROLLED)) return true;
    if (jj_3R_112()) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_3R_64()) return true;
    if (jj_scan_token(124)) return true;
    return false;
  }

  private boolean jj_3R_91() {
    if (jj_scan_token(REAL_NUMBER)) return true;
    return false;
  }

  private boolean jj_3R_337() {
    if (jj_scan_token(122)) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_300() {
    if (jj_3R_64()) return true;
    if (jj_scan_token(124)) return true;
    return false;
  }

  private boolean jj_3R_349() {
    if (jj_scan_token(118)) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_299() {
    if (jj_scan_token(118)) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_279() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(28)) jj_scanpos = xsp;
    if (jj_scan_token(LOCAL)) return true;
    if (jj_3R_112()) return true;
    if (jj_scan_token(120)) return true;
    xsp = jj_scanpos;
    if (jj_3R_300()) jj_scanpos = xsp;
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3_45() {
    if (jj_3R_95()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_299()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_343() {
    if (jj_scan_token(127)) return true;
    if (jj_3R_95()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_349()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_336() {
    if (jj_scan_token(118)) return true;
    if (jj_3R_96()) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_90() {
    if (jj_scan_token(COMPLEX_NUMBER)) return true;
    return false;
  }

  private boolean jj_3R_260() {
    if (jj_3R_279()) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_348() {
    if (jj_scan_token(118)) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_scan_token(DOMAIN)) return true;
    if (jj_3R_108()) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3_30() {
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_66()) return true;
    return false;
  }

  private boolean jj_3R_342() {
    Token xsp;
    if (jj_3R_348()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_348()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_328() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_342()) {
    jj_scanpos = xsp;
    if (jj_3R_343()) return true;
    }
    return false;
  }

  private boolean jj_3_29() {
    if (jj_3R_90()) return true;
    return false;
  }

  private boolean jj_3R_197() {
    if (jj_3R_243()) return true;
    return false;
  }

  private boolean jj_3R_162() {
    if (jj_3R_220()) return true;
    if (jj_scan_token(126)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_45()) jj_scanpos = xsp;
    if (jj_scan_token(128)) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_196() {
    if (jj_3R_242()) return true;
    return false;
  }

  private boolean jj_3R_195() {
    if (jj_3R_241()) return true;
    return false;
  }

  private boolean jj_3R_194() {
    if (jj_3R_240()) return true;
    return false;
  }

  private boolean jj_3R_227() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3R_260()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_193() {
    if (jj_3R_239()) return true;
    return false;
  }

  private boolean jj_3R_192() {
    if (jj_3R_238()) return true;
    return false;
  }

  private boolean jj_3R_191() {
    if (jj_3R_237()) return true;
    return false;
  }

  private boolean jj_3R_190() {
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3R_189() {
    if (jj_3R_90()) return true;
    return false;
  }

  private boolean jj_3_37() {
    if (jj_3R_95()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_328()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_89() {
    if (jj_scan_token(ID_FUNCTION)) return true;
    return false;
  }

  private boolean jj_3R_149() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_189()) {
    jj_scanpos = xsp;
    if (jj_3R_190()) {
    jj_scanpos = xsp;
    if (jj_3R_191()) {
    jj_scanpos = xsp;
    if (jj_3R_192()) {
    jj_scanpos = xsp;
    if (jj_3R_193()) {
    jj_scanpos = xsp;
    if (jj_3R_194()) {
    jj_scanpos = xsp;
    if (jj_3R_195()) {
    jj_scanpos = xsp;
    if (jj_3R_196()) {
    jj_scanpos = xsp;
    if (jj_3R_197()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_64()) return true;
    if (jj_scan_token(124)) return true;
    return false;
  }

  private boolean jj_3R_324() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_96()) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_3R_95()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_336()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_337()) jj_scanpos = xsp;
    if (jj_scan_token(120)) return true;
    if (jj_3R_95()) return true;
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3R_112() {
    if (jj_scan_token(ID_FUNCTION)) return true;
    return false;
  }

  private boolean jj_3R_310() {
    if (jj_scan_token(LT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_37()) jj_scanpos = xsp;
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_226() {
    if (jj_scan_token(STATIC)) return true;
    if (jj_3R_112()) return true;
    return false;
  }

  private boolean jj_3R_96() {
    if (jj_3R_127()) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_64()) return true;
    if (jj_scan_token(124)) return true;
    return false;
  }

  private boolean jj_3R_276() {
    if (jj_scan_token(118)) return true;
    if (jj_3R_96()) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_335() {
    if (jj_scan_token(122)) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_220() {
    if (jj_scan_token(ID_RULE)) return true;
    return false;
  }

  private boolean jj_3R_144() {
    if (jj_scan_token(DERIVED)) return true;
    if (jj_3R_112()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_60()) return true;
    return false;
  }

  private boolean jj_3R_326() {
    if (jj_scan_token(118)) return true;
    if (jj_3R_95()) return true;
    if (jj_scan_token(124)) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_108() {
    if (jj_scan_token(ID_DOMAIN)) return true;
    return false;
  }

  private boolean jj_3R_169() {
    if (jj_3R_92()) return true;
    return false;
  }

  private boolean jj_3R_176() {
    if (jj_3R_227()) return true;
    return false;
  }

  private boolean jj_3R_334() {
    if (jj_scan_token(118)) return true;
    if (jj_3R_96()) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_175() {
    if (jj_3R_226()) return true;
    return false;
  }

  private boolean jj_3R_167() {
    if (jj_scan_token(LET)) return true;
    if (jj_scan_token(117)) return true;
    if (jj_3R_96()) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_3R_95()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_276()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(119)) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_3R_221()) return true;
    if (jj_scan_token(ENDLET)) return true;
    return false;
  }

  private boolean jj_3R_143() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_175()) {
    jj_scanpos = xsp;
    if (jj_3R_176()) return true;
    }
    return false;
  }

  private boolean jj_3_28() {
    if (jj_3R_89()) return true;
    if (jj_scan_token(125)) return true;
    return false;
  }

  private boolean jj_3R_264() {
    if (jj_scan_token(ID_ENUM)) return true;
    return false;
  }

  private boolean jj_3R_107() {
    if (jj_3R_144()) return true;
    return false;
  }

  private boolean jj_3R_106() {
    if (jj_3R_143()) return true;
    return false;
  }

  private boolean jj_3R_141() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_28()) jj_scanpos = xsp;
    if (jj_3R_112()) return true;
    xsp = jj_scanpos;
    if (jj_3R_169()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_60() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_106()) {
    jj_scanpos = xsp;
    if (jj_3R_107()) return true;
    }
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_127() {
    if (jj_scan_token(ID_VARIABLE)) return true;
    return false;
  }

  private boolean jj_3_36() {
    if (jj_3R_95()) return true;
    if (jj_scan_token(124)) return true;
    if (jj_3R_95()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_326()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_323() {
    if (jj_scan_token(126)) return true;
    if (jj_3R_96()) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_3R_95()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_334()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_335()) jj_scanpos = xsp;
    if (jj_scan_token(120)) return true;
    if (jj_3R_95()) return true;
    if (jj_scan_token(128)) return true;
    return false;
  }

  private boolean jj_3R_318() {
    if (jj_scan_token(124)) return true;
    return false;
  }

  private boolean jj_3R_111() {
    if (jj_3R_145()) return true;
    return false;
  }

  private boolean jj_3R_275() {
    if (jj_scan_token(WITH)) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_110() {
    if (jj_3R_108()) return true;
    return false;
  }

  private boolean jj_3R_64() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_110()) {
    jj_scanpos = xsp;
    if (jj_3R_111()) return true;
    }
    return false;
  }

  private boolean jj_3R_308() {
    if (jj_scan_token(121)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_318()) {
    jj_scanpos = xsp;
    if (jj_3_36()) return true;
    }
    if (jj_scan_token(123)) return true;
    return false;
  }

  private boolean jj_3R_198() {
    if (jj_3R_92()) return true;
    return false;
  }

  private boolean jj_3R_304() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_3R_95()) return true;
    if (jj_scan_token(DO)) return true;
    if (jj_3R_221()) return true;
    return false;
  }

  private boolean jj_3R_233() {
    if (jj_scan_token(MAP)) return true;
    if (jj_scan_token(117)) return true;
    if (jj_3R_64()) return true;
    if (jj_scan_token(118)) return true;
    if (jj_3R_64()) return true;
    if (jj_scan_token(119)) return true;
    return false;
  }

  private boolean jj_3_27() {
    if (jj_3R_89()) return true;
    if (jj_scan_token(125)) return true;
    return false;
  }

  private boolean jj_3R_274() {
    if (jj_scan_token(118)) return true;
    if (jj_3R_96()) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_150() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_27()) jj_scanpos = xsp;
    if (jj_3R_112()) return true;
    xsp = jj_scanpos;
    if (jj_3R_198()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_232() {
    if (jj_scan_token(BAG)) return true;
    if (jj_scan_token(117)) return true;
    if (jj_3R_64()) return true;
    if (jj_scan_token(119)) return true;
    return false;
  }

  private boolean jj_3R_120() {
    if (jj_3R_150()) return true;
    return false;
  }

  private boolean jj_3R_119() {
    if (jj_3R_96()) return true;
    return false;
  }

  private boolean jj_3R_333() {
    if (jj_scan_token(122)) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_118() {
    if (jj_3R_149()) return true;
    return false;
  }

  private boolean jj_3R_87() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_118()) {
    jj_scanpos = xsp;
    if (jj_3R_119()) {
    jj_scanpos = xsp;
    if (jj_3R_120()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_231() {
    if (jj_scan_token(POWERSET)) return true;
    if (jj_scan_token(117)) return true;
    if (jj_3R_64()) return true;
    if (jj_scan_token(119)) return true;
    return false;
  }

  private boolean jj_3R_347() {
    if (jj_scan_token(118)) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_166() {
    if (jj_scan_token(FORALL)) return true;
    if (jj_3R_96()) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_3R_95()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_274()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_275()) jj_scanpos = xsp;
    if (jj_scan_token(DO)) return true;
    if (jj_3R_221()) return true;
    return false;
  }

  private boolean jj_3R_303() {
    if (jj_scan_token(WHILEREC)) return true;
    if (jj_3R_95()) return true;
    if (jj_scan_token(DO)) return true;
    if (jj_3R_221()) return true;
    return false;
  }

  private boolean jj_3_26() {
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3_25() {
    if (jj_3R_87()) return true;
    return false;
  }

  private boolean jj_3R_341() {
    if (jj_scan_token(127)) return true;
    if (jj_3R_95()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_347()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_230() {
    if (jj_scan_token(SEQ)) return true;
    if (jj_scan_token(117)) return true;
    if (jj_3R_64()) return true;
    if (jj_scan_token(119)) return true;
    return false;
  }

  private boolean jj_3R_332() {
    if (jj_scan_token(118)) return true;
    if (jj_3R_96()) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_188() {
    if (jj_scan_token(117)) return true;
    if (jj_3R_69()) return true;
    if (jj_scan_token(119)) return true;
    return false;
  }

  private boolean jj_3R_187() {
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_186() {
    if (jj_3R_236()) return true;
    return false;
  }

  private boolean jj_3R_284() {
    if (jj_3R_304()) return true;
    return false;
  }

  private boolean jj_3R_283() {
    if (jj_3R_303()) return true;
    return false;
  }

  private boolean jj_3R_185() {
    if (jj_3R_87()) return true;
    return false;
  }

  private boolean jj_3R_255() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_283()) {
    jj_scanpos = xsp;
    if (jj_3R_284()) return true;
    }
    return false;
  }

  private boolean jj_3R_148() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_185()) {
    jj_scanpos = xsp;
    if (jj_3R_186()) {
    jj_scanpos = xsp;
    if (jj_3R_187()) {
    jj_scanpos = xsp;
    if (jj_3R_188()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_346() {
    if (jj_scan_token(118)) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_340() {
    Token xsp;
    if (jj_3R_346()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_346()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_327() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_340()) {
    jj_scanpos = xsp;
    if (jj_3R_341()) return true;
    }
    return false;
  }

  private boolean jj_3R_262() {
    if (jj_scan_token(118)) return true;
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3R_273() {
    if (jj_scan_token(IFNONE)) return true;
    if (jj_3R_221()) return true;
    return false;
  }

  private boolean jj_3R_117() {
    if (jj_3R_148()) return true;
    return false;
  }

  private boolean jj_3R_322() {
    if (jj_scan_token(121)) return true;
    if (jj_3R_96()) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_3R_95()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_332()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_333()) jj_scanpos = xsp;
    if (jj_scan_token(120)) return true;
    if (jj_3R_95()) return true;
    if (jj_scan_token(124)) return true;
    if (jj_3R_95()) return true;
    if (jj_scan_token(122)) return true;
    if (jj_scan_token(123)) return true;
    return false;
  }

  private boolean jj_3R_147() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3R_229() {
    if (jj_scan_token(PROD)) return true;
    if (jj_scan_token(117)) return true;
    if (jj_3R_64()) return true;
    Token xsp;
    if (jj_3R_262()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_262()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(119)) return true;
    return false;
  }

  private boolean jj_3_35() {
    if (jj_3R_95()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_327()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_302() {
    if (jj_scan_token(OTHERWISE)) return true;
    if (jj_3R_221()) return true;
    return false;
  }

  private boolean jj_3_24() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3R_116() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_24()) {
    jj_scanpos = xsp;
    if (jj_3R_147()) return true;
    }
    return false;
  }

  private boolean jj_3R_86() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_116()) {
    jj_scanpos = xsp;
    if (jj_3R_117()) return true;
    }
    return false;
  }

  private boolean jj_3R_309() {
    if (jj_scan_token(121)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_35()) jj_scanpos = xsp;
    if (jj_scan_token(123)) return true;
    return false;
  }

  private boolean jj_3R_286() {
    if (jj_scan_token(118)) return true;
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3R_301() {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_95()) return true;
    if (jj_scan_token(120)) return true;
    if (jj_3R_221()) return true;
    return false;
  }

  private boolean jj_3R_261() {
    if (jj_scan_token(117)) return true;
    if (jj_3R_64()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_286()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(119)) return true;
    return false;
  }

  private boolean jj_3R_228() {
    if (jj_scan_token(RULEDOM)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_261()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_272() {
    if (jj_scan_token(118)) return true;
    if (jj_3R_96()) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_98() {
    if (jj_scan_token(122)) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_329() {
    if (jj_scan_token(PWR)) return true;
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3R_282() {
    if (jj_scan_token(SWITCH)) return true;
    if (jj_3R_95()) return true;
    Token xsp;
    if (jj_3R_301()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_301()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_302()) jj_scanpos = xsp;
    if (jj_scan_token(END_SWITCH)) return true;
    return false;
  }

  private boolean jj_3R_115() {
    if (jj_3R_86()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_329()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_182() {
    if (jj_3R_233()) return true;
    return false;
  }

  private boolean jj_3R_181() {
    if (jj_3R_232()) return true;
    return false;
  }

  private boolean jj_3R_331() {
    if (jj_scan_token(122)) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_180() {
    if (jj_3R_231()) return true;
    return false;
  }

  private boolean jj_3R_179() {
    if (jj_3R_230()) return true;
    return false;
  }

  private boolean jj_3R_178() {
    if (jj_3R_229()) return true;
    return false;
  }

  private boolean jj_3R_177() {
    if (jj_3R_228()) return true;
    return false;
  }

  private boolean jj_3R_254() {
    if (jj_3R_282()) return true;
    return false;
  }

  private boolean jj_3R_145() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_177()) {
    jj_scanpos = xsp;
    if (jj_3R_178()) {
    jj_scanpos = xsp;
    if (jj_3R_179()) {
    jj_scanpos = xsp;
    if (jj_3R_180()) {
    jj_scanpos = xsp;
    if (jj_3R_181()) {
    jj_scanpos = xsp;
    if (jj_3R_182()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_219() {
    if (jj_3R_255()) return true;
    return false;
  }

  private boolean jj_3R_218() {
    if (jj_3R_254()) return true;
    return false;
  }

  private boolean jj_3R_165() {
    if (jj_scan_token(CHOOSE)) return true;
    if (jj_3R_96()) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_3R_95()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_272()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(WITH)) return true;
    if (jj_3R_95()) return true;
    if (jj_scan_token(DO)) return true;
    if (jj_3R_221()) return true;
    xsp = jj_scanpos;
    if (jj_3R_273()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_160() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_218()) {
    jj_scanpos = xsp;
    if (jj_3R_219()) return true;
    }
    return false;
  }

  private boolean jj_3R_345() {
    if (jj_scan_token(118)) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_330() {
    if (jj_scan_token(118)) return true;
    if (jj_3R_96()) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_85() {
    if (jj_scan_token(ID_FUNCTION)) return true;
    if (jj_3R_115()) return true;
    return false;
  }

  private boolean jj_3R_84() {
    if (jj_scan_token(DIV)) return true;
    if (jj_3R_115()) return true;
    return false;
  }

  private boolean jj_3R_97() {
    if (jj_scan_token(118)) return true;
    if (jj_3R_96()) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_339() {
    if (jj_scan_token(127)) return true;
    if (jj_3R_95()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_345()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_83() {
    if (jj_scan_token(MULT)) return true;
    if (jj_3R_115()) return true;
    return false;
  }

  private boolean jj_3_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind == ID_FUNCTION && getToken(1).image.equals("mod");
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_85()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_344() {
    if (jj_scan_token(118)) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_82() {
    if (jj_3R_115()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_23()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_338() {
    Token xsp;
    if (jj_3R_344()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_344()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_325() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_338()) {
    jj_scanpos = xsp;
    if (jj_3R_339()) return true;
    }
    return false;
  }

  private boolean jj_3R_321() {
    if (jj_scan_token(121)) return true;
    if (jj_3R_96()) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_3R_95()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_330()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_331()) jj_scanpos = xsp;
    if (jj_scan_token(120)) return true;
    if (jj_3R_95()) return true;
    if (jj_scan_token(123)) return true;
    return false;
  }

  private boolean jj_3_34() {
    if (jj_3R_95()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_325()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_320() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_82()) return true;
    return false;
  }

  private boolean jj_3R_307() {
    if (jj_scan_token(126)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_34()) jj_scanpos = xsp;
    if (jj_scan_token(128)) return true;
    return false;
  }

  private boolean jj_3_40() {
    if (jj_scan_token(121)) return true;
    if (jj_3R_96()) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_3R_95()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_97()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_98()) jj_scanpos = xsp;
    if (jj_scan_token(120)) return true;
    if (jj_3R_95()) return true;
    if (jj_scan_token(123)) return true;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_82()) return true;
    return false;
  }

  private boolean jj_3R_94() {
    if (jj_3R_95()) return true;
    if (jj_scan_token(124)) return true;
    return false;
  }

  private boolean jj_3R_285() {
    if (jj_3R_99()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  private boolean jj_3R_316() {
    if (jj_3R_324()) return true;
    return false;
  }

  private boolean jj_3R_312() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_3R_320()) return true;
    }
    return false;
  }

  private boolean jj_3R_223() {
    if (jj_scan_token(ENUM)) return true;
    if (jj_scan_token(DOMAIN)) return true;
    return false;
  }

  private boolean jj_3R_315() {
    if (jj_3R_323()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ASMParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  /** Whether we are looking ahead. */
  private boolean jj_lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[150];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x200,0x180,0x0,0x2000,0x2000,0x6000,0x400,0x800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000000,0x8000,0x0,0x0,0x4000000,0x0,0x800000,0x500000,0xb0000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb0000,0xa0000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x500000,0x10000000,0x10000000,0x10000000,0x10000000,0x0,0x0,0x0,0x0,0x0,0x0,0xf8000000,0xd8000000,0x10000000,0x10000000,0x10000000,0x10000000,0x10000000,0x10000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000000,0x10000000,0x0,0x0,0x0,0x0,0x0,0x0,0x10000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000000,0x10000000,0x0,0x0,0x10000000,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3f00,0x0,0x0,0x0,0x3f00,0x0,0x0,0x0,0x0,0x0,0x3f78,0x0,0x3f78,0x0,0x0,0x3f00,0x0,0x0,0x0,0x3f00,0x3,0x3,0x0,0x0,0x0,0x0,0x0,0x0,0x8443f00,0x1ff00,0x0,0x0,0x0,0x0,0x0,0x0,0x1ff00,0x3f00,0x0,0x1c000,0x0,0x0,0x1c000,0xc000,0x440000,0x3f00,0x100000,0x1000000,0x2000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000000,0x0,0x0,0x80000000,0x0,0x80000000,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8440000,0x0,0x400000,0x0,0x0,0x0,0x8040000,0x0,0x8440000,0x100000,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0x0,0x8440000,0x0,0x0,0x0,0x0,0x400000,0x1000000,0x2000000,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000000,0x0,0x0,0x0,0x0,0x0,0x1c,0x0,0x0,0x0,0x0,0x0,0x1c,0x8,0x0,0x0,0x0,0x0,0x200000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000,0x10000,0x10000,0x0,0x0,0x0,0x0,0x0,0x800000,0x30000000,0xfc00000,0x30000000,0x20000000,0xc0000000,0x0,0x20000000,0x30000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800000,0x0,0x0,0x0,0x0,0x0,0x800000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x195943,0x15000,0x180000,0x0,0x0,0x0,0x943,0x0,0x195943,0x0,0x0,0x400,0x0,0x0,0x0,0x0,0x0,0x15000,0x195943,0x0,0x0,0x10000,0x0,0x180000,0x0,0x0,0x180000,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4600,0x400000,0x4600,0x200000,0x4600,0x400000,0x4600,0x4600,0x0,0x0,0x400000,0x200000,0x0,0x0,0x0,0x0,0x0,0x400000,0x200000,0x0,0x0,0x400000,0x200000,0x400000,0x200000,0x0,0x0,0x0,0x800,0x200,0x200000,0x4600,0x400000,0x200,0x200000,0x4600,0x1000,0x2000,0x0,0x0,0x0,0x0,0x0,0x4000000,0x0,0x400000,0x200000,0x400000,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x42200200,0x2643f8,0x0,0x0,0x0,0x0,0x1,0x0,0x2643f8,0x200,0x200000,0x641f8,0x200000,0x200000,0x60118,0x0,0x0,0x42000200,0x0,0x0,0x0,0x400000,0x40000000,0x2000000,0x400000,0x400000,0x80400000,0x80400000,0x400000,0x400000,0x80400000,0x80400000,0x400000,0x10000000,0x400000,0x400000,0x80400000,0x80400000,0x42200000,0x200000,0x400000,0x0,0x400000,0x0,0x400000,0x0,0x400000,0x42000000,0x400000,0x4000000,0x400000,0x4000000,0x400000,0x4000000,0x400000,0x4000000,0x400000,0x200000,0x4480,0x400,0x4080,0x4080,0x400000,0x40000000,0x400,0x4080,0x4480,0x0,0x400000,0x0,0x400000,0x0,0x400000,0x400000,0x400000,0x400,0x4480,0x400000,0x4080,0x0,0x400000,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[46];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public ASMParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ASMParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ASMParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 150; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 150; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public ASMParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new ASMParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 150; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 150; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public ASMParser(ASMParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 150; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ASMParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 150; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        exists = true;
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[133];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 150; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 133; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 46; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

  /*************
    Attenzione il parser continua ad avere metodi come
    public ASMParser(java.io.InputStream stream) {}
    ...
    che non inizializzano correttamente il parser (ad esempio fileSpec)
    **************/
}
